export const dep = {
  "org.apache.commons.csv.CSVParser.1": {
    reference: [
      "org.apache.commons.csv.Token.Type",
      "org.apache.commons.csv.CSVParser",
      "org.apache.commons.csv.Token",
    ],
    contain: [
      "org.apache.commons.csv.CSVParser.1.static {...}",
      "org.apache.commons.csv.CSVParser.1.$SwitchMap$org$apache$commons$csv$Token$Type : int[]",
    ],
    call: [],
  },
  "org.apache.commons.csv.CSVParser.1.static {...}": {
    reference: [
      "org.apache.commons.csv.CSVParser.1.$SwitchMap$org$apache$commons$csv$Token$Type : int[]",
      "org.apache.commons.csv.Token.Type.TOKEN : Type",
      "org.apache.commons.csv.Token.Type.EORECORD : Type",
      "org.apache.commons.csv.Token.Type.EOF : Type",
      "org.apache.commons.csv.Token.Type.INVALID : Type",
      "org.apache.commons.csv.Token.Type.COMMENT : Type",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.Token.Type.values()",
      "org.apache.commons.csv.Token.Type.ordinal()",
    ],
  },
  "org.apache.commons.csv.CSVParser.1.$SwitchMap$org$apache$commons$csv$Token$Type : int[]": {
    reference: ["int[]"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.Predefined": {
    reference: [
      "org.apache.commons.csv.CSVFormat.Predefined[]",
      "org.apache.commons.csv.CSVFormat",
    ],
    contain: [
      "org.apache.commons.csv.CSVFormat.Predefined.values()",
      "org.apache.commons.csv.CSVFormat.Predefined.valueOf(String)",
      "org.apache.commons.csv.CSVFormat.Predefined.Predefined(String,int)",
      "org.apache.commons.csv.CSVFormat.Predefined.getFormat()",
      "org.apache.commons.csv.CSVFormat.Predefined.static {...}",
      "org.apache.commons.csv.CSVFormat.Predefined.Default : Predefined",
      "org.apache.commons.csv.CSVFormat.Predefined.Excel : Predefined",
      "org.apache.commons.csv.CSVFormat.Predefined.InformixUnload : Predefined",
      "org.apache.commons.csv.CSVFormat.Predefined.InformixUnloadCsv : Predefined",
      "org.apache.commons.csv.CSVFormat.Predefined.MongoDBCsv : Predefined",
      "org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv : Predefined",
      "org.apache.commons.csv.CSVFormat.Predefined.MySQL : Predefined",
      "org.apache.commons.csv.CSVFormat.Predefined.Oracle : Predefined",
      "org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv : Predefined",
      "org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLText : Predefined",
      "org.apache.commons.csv.CSVFormat.Predefined.RFC4180 : Predefined",
      "org.apache.commons.csv.CSVFormat.Predefined.TDF : Predefined",
      "org.apache.commons.csv.CSVFormat.Predefined.format : CSVFormat",
      "org.apache.commons.csv.CSVFormat.Predefined.$VALUES : Predefined[]",
    ],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.Predefined.values()": {
    reference: [
      "org.apache.commons.csv.CSVFormat.Predefined.$VALUES : Predefined[]",
    ],
    contain: [],
    call: ["org.apache.commons.csv.CSVFormat.Predefined[].clone()"],
  },
  "org.apache.commons.csv.CSVFormat.Predefined.Predefined(String,int)": {
    reference: [
      "org.apache.commons.csv.CSVFormat.Predefined.format : CSVFormat",
    ],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.Predefined.getFormat()": {
    reference: [
      "org.apache.commons.csv.CSVFormat.Predefined.format : CSVFormat",
    ],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.Predefined.static {...}": {
    reference: [
      "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat",
      "org.apache.commons.csv.CSVFormat.Predefined.Default : Predefined",
      "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat",
      "org.apache.commons.csv.CSVFormat.Predefined.Excel : Predefined",
      "org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD : CSVFormat",
      "org.apache.commons.csv.CSVFormat.Predefined.InformixUnload : Predefined",
      "org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV : CSVFormat",
      "org.apache.commons.csv.CSVFormat.Predefined.InformixUnloadCsv : Predefined",
      "org.apache.commons.csv.CSVFormat.MONGODB_CSV : CSVFormat",
      "org.apache.commons.csv.CSVFormat.Predefined.MongoDBCsv : Predefined",
      "org.apache.commons.csv.CSVFormat.MONGODB_TSV : CSVFormat",
      "org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv : Predefined",
      "org.apache.commons.csv.CSVFormat.MYSQL : CSVFormat",
      "org.apache.commons.csv.CSVFormat.Predefined.MySQL : Predefined",
      "org.apache.commons.csv.CSVFormat.ORACLE : CSVFormat",
      "org.apache.commons.csv.CSVFormat.Predefined.Oracle : Predefined",
      "org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV : CSVFormat",
      "org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv : Predefined",
      "org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT : CSVFormat",
      "org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLText : Predefined",
      "org.apache.commons.csv.CSVFormat.RFC4180 : CSVFormat",
      "org.apache.commons.csv.CSVFormat.Predefined.RFC4180 : Predefined",
      "org.apache.commons.csv.CSVFormat.TDF : CSVFormat",
      "org.apache.commons.csv.CSVFormat.Predefined.TDF : Predefined",
      "org.apache.commons.csv.CSVFormat.Predefined.$VALUES : Predefined[]",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.Predefined.Predefined(String,int)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.Predefined.Default : Predefined": {
    reference: ["org.apache.commons.csv.CSVFormat.Predefined"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.Predefined.Excel : Predefined": {
    reference: ["org.apache.commons.csv.CSVFormat.Predefined"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.Predefined.InformixUnload : Predefined": {
    reference: ["org.apache.commons.csv.CSVFormat.Predefined"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.Predefined.InformixUnloadCsv : Predefined": {
    reference: ["org.apache.commons.csv.CSVFormat.Predefined"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.Predefined.MongoDBCsv : Predefined": {
    reference: ["org.apache.commons.csv.CSVFormat.Predefined"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv : Predefined": {
    reference: ["org.apache.commons.csv.CSVFormat.Predefined"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.Predefined.MySQL : Predefined": {
    reference: ["org.apache.commons.csv.CSVFormat.Predefined"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.Predefined.Oracle : Predefined": {
    reference: ["org.apache.commons.csv.CSVFormat.Predefined"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv : Predefined": {
    reference: ["org.apache.commons.csv.CSVFormat.Predefined"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLText : Predefined": {
    reference: ["org.apache.commons.csv.CSVFormat.Predefined"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.Predefined.RFC4180 : Predefined": {
    reference: ["org.apache.commons.csv.CSVFormat.Predefined"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.Predefined.TDF : Predefined": {
    reference: ["org.apache.commons.csv.CSVFormat.Predefined"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.Predefined.format : CSVFormat": {
    reference: ["org.apache.commons.csv.CSVFormat"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.Predefined.$VALUES : Predefined[]": {
    reference: ["org.apache.commons.csv.CSVFormat.Predefined[]"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVParser.CSVRecordIterator": {
    reference: [
      "org.apache.commons.csv.CSVParser",
      "org.apache.commons.csv.CSVRecord",
    ],
    contain: [
      "org.apache.commons.csv.CSVParser.CSVRecordIterator.CSVRecordIterator()",
      "org.apache.commons.csv.CSVParser.CSVRecordIterator.getNextRecord()",
      "org.apache.commons.csv.CSVParser.CSVRecordIterator.hasNext()",
      "org.apache.commons.csv.CSVParser.CSVRecordIterator.next()",
      "org.apache.commons.csv.CSVParser.CSVRecordIterator.remove()",
      "org.apache.commons.csv.CSVParser.CSVRecordIterator.current : CSVRecord",
      "org.apache.commons.csv.CSVParser.CSVRecordIterator.this$0 : CSVParser",
    ],
    call: [],
  },
  "org.apache.commons.csv.CSVParser.CSVRecordIterator.CSVRecordIterator()": {
    reference: [
      "org.apache.commons.csv.CSVParser.CSVRecordIterator.this$0 : CSVParser",
    ],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVParser.CSVRecordIterator.getNextRecord()": {
    reference: [
      "org.apache.commons.csv.CSVParser.CSVRecordIterator.this$0 : CSVParser",
    ],
    contain: [],
    call: ["org.apache.commons.csv.CSVParser.nextRecord()"],
  },
  "org.apache.commons.csv.CSVParser.CSVRecordIterator.hasNext()": {
    reference: [
      "org.apache.commons.csv.CSVParser.CSVRecordIterator.this$0 : CSVParser",
      "org.apache.commons.csv.CSVParser.CSVRecordIterator.current : CSVRecord",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVParser.isClosed()",
      "org.apache.commons.csv.CSVParser.CSVRecordIterator.getNextRecord()",
    ],
  },
  "org.apache.commons.csv.CSVParser.CSVRecordIterator.next()": {
    reference: [
      "org.apache.commons.csv.CSVParser.CSVRecordIterator.this$0 : CSVParser",
      "org.apache.commons.csv.CSVParser.CSVRecordIterator.current : CSVRecord",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVParser.isClosed()",
      "org.apache.commons.csv.CSVParser.CSVRecordIterator.getNextRecord()",
    ],
  },
  "org.apache.commons.csv.CSVParser.CSVRecordIterator.current : CSVRecord": {
    reference: ["org.apache.commons.csv.CSVRecord"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVParser.CSVRecordIterator.this$0 : CSVParser": {
    reference: ["org.apache.commons.csv.CSVParser"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.Token": {
    reference: ["org.apache.commons.csv.Token.Type"],
    contain: [
      "org.apache.commons.csv.Token.Token()",
      "org.apache.commons.csv.Token.reset()",
      "org.apache.commons.csv.Token.toString()",
      "org.apache.commons.csv.Token.INITIAL_TOKEN_LENGTH : int",
      "org.apache.commons.csv.Token.type : Type",
      "org.apache.commons.csv.Token.content : StringBuilder",
      "org.apache.commons.csv.Token.isReady : boolean",
    ],
    call: [],
  },
  "org.apache.commons.csv.Token.Token()": {
    reference: [
      "org.apache.commons.csv.Token.Type.INVALID : Type",
      "org.apache.commons.csv.Token.type : Type",
      "org.apache.commons.csv.Token.content : StringBuilder",
    ],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.Token.reset()": {
    reference: [
      "org.apache.commons.csv.Token.content : StringBuilder",
      "org.apache.commons.csv.Token.Type.INVALID : Type",
      "org.apache.commons.csv.Token.type : Type",
      "org.apache.commons.csv.Token.isReady : boolean",
    ],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.Token.toString()": {
    reference: [
      "org.apache.commons.csv.Token.type : Type",
      "org.apache.commons.csv.Token.content : StringBuilder",
    ],
    contain: [],
    call: ["org.apache.commons.csv.Token.Type.name()"],
  },
  "org.apache.commons.csv.Token.type : Type": {
    reference: ["org.apache.commons.csv.Token.Type"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.Constants": {
    reference: [],
    contain: [
      "org.apache.commons.csv.Constants.Constants()",
      "org.apache.commons.csv.Constants.static {...}",
      "org.apache.commons.csv.Constants.BACKSLASH : char",
      "org.apache.commons.csv.Constants.BACKSPACE : char",
      "org.apache.commons.csv.Constants.COMMA : char",
      "org.apache.commons.csv.Constants.COMMENT : char",
      "org.apache.commons.csv.Constants.CR : char",
      "org.apache.commons.csv.Constants.CRLF : String",
      "org.apache.commons.csv.Constants.DOUBLE_QUOTE_CHAR : Character",
      "org.apache.commons.csv.Constants.EMPTY : String",
      "org.apache.commons.csv.Constants.END_OF_STREAM : int",
      "org.apache.commons.csv.Constants.FF : char",
      "org.apache.commons.csv.Constants.LF : char",
      "org.apache.commons.csv.Constants.LINE_SEPARATOR : String",
      "org.apache.commons.csv.Constants.NEXT_LINE : String",
      "org.apache.commons.csv.Constants.PARAGRAPH_SEPARATOR : String",
      "org.apache.commons.csv.Constants.PIPE : char",
      "org.apache.commons.csv.Constants.RS : char",
      "org.apache.commons.csv.Constants.SP : char",
      "org.apache.commons.csv.Constants.TAB : char",
      "org.apache.commons.csv.Constants.UNDEFINED : int",
      "org.apache.commons.csv.Constants.US : char",
    ],
    call: [],
  },
  "org.apache.commons.csv.Constants.static {...}": {
    reference: [
      "org.apache.commons.csv.Constants.DOUBLE_QUOTE_CHAR : Character",
    ],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVRecord": {
    reference: ["org.apache.commons.csv.CSVParser"],
    contain: [
      "org.apache.commons.csv.CSVRecord.CSVRecord(CSVParser,String[],String,long,long)",
      "org.apache.commons.csv.CSVRecord.get(Enum)",
      "org.apache.commons.csv.CSVRecord.get(int)",
      "org.apache.commons.csv.CSVRecord.get(String)",
      "org.apache.commons.csv.CSVRecord.getCharacterPosition()",
      "org.apache.commons.csv.CSVRecord.getComment()",
      "org.apache.commons.csv.CSVRecord.getHeaderMapRaw()",
      "org.apache.commons.csv.CSVRecord.getParser()",
      "org.apache.commons.csv.CSVRecord.getRecordNumber()",
      "org.apache.commons.csv.CSVRecord.hasComment()",
      "org.apache.commons.csv.CSVRecord.isConsistent()",
      "org.apache.commons.csv.CSVRecord.isMapped(String)",
      "org.apache.commons.csv.CSVRecord.isSet(String)",
      "org.apache.commons.csv.CSVRecord.isSet(int)",
      "org.apache.commons.csv.CSVRecord.iterator()",
      "org.apache.commons.csv.CSVRecord.putIn(Map)",
      "org.apache.commons.csv.CSVRecord.size()",
      "org.apache.commons.csv.CSVRecord.toList()",
      "org.apache.commons.csv.CSVRecord.toMap()",
      "org.apache.commons.csv.CSVRecord.toString()",
      "org.apache.commons.csv.CSVRecord.values()",
      "org.apache.commons.csv.CSVRecord.static {...}",
      "org.apache.commons.csv.CSVRecord.EMPTY_STRING_ARRAY : String[]",
      "org.apache.commons.csv.CSVRecord.serialVersionUID : long",
      "org.apache.commons.csv.CSVRecord.characterPosition : long",
      "org.apache.commons.csv.CSVRecord.comment : String",
      "org.apache.commons.csv.CSVRecord.recordNumber : long",
      "org.apache.commons.csv.CSVRecord.values : String[]",
      "org.apache.commons.csv.CSVRecord.parser : CSVParser",
    ],
    call: [],
  },
  "org.apache.commons.csv.CSVRecord.CSVRecord(CSVParser,String[],String,long,long)": {
    reference: [
      "org.apache.commons.csv.CSVRecord.recordNumber : long",
      "org.apache.commons.csv.CSVRecord.EMPTY_STRING_ARRAY : String[]",
      "org.apache.commons.csv.CSVRecord.values : String[]",
      "org.apache.commons.csv.CSVRecord.parser : CSVParser",
      "org.apache.commons.csv.CSVRecord.comment : String",
      "org.apache.commons.csv.CSVRecord.characterPosition : long",
    ],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVRecord.get(Enum)": {
    reference: [],
    contain: [],
    call: ["org.apache.commons.csv.CSVRecord.get(String)"],
  },
  "org.apache.commons.csv.CSVRecord.get(int)": {
    reference: ["org.apache.commons.csv.CSVRecord.values : String[]"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVRecord.get(String)": {
    reference: ["org.apache.commons.csv.CSVRecord.values : String[]"],
    contain: [],
    call: ["org.apache.commons.csv.CSVRecord.getHeaderMapRaw()"],
  },
  "org.apache.commons.csv.CSVRecord.getCharacterPosition()": {
    reference: ["org.apache.commons.csv.CSVRecord.characterPosition : long"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVRecord.getComment()": {
    reference: ["org.apache.commons.csv.CSVRecord.comment : String"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVRecord.getHeaderMapRaw()": {
    reference: ["org.apache.commons.csv.CSVRecord.parser : CSVParser"],
    contain: [],
    call: ["org.apache.commons.csv.CSVParser.getHeaderMapRaw()"],
  },
  "org.apache.commons.csv.CSVRecord.getParser()": {
    reference: ["org.apache.commons.csv.CSVRecord.parser : CSVParser"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVRecord.getRecordNumber()": {
    reference: ["org.apache.commons.csv.CSVRecord.recordNumber : long"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVRecord.hasComment()": {
    reference: ["org.apache.commons.csv.CSVRecord.comment : String"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVRecord.isConsistent()": {
    reference: ["org.apache.commons.csv.CSVRecord.values : String[]"],
    contain: [],
    call: ["org.apache.commons.csv.CSVRecord.getHeaderMapRaw()"],
  },
  "org.apache.commons.csv.CSVRecord.isMapped(String)": {
    reference: [],
    contain: [],
    call: ["org.apache.commons.csv.CSVRecord.getHeaderMapRaw()"],
  },
  "org.apache.commons.csv.CSVRecord.isSet(String)": {
    reference: ["org.apache.commons.csv.CSVRecord.values : String[]"],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVRecord.isMapped(String)",
      "org.apache.commons.csv.CSVRecord.getHeaderMapRaw()",
    ],
  },
  "org.apache.commons.csv.CSVRecord.isSet(int)": {
    reference: ["org.apache.commons.csv.CSVRecord.values : String[]"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVRecord.iterator()": {
    reference: [],
    contain: [],
    call: ["org.apache.commons.csv.CSVRecord.toList()"],
  },
  "org.apache.commons.csv.CSVRecord.putIn(Map)": {
    reference: ["org.apache.commons.csv.CSVRecord.values : String[]"],
    contain: [],
    call: ["org.apache.commons.csv.CSVRecord.getHeaderMapRaw()"],
  },
  "org.apache.commons.csv.CSVRecord.size()": {
    reference: ["org.apache.commons.csv.CSVRecord.values : String[]"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVRecord.toList()": {
    reference: ["org.apache.commons.csv.CSVRecord.values : String[]"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVRecord.toMap()": {
    reference: ["org.apache.commons.csv.CSVRecord.values : String[]"],
    contain: [],
    call: ["org.apache.commons.csv.CSVRecord.putIn(Map)"],
  },
  "org.apache.commons.csv.CSVRecord.toString()": {
    reference: [
      "org.apache.commons.csv.CSVRecord.comment : String",
      "org.apache.commons.csv.CSVRecord.recordNumber : long",
      "org.apache.commons.csv.CSVRecord.values : String[]",
    ],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVRecord.values()": {
    reference: ["org.apache.commons.csv.CSVRecord.values : String[]"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVRecord.static {...}": {
    reference: [
      "org.apache.commons.csv.CSVRecord.EMPTY_STRING_ARRAY : String[]",
    ],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVRecord.parser : CSVParser": {
    reference: ["org.apache.commons.csv.CSVParser"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.1": {
    reference: [
      "org.apache.commons.csv.QuoteMode",
      "org.apache.commons.csv.CSVFormat",
    ],
    contain: [
      "org.apache.commons.csv.CSVFormat.1.static {...}",
      "org.apache.commons.csv.CSVFormat.1.$SwitchMap$org$apache$commons$csv$QuoteMode : int[]",
    ],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.1.static {...}": {
    reference: [
      "org.apache.commons.csv.CSVFormat.1.$SwitchMap$org$apache$commons$csv$QuoteMode : int[]",
      "org.apache.commons.csv.QuoteMode.ALL : QuoteMode",
      "org.apache.commons.csv.QuoteMode.ALL_NON_NULL : QuoteMode",
      "org.apache.commons.csv.QuoteMode.NON_NUMERIC : QuoteMode",
      "org.apache.commons.csv.QuoteMode.NONE : QuoteMode",
      "org.apache.commons.csv.QuoteMode.MINIMAL : QuoteMode",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.QuoteMode.values()",
      "org.apache.commons.csv.QuoteMode.ordinal()",
    ],
  },
  "org.apache.commons.csv.CSVFormat.1.$SwitchMap$org$apache$commons$csv$QuoteMode : int[]": {
    reference: ["int[]"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.Assertions": {
    reference: [],
    contain: [
      "org.apache.commons.csv.Assertions.Assertions()",
      "org.apache.commons.csv.Assertions.notNull(Object,String)",
    ],
    call: [],
  },
  "org.apache.commons.csv.QuoteMode": {
    reference: ["org.apache.commons.csv.QuoteMode[]"],
    contain: [
      "org.apache.commons.csv.QuoteMode.values()",
      "org.apache.commons.csv.QuoteMode.valueOf(String)",
      "org.apache.commons.csv.QuoteMode.QuoteMode(String,int)",
      "org.apache.commons.csv.QuoteMode.static {...}",
      "org.apache.commons.csv.QuoteMode.ALL : QuoteMode",
      "org.apache.commons.csv.QuoteMode.ALL_NON_NULL : QuoteMode",
      "org.apache.commons.csv.QuoteMode.MINIMAL : QuoteMode",
      "org.apache.commons.csv.QuoteMode.NON_NUMERIC : QuoteMode",
      "org.apache.commons.csv.QuoteMode.NONE : QuoteMode",
      "org.apache.commons.csv.QuoteMode.$VALUES : QuoteMode[]",
    ],
    call: [],
  },
  "org.apache.commons.csv.QuoteMode.values()": {
    reference: ["org.apache.commons.csv.QuoteMode.$VALUES : QuoteMode[]"],
    contain: [],
    call: ["org.apache.commons.csv.QuoteMode[].clone()"],
  },
  "org.apache.commons.csv.QuoteMode.static {...}": {
    reference: [
      "org.apache.commons.csv.QuoteMode.ALL : QuoteMode",
      "org.apache.commons.csv.QuoteMode.ALL_NON_NULL : QuoteMode",
      "org.apache.commons.csv.QuoteMode.MINIMAL : QuoteMode",
      "org.apache.commons.csv.QuoteMode.NON_NUMERIC : QuoteMode",
      "org.apache.commons.csv.QuoteMode.NONE : QuoteMode",
      "org.apache.commons.csv.QuoteMode.$VALUES : QuoteMode[]",
    ],
    contain: [],
    call: ["org.apache.commons.csv.QuoteMode.QuoteMode(String,int)"],
  },
  "org.apache.commons.csv.QuoteMode.ALL : QuoteMode": {
    reference: ["org.apache.commons.csv.QuoteMode"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.QuoteMode.ALL_NON_NULL : QuoteMode": {
    reference: ["org.apache.commons.csv.QuoteMode"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.QuoteMode.MINIMAL : QuoteMode": {
    reference: ["org.apache.commons.csv.QuoteMode"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.QuoteMode.NON_NUMERIC : QuoteMode": {
    reference: ["org.apache.commons.csv.QuoteMode"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.QuoteMode.NONE : QuoteMode": {
    reference: ["org.apache.commons.csv.QuoteMode"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.QuoteMode.$VALUES : QuoteMode[]": {
    reference: ["org.apache.commons.csv.QuoteMode[]"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVParser.Headers": {
    reference: ["org.apache.commons.csv.CSVParser"],
    contain: [
      "org.apache.commons.csv.CSVParser.Headers.Headers(Map,List)",
      "org.apache.commons.csv.CSVParser.Headers.headerMap : Map",
      "org.apache.commons.csv.CSVParser.Headers.headerNames : List",
    ],
    call: [],
  },
  "org.apache.commons.csv.CSVParser.Headers.Headers(Map,List)": {
    reference: [
      "org.apache.commons.csv.CSVParser.Headers.headerMap : Map",
      "org.apache.commons.csv.CSVParser.Headers.headerNames : List",
    ],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.Token.Type": {
    reference: [
      "org.apache.commons.csv.Token.Type[]",
      "org.apache.commons.csv.Token",
    ],
    contain: [
      "org.apache.commons.csv.Token.Type.values()",
      "org.apache.commons.csv.Token.Type.valueOf(String)",
      "org.apache.commons.csv.Token.Type.Type(String,int)",
      "org.apache.commons.csv.Token.Type.static {...}",
      "org.apache.commons.csv.Token.Type.INVALID : Type",
      "org.apache.commons.csv.Token.Type.TOKEN : Type",
      "org.apache.commons.csv.Token.Type.EOF : Type",
      "org.apache.commons.csv.Token.Type.EORECORD : Type",
      "org.apache.commons.csv.Token.Type.COMMENT : Type",
      "org.apache.commons.csv.Token.Type.$VALUES : Type[]",
    ],
    call: [],
  },
  "org.apache.commons.csv.Token.Type.values()": {
    reference: ["org.apache.commons.csv.Token.Type.$VALUES : Type[]"],
    contain: [],
    call: ["org.apache.commons.csv.Token.Type[].clone()"],
  },
  "org.apache.commons.csv.Token.Type.static {...}": {
    reference: [
      "org.apache.commons.csv.Token.Type.INVALID : Type",
      "org.apache.commons.csv.Token.Type.TOKEN : Type",
      "org.apache.commons.csv.Token.Type.EOF : Type",
      "org.apache.commons.csv.Token.Type.EORECORD : Type",
      "org.apache.commons.csv.Token.Type.COMMENT : Type",
      "org.apache.commons.csv.Token.Type.$VALUES : Type[]",
    ],
    contain: [],
    call: ["org.apache.commons.csv.Token.Type.Type(String,int)"],
  },
  "org.apache.commons.csv.Token.Type.INVALID : Type": {
    reference: ["org.apache.commons.csv.Token.Type"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.Token.Type.TOKEN : Type": {
    reference: ["org.apache.commons.csv.Token.Type"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.Token.Type.EOF : Type": {
    reference: ["org.apache.commons.csv.Token.Type"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.Token.Type.EORECORD : Type": {
    reference: ["org.apache.commons.csv.Token.Type"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.Token.Type.COMMENT : Type": {
    reference: ["org.apache.commons.csv.Token.Type"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.Token.Type.$VALUES : Type[]": {
    reference: ["org.apache.commons.csv.Token.Type[]"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.IOUtils": {
    reference: [],
    contain: [
      "org.apache.commons.csv.IOUtils.IOUtils()",
      "org.apache.commons.csv.IOUtils.copy(Reader,Appendable)",
      "org.apache.commons.csv.IOUtils.copy(Reader,Appendable,CharBuffer)",
      "org.apache.commons.csv.IOUtils.copyLarge(Reader,Writer)",
      "org.apache.commons.csv.IOUtils.copyLarge(Reader,Writer,char[])",
      "org.apache.commons.csv.IOUtils.DEFAULT_BUFFER_SIZE : int",
      "org.apache.commons.csv.IOUtils.EOF : int",
    ],
    call: [],
  },
  "org.apache.commons.csv.IOUtils.copy(Reader,Appendable)": {
    reference: [],
    contain: [],
    call: ["org.apache.commons.csv.IOUtils.copy(Reader,Appendable,CharBuffer)"],
  },
  "org.apache.commons.csv.IOUtils.copyLarge(Reader,Writer)": {
    reference: [],
    contain: [],
    call: ["org.apache.commons.csv.IOUtils.copyLarge(Reader,Writer,char[])"],
  },
  "org.apache.commons.csv.CSVFormat": {
    reference: [
      "org.apache.commons.csv.Constants",
      "org.apache.commons.csv.CSVFormat.Predefined",
      "org.apache.commons.csv.CSVPrinter",
      "org.apache.commons.csv.QuoteMode",
      "org.apache.commons.csv.CSVParser",
      "org.apache.commons.csv.IOUtils",
    ],
    contain: [
      "org.apache.commons.csv.CSVFormat.isLineBreak(char)",
      "org.apache.commons.csv.CSVFormat.isLineBreak(Character)",
      "org.apache.commons.csv.CSVFormat.newFormat(char)",
      "org.apache.commons.csv.CSVFormat.valueOf(String)",
      "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)",
      "org.apache.commons.csv.CSVFormat.equals(Object)",
      "org.apache.commons.csv.CSVFormat.format(Object[])",
      "org.apache.commons.csv.CSVFormat.getAllowDuplicateHeaderNames()",
      "org.apache.commons.csv.CSVFormat.getAllowMissingColumnNames()",
      "org.apache.commons.csv.CSVFormat.getAutoFlush()",
      "org.apache.commons.csv.CSVFormat.getCommentMarker()",
      "org.apache.commons.csv.CSVFormat.getDelimiter()",
      "org.apache.commons.csv.CSVFormat.getEscapeCharacter()",
      "org.apache.commons.csv.CSVFormat.getHeader()",
      "org.apache.commons.csv.CSVFormat.getHeaderComments()",
      "org.apache.commons.csv.CSVFormat.getIgnoreEmptyLines()",
      "org.apache.commons.csv.CSVFormat.getIgnoreHeaderCase()",
      "org.apache.commons.csv.CSVFormat.getIgnoreSurroundingSpaces()",
      "org.apache.commons.csv.CSVFormat.getNullString()",
      "org.apache.commons.csv.CSVFormat.getQuoteCharacter()",
      "org.apache.commons.csv.CSVFormat.getQuoteMode()",
      "org.apache.commons.csv.CSVFormat.getRecordSeparator()",
      "org.apache.commons.csv.CSVFormat.getSkipHeaderRecord()",
      "org.apache.commons.csv.CSVFormat.getTrailingDelimiter()",
      "org.apache.commons.csv.CSVFormat.getTrim()",
      "org.apache.commons.csv.CSVFormat.hashCode()",
      "org.apache.commons.csv.CSVFormat.isCommentMarkerSet()",
      "org.apache.commons.csv.CSVFormat.isEscapeCharacterSet()",
      "org.apache.commons.csv.CSVFormat.isNullStringSet()",
      "org.apache.commons.csv.CSVFormat.isQuoteCharacterSet()",
      "org.apache.commons.csv.CSVFormat.parse(Reader)",
      "org.apache.commons.csv.CSVFormat.print(Appendable)",
      "org.apache.commons.csv.CSVFormat.print(File,Charset)",
      "org.apache.commons.csv.CSVFormat.print(Object,Appendable,boolean)",
      "org.apache.commons.csv.CSVFormat.print(Object,CharSequence,Appendable,boolean)",
      "org.apache.commons.csv.CSVFormat.print(Path,Charset)",
      "org.apache.commons.csv.CSVFormat.print(Reader,Appendable,boolean)",
      "org.apache.commons.csv.CSVFormat.printer()",
      "org.apache.commons.csv.CSVFormat.println(Appendable)",
      "org.apache.commons.csv.CSVFormat.printRecord(Appendable,Object[])",
      "org.apache.commons.csv.CSVFormat.printWithEscapes(CharSequence,Appendable)",
      "org.apache.commons.csv.CSVFormat.printWithEscapes(Reader,Appendable)",
      "org.apache.commons.csv.CSVFormat.printWithQuotes(Object,CharSequence,Appendable,boolean)",
      "org.apache.commons.csv.CSVFormat.printWithQuotes(Reader,Appendable)",
      "org.apache.commons.csv.CSVFormat.toString()",
      "org.apache.commons.csv.CSVFormat.toStringArray(Object[])",
      "org.apache.commons.csv.CSVFormat.trim(CharSequence)",
      "org.apache.commons.csv.CSVFormat.validate()",
      "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames()",
      "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)",
      "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames()",
      "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)",
      "org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)",
      "org.apache.commons.csv.CSVFormat.withCommentMarker(char)",
      "org.apache.commons.csv.CSVFormat.withCommentMarker(Character)",
      "org.apache.commons.csv.CSVFormat.withDelimiter(char)",
      "org.apache.commons.csv.CSVFormat.withEscape(char)",
      "org.apache.commons.csv.CSVFormat.withEscape(Character)",
      "org.apache.commons.csv.CSVFormat.withFirstRecordAsHeader()",
      "org.apache.commons.csv.CSVFormat.withHeader(Class)",
      "org.apache.commons.csv.CSVFormat.withHeader(ResultSet)",
      "org.apache.commons.csv.CSVFormat.withHeader(ResultSetMetaData)",
      "org.apache.commons.csv.CSVFormat.withHeader(String[])",
      "org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])",
      "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines()",
      "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)",
      "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase()",
      "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)",
      "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces()",
      "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)",
      "org.apache.commons.csv.CSVFormat.withNullString(String)",
      "org.apache.commons.csv.CSVFormat.withQuote(char)",
      "org.apache.commons.csv.CSVFormat.withQuote(Character)",
      "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)",
      "org.apache.commons.csv.CSVFormat.withRecordSeparator(char)",
      "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)",
      "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord()",
      "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)",
      "org.apache.commons.csv.CSVFormat.withSystemRecordSeparator()",
      "org.apache.commons.csv.CSVFormat.withTrailingDelimiter()",
      "org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)",
      "org.apache.commons.csv.CSVFormat.withTrim()",
      "org.apache.commons.csv.CSVFormat.withTrim(boolean)",
      "org.apache.commons.csv.CSVFormat.static {...}",
      "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat",
      "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat",
      "org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD : CSVFormat",
      "org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV : CSVFormat",
      "org.apache.commons.csv.CSVFormat.MONGODB_CSV : CSVFormat",
      "org.apache.commons.csv.CSVFormat.MONGODB_TSV : CSVFormat",
      "org.apache.commons.csv.CSVFormat.MYSQL : CSVFormat",
      "org.apache.commons.csv.CSVFormat.ORACLE : CSVFormat",
      "org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV : CSVFormat",
      "org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT : CSVFormat",
      "org.apache.commons.csv.CSVFormat.RFC4180 : CSVFormat",
      "org.apache.commons.csv.CSVFormat.serialVersionUID : long",
      "org.apache.commons.csv.CSVFormat.TDF : CSVFormat",
      "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean",
      "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean",
      "org.apache.commons.csv.CSVFormat.autoFlush : boolean",
      "org.apache.commons.csv.CSVFormat.commentMarker : Character",
      "org.apache.commons.csv.CSVFormat.delimiter : char",
      "org.apache.commons.csv.CSVFormat.escapeCharacter : Character",
      "org.apache.commons.csv.CSVFormat.header : String[]",
      "org.apache.commons.csv.CSVFormat.headerComments : String[]",
      "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean",
      "org.apache.commons.csv.CSVFormat.nullString : String",
      "org.apache.commons.csv.CSVFormat.quoteCharacter : Character",
      "org.apache.commons.csv.CSVFormat.quotedNullString : String",
      "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode",
      "org.apache.commons.csv.CSVFormat.recordSeparator : String",
      "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean",
      "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean",
      "org.apache.commons.csv.CSVFormat.trim : boolean",
    ],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.isLineBreak(Character)": {
    reference: [],
    contain: [],
    call: ["org.apache.commons.csv.CSVFormat.isLineBreak(char)"],
  },
  "org.apache.commons.csv.CSVFormat.newFormat(char)": {
    reference: [],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.valueOf(String)": {
    reference: [],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.Predefined.valueOf(String)",
      "org.apache.commons.csv.CSVFormat.Predefined.getFormat()",
    ],
  },
  "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)": {
    reference: [
      "org.apache.commons.csv.CSVFormat.delimiter : char",
      "org.apache.commons.csv.CSVFormat.quoteCharacter : Character",
      "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode",
      "org.apache.commons.csv.CSVFormat.commentMarker : Character",
      "org.apache.commons.csv.CSVFormat.escapeCharacter : Character",
      "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean",
      "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean",
      "org.apache.commons.csv.CSVFormat.recordSeparator : String",
      "org.apache.commons.csv.CSVFormat.nullString : String",
      "org.apache.commons.csv.CSVFormat.headerComments : String[]",
      "org.apache.commons.csv.CSVFormat.header : String[]",
      "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean",
      "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean",
      "org.apache.commons.csv.CSVFormat.trim : boolean",
      "org.apache.commons.csv.CSVFormat.autoFlush : boolean",
      "org.apache.commons.csv.CSVFormat.quotedNullString : String",
      "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.toStringArray(Object[])",
      "org.apache.commons.csv.CSVFormat.validate()",
    ],
  },
  "org.apache.commons.csv.CSVFormat.equals(Object)": {
    reference: [
      "org.apache.commons.csv.CSVFormat.delimiter : char",
      "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean",
      "org.apache.commons.csv.CSVFormat.autoFlush : boolean",
      "org.apache.commons.csv.CSVFormat.trim : boolean",
      "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean",
      "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean",
      "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode",
      "org.apache.commons.csv.CSVFormat.quoteCharacter : Character",
      "org.apache.commons.csv.CSVFormat.commentMarker : Character",
      "org.apache.commons.csv.CSVFormat.escapeCharacter : Character",
      "org.apache.commons.csv.CSVFormat.nullString : String",
      "org.apache.commons.csv.CSVFormat.header : String[]",
      "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean",
      "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean",
      "org.apache.commons.csv.CSVFormat.recordSeparator : String",
      "org.apache.commons.csv.CSVFormat.headerComments : String[]",
    ],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.format(Object[])": {
    reference: [],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)",
      "org.apache.commons.csv.CSVPrinter.printRecord(Object[])",
      "org.apache.commons.csv.CSVPrinter.close()",
    ],
  },
  "org.apache.commons.csv.CSVFormat.getAllowDuplicateHeaderNames()": {
    reference: [
      "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean",
    ],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.getAllowMissingColumnNames()": {
    reference: [
      "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean",
    ],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.getAutoFlush()": {
    reference: ["org.apache.commons.csv.CSVFormat.autoFlush : boolean"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.getCommentMarker()": {
    reference: ["org.apache.commons.csv.CSVFormat.commentMarker : Character"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.getDelimiter()": {
    reference: ["org.apache.commons.csv.CSVFormat.delimiter : char"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.getEscapeCharacter()": {
    reference: ["org.apache.commons.csv.CSVFormat.escapeCharacter : Character"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.getHeader()": {
    reference: ["org.apache.commons.csv.CSVFormat.header : String[]"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.getHeaderComments()": {
    reference: ["org.apache.commons.csv.CSVFormat.headerComments : String[]"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.getIgnoreEmptyLines()": {
    reference: ["org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.getIgnoreHeaderCase()": {
    reference: ["org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.getIgnoreSurroundingSpaces()": {
    reference: [
      "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean",
    ],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.getNullString()": {
    reference: ["org.apache.commons.csv.CSVFormat.nullString : String"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.getQuoteCharacter()": {
    reference: ["org.apache.commons.csv.CSVFormat.quoteCharacter : Character"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.getQuoteMode()": {
    reference: ["org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.getRecordSeparator()": {
    reference: ["org.apache.commons.csv.CSVFormat.recordSeparator : String"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.getSkipHeaderRecord()": {
    reference: ["org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.getTrailingDelimiter()": {
    reference: ["org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.getTrim()": {
    reference: ["org.apache.commons.csv.CSVFormat.trim : boolean"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.hashCode()": {
    reference: [
      "org.apache.commons.csv.CSVFormat.delimiter : char",
      "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode",
      "org.apache.commons.csv.CSVFormat.quoteCharacter : Character",
      "org.apache.commons.csv.CSVFormat.commentMarker : Character",
      "org.apache.commons.csv.CSVFormat.escapeCharacter : Character",
      "org.apache.commons.csv.CSVFormat.nullString : String",
      "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean",
      "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean",
      "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean",
      "org.apache.commons.csv.CSVFormat.trim : boolean",
      "org.apache.commons.csv.CSVFormat.autoFlush : boolean",
      "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean",
      "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean",
      "org.apache.commons.csv.CSVFormat.recordSeparator : String",
      "org.apache.commons.csv.CSVFormat.header : String[]",
      "org.apache.commons.csv.CSVFormat.headerComments : String[]",
    ],
    contain: [],
    call: ["org.apache.commons.csv.QuoteMode.hashCode()"],
  },
  "org.apache.commons.csv.CSVFormat.isCommentMarkerSet()": {
    reference: ["org.apache.commons.csv.CSVFormat.commentMarker : Character"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.isEscapeCharacterSet()": {
    reference: ["org.apache.commons.csv.CSVFormat.escapeCharacter : Character"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.isNullStringSet()": {
    reference: ["org.apache.commons.csv.CSVFormat.nullString : String"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.isQuoteCharacterSet()": {
    reference: ["org.apache.commons.csv.CSVFormat.quoteCharacter : Character"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.parse(Reader)": {
    reference: [],
    contain: [],
    call: ["org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)"],
  },
  "org.apache.commons.csv.CSVFormat.print(Appendable)": {
    reference: [],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.print(File,Charset)": {
    reference: [],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.print(Object,Appendable,boolean)": {
    reference: [
      "org.apache.commons.csv.CSVFormat.nullString : String",
      "org.apache.commons.csv.QuoteMode.ALL : QuoteMode",
      "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode",
      "org.apache.commons.csv.CSVFormat.quotedNullString : String",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.print(Reader,Appendable,boolean)",
      "org.apache.commons.csv.CSVFormat.getTrim()",
      "org.apache.commons.csv.CSVFormat.trim(CharSequence)",
      "org.apache.commons.csv.CSVFormat.print(Object,CharSequence,Appendable,boolean)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.print(Object,CharSequence,Appendable,boolean)": {
    reference: [],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.getDelimiter()",
      "org.apache.commons.csv.CSVFormat.isQuoteCharacterSet()",
      "org.apache.commons.csv.CSVFormat.printWithQuotes(Object,CharSequence,Appendable,boolean)",
      "org.apache.commons.csv.CSVFormat.isEscapeCharacterSet()",
      "org.apache.commons.csv.CSVFormat.printWithEscapes(CharSequence,Appendable)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.print(Path,Charset)": {
    reference: [],
    contain: [],
    call: ["org.apache.commons.csv.CSVFormat.print(Appendable)"],
  },
  "org.apache.commons.csv.CSVFormat.print(Reader,Appendable,boolean)": {
    reference: [],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.getDelimiter()",
      "org.apache.commons.csv.CSVFormat.isQuoteCharacterSet()",
      "org.apache.commons.csv.CSVFormat.printWithQuotes(Reader,Appendable)",
      "org.apache.commons.csv.CSVFormat.isEscapeCharacterSet()",
      "org.apache.commons.csv.CSVFormat.printWithEscapes(Reader,Appendable)",
      "org.apache.commons.csv.IOUtils.copyLarge(Reader,Writer)",
      "org.apache.commons.csv.IOUtils.copy(Reader,Appendable)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.printer()": {
    reference: [],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.println(Appendable)": {
    reference: ["org.apache.commons.csv.CSVFormat.recordSeparator : String"],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.getTrailingDelimiter()",
      "org.apache.commons.csv.CSVFormat.getDelimiter()",
    ],
  },
  "org.apache.commons.csv.CSVFormat.printRecord(Appendable,Object[])": {
    reference: [],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.print(Object,Appendable,boolean)",
      "org.apache.commons.csv.CSVFormat.println(Appendable)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.printWithEscapes(CharSequence,Appendable)": {
    reference: [],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.getDelimiter()",
      "org.apache.commons.csv.CSVFormat.getEscapeCharacter()",
    ],
  },
  "org.apache.commons.csv.CSVFormat.printWithEscapes(Reader,Appendable)": {
    reference: [],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.getDelimiter()",
      "org.apache.commons.csv.CSVFormat.getEscapeCharacter()",
    ],
  },
  "org.apache.commons.csv.CSVFormat.printWithQuotes(Object,CharSequence,Appendable,boolean)": {
    reference: [
      "org.apache.commons.csv.QuoteMode.MINIMAL : QuoteMode",
      "org.apache.commons.csv.CSVFormat.1.$SwitchMap$org$apache$commons$csv$QuoteMode : int[]",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.getDelimiter()",
      "org.apache.commons.csv.CSVFormat.getQuoteCharacter()",
      "org.apache.commons.csv.CSVFormat.isEscapeCharacterSet()",
      "org.apache.commons.csv.CSVFormat.getEscapeCharacter()",
      "org.apache.commons.csv.CSVFormat.getQuoteMode()",
      "org.apache.commons.csv.QuoteMode.ordinal()",
      "org.apache.commons.csv.CSVFormat.printWithEscapes(CharSequence,Appendable)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.printWithQuotes(Reader,Appendable)": {
    reference: ["org.apache.commons.csv.QuoteMode.NONE : QuoteMode"],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.getQuoteMode()",
      "org.apache.commons.csv.CSVFormat.printWithEscapes(Reader,Appendable)",
      "org.apache.commons.csv.CSVFormat.getQuoteCharacter()",
    ],
  },
  "org.apache.commons.csv.CSVFormat.toString()": {
    reference: [
      "org.apache.commons.csv.CSVFormat.delimiter : char",
      "org.apache.commons.csv.CSVFormat.escapeCharacter : Character",
      "org.apache.commons.csv.CSVFormat.quoteCharacter : Character",
      "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode",
      "org.apache.commons.csv.CSVFormat.commentMarker : Character",
      "org.apache.commons.csv.CSVFormat.nullString : String",
      "org.apache.commons.csv.CSVFormat.recordSeparator : String",
      "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean",
      "org.apache.commons.csv.CSVFormat.headerComments : String[]",
      "org.apache.commons.csv.CSVFormat.header : String[]",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.isEscapeCharacterSet()",
      "org.apache.commons.csv.CSVFormat.isQuoteCharacterSet()",
      "org.apache.commons.csv.CSVFormat.isCommentMarkerSet()",
      "org.apache.commons.csv.CSVFormat.isNullStringSet()",
      "org.apache.commons.csv.CSVFormat.getIgnoreEmptyLines()",
      "org.apache.commons.csv.CSVFormat.getIgnoreSurroundingSpaces()",
      "org.apache.commons.csv.CSVFormat.getIgnoreHeaderCase()",
    ],
  },
  "org.apache.commons.csv.CSVFormat.validate()": {
    reference: [
      "org.apache.commons.csv.CSVFormat.delimiter : char",
      "org.apache.commons.csv.CSVFormat.quoteCharacter : Character",
      "org.apache.commons.csv.CSVFormat.escapeCharacter : Character",
      "org.apache.commons.csv.CSVFormat.commentMarker : Character",
      "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode",
      "org.apache.commons.csv.QuoteMode.NONE : QuoteMode",
      "org.apache.commons.csv.CSVFormat.header : String[]",
      "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean",
    ],
    contain: [],
    call: ["org.apache.commons.csv.CSVFormat.isLineBreak(char)"],
  },
  "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames()": {
    reference: [],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)": {
    reference: [
      "org.apache.commons.csv.CSVFormat.delimiter : char",
      "org.apache.commons.csv.CSVFormat.quoteCharacter : Character",
      "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode",
      "org.apache.commons.csv.CSVFormat.commentMarker : Character",
      "org.apache.commons.csv.CSVFormat.escapeCharacter : Character",
      "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean",
      "org.apache.commons.csv.CSVFormat.recordSeparator : String",
      "org.apache.commons.csv.CSVFormat.nullString : String",
      "org.apache.commons.csv.CSVFormat.headerComments : String[]",
      "org.apache.commons.csv.CSVFormat.header : String[]",
      "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean",
      "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean",
      "org.apache.commons.csv.CSVFormat.trim : boolean",
      "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean",
      "org.apache.commons.csv.CSVFormat.autoFlush : boolean",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames()": {
    reference: [],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)": {
    reference: [
      "org.apache.commons.csv.CSVFormat.delimiter : char",
      "org.apache.commons.csv.CSVFormat.quoteCharacter : Character",
      "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode",
      "org.apache.commons.csv.CSVFormat.commentMarker : Character",
      "org.apache.commons.csv.CSVFormat.escapeCharacter : Character",
      "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean",
      "org.apache.commons.csv.CSVFormat.recordSeparator : String",
      "org.apache.commons.csv.CSVFormat.nullString : String",
      "org.apache.commons.csv.CSVFormat.headerComments : String[]",
      "org.apache.commons.csv.CSVFormat.header : String[]",
      "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean",
      "org.apache.commons.csv.CSVFormat.trim : boolean",
      "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean",
      "org.apache.commons.csv.CSVFormat.autoFlush : boolean",
      "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)": {
    reference: [
      "org.apache.commons.csv.CSVFormat.delimiter : char",
      "org.apache.commons.csv.CSVFormat.quoteCharacter : Character",
      "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode",
      "org.apache.commons.csv.CSVFormat.commentMarker : Character",
      "org.apache.commons.csv.CSVFormat.escapeCharacter : Character",
      "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean",
      "org.apache.commons.csv.CSVFormat.recordSeparator : String",
      "org.apache.commons.csv.CSVFormat.nullString : String",
      "org.apache.commons.csv.CSVFormat.headerComments : String[]",
      "org.apache.commons.csv.CSVFormat.header : String[]",
      "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean",
      "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean",
      "org.apache.commons.csv.CSVFormat.trim : boolean",
      "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean",
      "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.withCommentMarker(char)": {
    reference: [],
    contain: [],
    call: ["org.apache.commons.csv.CSVFormat.withCommentMarker(Character)"],
  },
  "org.apache.commons.csv.CSVFormat.withCommentMarker(Character)": {
    reference: [
      "org.apache.commons.csv.CSVFormat.delimiter : char",
      "org.apache.commons.csv.CSVFormat.quoteCharacter : Character",
      "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode",
      "org.apache.commons.csv.CSVFormat.escapeCharacter : Character",
      "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean",
      "org.apache.commons.csv.CSVFormat.recordSeparator : String",
      "org.apache.commons.csv.CSVFormat.nullString : String",
      "org.apache.commons.csv.CSVFormat.headerComments : String[]",
      "org.apache.commons.csv.CSVFormat.header : String[]",
      "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean",
      "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean",
      "org.apache.commons.csv.CSVFormat.trim : boolean",
      "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean",
      "org.apache.commons.csv.CSVFormat.autoFlush : boolean",
      "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.isLineBreak(Character)",
      "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.withDelimiter(char)": {
    reference: [
      "org.apache.commons.csv.CSVFormat.quoteCharacter : Character",
      "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode",
      "org.apache.commons.csv.CSVFormat.commentMarker : Character",
      "org.apache.commons.csv.CSVFormat.escapeCharacter : Character",
      "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean",
      "org.apache.commons.csv.CSVFormat.recordSeparator : String",
      "org.apache.commons.csv.CSVFormat.nullString : String",
      "org.apache.commons.csv.CSVFormat.headerComments : String[]",
      "org.apache.commons.csv.CSVFormat.header : String[]",
      "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean",
      "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean",
      "org.apache.commons.csv.CSVFormat.trim : boolean",
      "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean",
      "org.apache.commons.csv.CSVFormat.autoFlush : boolean",
      "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.isLineBreak(char)",
      "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.withEscape(char)": {
    reference: [],
    contain: [],
    call: ["org.apache.commons.csv.CSVFormat.withEscape(Character)"],
  },
  "org.apache.commons.csv.CSVFormat.withEscape(Character)": {
    reference: [
      "org.apache.commons.csv.CSVFormat.delimiter : char",
      "org.apache.commons.csv.CSVFormat.quoteCharacter : Character",
      "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode",
      "org.apache.commons.csv.CSVFormat.commentMarker : Character",
      "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean",
      "org.apache.commons.csv.CSVFormat.recordSeparator : String",
      "org.apache.commons.csv.CSVFormat.nullString : String",
      "org.apache.commons.csv.CSVFormat.headerComments : String[]",
      "org.apache.commons.csv.CSVFormat.header : String[]",
      "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean",
      "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean",
      "org.apache.commons.csv.CSVFormat.trim : boolean",
      "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean",
      "org.apache.commons.csv.CSVFormat.autoFlush : boolean",
      "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.isLineBreak(Character)",
      "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.withFirstRecordAsHeader()": {
    reference: [],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.withHeader(String[])",
      "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord()",
    ],
  },
  "org.apache.commons.csv.CSVFormat.withHeader(Class)": {
    reference: [],
    contain: [],
    call: ["org.apache.commons.csv.CSVFormat.withHeader(String[])"],
  },
  "org.apache.commons.csv.CSVFormat.withHeader(ResultSet)": {
    reference: [],
    contain: [],
    call: ["org.apache.commons.csv.CSVFormat.withHeader(ResultSetMetaData)"],
  },
  "org.apache.commons.csv.CSVFormat.withHeader(ResultSetMetaData)": {
    reference: [],
    contain: [],
    call: ["org.apache.commons.csv.CSVFormat.withHeader(String[])"],
  },
  "org.apache.commons.csv.CSVFormat.withHeader(String[])": {
    reference: [
      "org.apache.commons.csv.CSVFormat.delimiter : char",
      "org.apache.commons.csv.CSVFormat.quoteCharacter : Character",
      "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode",
      "org.apache.commons.csv.CSVFormat.commentMarker : Character",
      "org.apache.commons.csv.CSVFormat.escapeCharacter : Character",
      "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean",
      "org.apache.commons.csv.CSVFormat.recordSeparator : String",
      "org.apache.commons.csv.CSVFormat.nullString : String",
      "org.apache.commons.csv.CSVFormat.headerComments : String[]",
      "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean",
      "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean",
      "org.apache.commons.csv.CSVFormat.trim : boolean",
      "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean",
      "org.apache.commons.csv.CSVFormat.autoFlush : boolean",
      "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])": {
    reference: [
      "org.apache.commons.csv.CSVFormat.delimiter : char",
      "org.apache.commons.csv.CSVFormat.quoteCharacter : Character",
      "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode",
      "org.apache.commons.csv.CSVFormat.commentMarker : Character",
      "org.apache.commons.csv.CSVFormat.escapeCharacter : Character",
      "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean",
      "org.apache.commons.csv.CSVFormat.recordSeparator : String",
      "org.apache.commons.csv.CSVFormat.nullString : String",
      "org.apache.commons.csv.CSVFormat.header : String[]",
      "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean",
      "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean",
      "org.apache.commons.csv.CSVFormat.trim : boolean",
      "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean",
      "org.apache.commons.csv.CSVFormat.autoFlush : boolean",
      "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines()": {
    reference: [],
    contain: [],
    call: ["org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)"],
  },
  "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)": {
    reference: [
      "org.apache.commons.csv.CSVFormat.delimiter : char",
      "org.apache.commons.csv.CSVFormat.quoteCharacter : Character",
      "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode",
      "org.apache.commons.csv.CSVFormat.commentMarker : Character",
      "org.apache.commons.csv.CSVFormat.escapeCharacter : Character",
      "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean",
      "org.apache.commons.csv.CSVFormat.recordSeparator : String",
      "org.apache.commons.csv.CSVFormat.nullString : String",
      "org.apache.commons.csv.CSVFormat.headerComments : String[]",
      "org.apache.commons.csv.CSVFormat.header : String[]",
      "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean",
      "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean",
      "org.apache.commons.csv.CSVFormat.trim : boolean",
      "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean",
      "org.apache.commons.csv.CSVFormat.autoFlush : boolean",
      "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase()": {
    reference: [],
    contain: [],
    call: ["org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)"],
  },
  "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)": {
    reference: [
      "org.apache.commons.csv.CSVFormat.delimiter : char",
      "org.apache.commons.csv.CSVFormat.quoteCharacter : Character",
      "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode",
      "org.apache.commons.csv.CSVFormat.commentMarker : Character",
      "org.apache.commons.csv.CSVFormat.escapeCharacter : Character",
      "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean",
      "org.apache.commons.csv.CSVFormat.recordSeparator : String",
      "org.apache.commons.csv.CSVFormat.nullString : String",
      "org.apache.commons.csv.CSVFormat.headerComments : String[]",
      "org.apache.commons.csv.CSVFormat.header : String[]",
      "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean",
      "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean",
      "org.apache.commons.csv.CSVFormat.trim : boolean",
      "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean",
      "org.apache.commons.csv.CSVFormat.autoFlush : boolean",
      "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces()": {
    reference: [],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)": {
    reference: [
      "org.apache.commons.csv.CSVFormat.delimiter : char",
      "org.apache.commons.csv.CSVFormat.quoteCharacter : Character",
      "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode",
      "org.apache.commons.csv.CSVFormat.commentMarker : Character",
      "org.apache.commons.csv.CSVFormat.escapeCharacter : Character",
      "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean",
      "org.apache.commons.csv.CSVFormat.recordSeparator : String",
      "org.apache.commons.csv.CSVFormat.nullString : String",
      "org.apache.commons.csv.CSVFormat.headerComments : String[]",
      "org.apache.commons.csv.CSVFormat.header : String[]",
      "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean",
      "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean",
      "org.apache.commons.csv.CSVFormat.trim : boolean",
      "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean",
      "org.apache.commons.csv.CSVFormat.autoFlush : boolean",
      "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.withNullString(String)": {
    reference: [
      "org.apache.commons.csv.CSVFormat.delimiter : char",
      "org.apache.commons.csv.CSVFormat.quoteCharacter : Character",
      "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode",
      "org.apache.commons.csv.CSVFormat.commentMarker : Character",
      "org.apache.commons.csv.CSVFormat.escapeCharacter : Character",
      "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean",
      "org.apache.commons.csv.CSVFormat.recordSeparator : String",
      "org.apache.commons.csv.CSVFormat.headerComments : String[]",
      "org.apache.commons.csv.CSVFormat.header : String[]",
      "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean",
      "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean",
      "org.apache.commons.csv.CSVFormat.trim : boolean",
      "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean",
      "org.apache.commons.csv.CSVFormat.autoFlush : boolean",
      "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.withQuote(char)": {
    reference: [],
    contain: [],
    call: ["org.apache.commons.csv.CSVFormat.withQuote(Character)"],
  },
  "org.apache.commons.csv.CSVFormat.withQuote(Character)": {
    reference: [
      "org.apache.commons.csv.CSVFormat.delimiter : char",
      "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode",
      "org.apache.commons.csv.CSVFormat.commentMarker : Character",
      "org.apache.commons.csv.CSVFormat.escapeCharacter : Character",
      "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean",
      "org.apache.commons.csv.CSVFormat.recordSeparator : String",
      "org.apache.commons.csv.CSVFormat.nullString : String",
      "org.apache.commons.csv.CSVFormat.headerComments : String[]",
      "org.apache.commons.csv.CSVFormat.header : String[]",
      "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean",
      "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean",
      "org.apache.commons.csv.CSVFormat.trim : boolean",
      "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean",
      "org.apache.commons.csv.CSVFormat.autoFlush : boolean",
      "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.isLineBreak(Character)",
      "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)": {
    reference: [
      "org.apache.commons.csv.CSVFormat.delimiter : char",
      "org.apache.commons.csv.CSVFormat.quoteCharacter : Character",
      "org.apache.commons.csv.CSVFormat.commentMarker : Character",
      "org.apache.commons.csv.CSVFormat.escapeCharacter : Character",
      "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean",
      "org.apache.commons.csv.CSVFormat.recordSeparator : String",
      "org.apache.commons.csv.CSVFormat.nullString : String",
      "org.apache.commons.csv.CSVFormat.headerComments : String[]",
      "org.apache.commons.csv.CSVFormat.header : String[]",
      "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean",
      "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean",
      "org.apache.commons.csv.CSVFormat.trim : boolean",
      "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean",
      "org.apache.commons.csv.CSVFormat.autoFlush : boolean",
      "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.withRecordSeparator(char)": {
    reference: [],
    contain: [],
    call: ["org.apache.commons.csv.CSVFormat.withRecordSeparator(String)"],
  },
  "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)": {
    reference: [
      "org.apache.commons.csv.CSVFormat.delimiter : char",
      "org.apache.commons.csv.CSVFormat.quoteCharacter : Character",
      "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode",
      "org.apache.commons.csv.CSVFormat.commentMarker : Character",
      "org.apache.commons.csv.CSVFormat.escapeCharacter : Character",
      "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean",
      "org.apache.commons.csv.CSVFormat.nullString : String",
      "org.apache.commons.csv.CSVFormat.headerComments : String[]",
      "org.apache.commons.csv.CSVFormat.header : String[]",
      "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean",
      "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean",
      "org.apache.commons.csv.CSVFormat.trim : boolean",
      "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean",
      "org.apache.commons.csv.CSVFormat.autoFlush : boolean",
      "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord()": {
    reference: [],
    contain: [],
    call: ["org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)"],
  },
  "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)": {
    reference: [
      "org.apache.commons.csv.CSVFormat.delimiter : char",
      "org.apache.commons.csv.CSVFormat.quoteCharacter : Character",
      "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode",
      "org.apache.commons.csv.CSVFormat.commentMarker : Character",
      "org.apache.commons.csv.CSVFormat.escapeCharacter : Character",
      "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean",
      "org.apache.commons.csv.CSVFormat.recordSeparator : String",
      "org.apache.commons.csv.CSVFormat.nullString : String",
      "org.apache.commons.csv.CSVFormat.headerComments : String[]",
      "org.apache.commons.csv.CSVFormat.header : String[]",
      "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean",
      "org.apache.commons.csv.CSVFormat.trim : boolean",
      "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean",
      "org.apache.commons.csv.CSVFormat.autoFlush : boolean",
      "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.withSystemRecordSeparator()": {
    reference: [],
    contain: [],
    call: ["org.apache.commons.csv.CSVFormat.withRecordSeparator(String)"],
  },
  "org.apache.commons.csv.CSVFormat.withTrailingDelimiter()": {
    reference: [],
    contain: [],
    call: ["org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)"],
  },
  "org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)": {
    reference: [
      "org.apache.commons.csv.CSVFormat.delimiter : char",
      "org.apache.commons.csv.CSVFormat.quoteCharacter : Character",
      "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode",
      "org.apache.commons.csv.CSVFormat.commentMarker : Character",
      "org.apache.commons.csv.CSVFormat.escapeCharacter : Character",
      "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean",
      "org.apache.commons.csv.CSVFormat.recordSeparator : String",
      "org.apache.commons.csv.CSVFormat.nullString : String",
      "org.apache.commons.csv.CSVFormat.headerComments : String[]",
      "org.apache.commons.csv.CSVFormat.header : String[]",
      "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean",
      "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean",
      "org.apache.commons.csv.CSVFormat.trim : boolean",
      "org.apache.commons.csv.CSVFormat.autoFlush : boolean",
      "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.withTrim()": {
    reference: [],
    contain: [],
    call: ["org.apache.commons.csv.CSVFormat.withTrim(boolean)"],
  },
  "org.apache.commons.csv.CSVFormat.withTrim(boolean)": {
    reference: [
      "org.apache.commons.csv.CSVFormat.delimiter : char",
      "org.apache.commons.csv.CSVFormat.quoteCharacter : Character",
      "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode",
      "org.apache.commons.csv.CSVFormat.commentMarker : Character",
      "org.apache.commons.csv.CSVFormat.escapeCharacter : Character",
      "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean",
      "org.apache.commons.csv.CSVFormat.recordSeparator : String",
      "org.apache.commons.csv.CSVFormat.nullString : String",
      "org.apache.commons.csv.CSVFormat.headerComments : String[]",
      "org.apache.commons.csv.CSVFormat.header : String[]",
      "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean",
      "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean",
      "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean",
      "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean",
      "org.apache.commons.csv.CSVFormat.autoFlush : boolean",
      "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)",
    ],
  },
  "org.apache.commons.csv.CSVFormat.static {...}": {
    reference: [
      "org.apache.commons.csv.Constants.DOUBLE_QUOTE_CHAR : Character",
      "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat",
      "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat",
      "org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD : CSVFormat",
      "org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV : CSVFormat",
      "org.apache.commons.csv.QuoteMode.MINIMAL : QuoteMode",
      "org.apache.commons.csv.CSVFormat.MONGODB_CSV : CSVFormat",
      "org.apache.commons.csv.CSVFormat.MONGODB_TSV : CSVFormat",
      "org.apache.commons.csv.QuoteMode.ALL_NON_NULL : QuoteMode",
      "org.apache.commons.csv.CSVFormat.MYSQL : CSVFormat",
      "org.apache.commons.csv.CSVFormat.ORACLE : CSVFormat",
      "org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV : CSVFormat",
      "org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT : CSVFormat",
      "org.apache.commons.csv.CSVFormat.RFC4180 : CSVFormat",
      "org.apache.commons.csv.CSVFormat.TDF : CSVFormat",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)",
      "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)",
      "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames()",
      "org.apache.commons.csv.CSVFormat.withDelimiter(char)",
      "org.apache.commons.csv.CSVFormat.withEscape(char)",
      "org.apache.commons.csv.CSVFormat.withQuote(Character)",
      "org.apache.commons.csv.CSVFormat.withRecordSeparator(char)",
      "org.apache.commons.csv.CSVFormat.withEscape(Character)",
      "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)",
      "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)",
      "org.apache.commons.csv.CSVFormat.withNullString(String)",
      "org.apache.commons.csv.CSVFormat.withTrim()",
      "org.apache.commons.csv.CSVFormat.withSystemRecordSeparator()",
      "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces()",
    ],
  },
  "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat": {
    reference: ["org.apache.commons.csv.CSVFormat"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat": {
    reference: ["org.apache.commons.csv.CSVFormat"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD : CSVFormat": {
    reference: ["org.apache.commons.csv.CSVFormat"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV : CSVFormat": {
    reference: ["org.apache.commons.csv.CSVFormat"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.MONGODB_CSV : CSVFormat": {
    reference: ["org.apache.commons.csv.CSVFormat"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.MONGODB_TSV : CSVFormat": {
    reference: ["org.apache.commons.csv.CSVFormat"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.MYSQL : CSVFormat": {
    reference: ["org.apache.commons.csv.CSVFormat"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.ORACLE : CSVFormat": {
    reference: ["org.apache.commons.csv.CSVFormat"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV : CSVFormat": {
    reference: ["org.apache.commons.csv.CSVFormat"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT : CSVFormat": {
    reference: ["org.apache.commons.csv.CSVFormat"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.RFC4180 : CSVFormat": {
    reference: ["org.apache.commons.csv.CSVFormat"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.TDF : CSVFormat": {
    reference: ["org.apache.commons.csv.CSVFormat"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode": {
    reference: ["org.apache.commons.csv.QuoteMode"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.Lexer": {
    reference: [
      "org.apache.commons.csv.Constants",
      "org.apache.commons.csv.CSVFormat",
      "org.apache.commons.csv.ExtendedBufferedReader",
      "org.apache.commons.csv.Token.Type",
      "org.apache.commons.csv.Token",
    ],
    contain: [
      "org.apache.commons.csv.Lexer.getFirstEol()",
      "org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)",
      "org.apache.commons.csv.Lexer.nextToken(Token)",
      "org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)",
      "org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)",
      "org.apache.commons.csv.Lexer.mapNullToDisabled(Character)",
      "org.apache.commons.csv.Lexer.getCurrentLineNumber()",
      "org.apache.commons.csv.Lexer.getCharacterPosition()",
      "org.apache.commons.csv.Lexer.readEscape()",
      "org.apache.commons.csv.Lexer.trimTrailingSpaces(StringBuilder)",
      "org.apache.commons.csv.Lexer.readEndOfLine(int)",
      "org.apache.commons.csv.Lexer.isClosed()",
      "org.apache.commons.csv.Lexer.isWhitespace(int)",
      "org.apache.commons.csv.Lexer.isStartOfLine(int)",
      "org.apache.commons.csv.Lexer.isEndOfFile(int)",
      "org.apache.commons.csv.Lexer.isDelimiter(int)",
      "org.apache.commons.csv.Lexer.isEscape(int)",
      "org.apache.commons.csv.Lexer.isQuoteChar(int)",
      "org.apache.commons.csv.Lexer.isCommentStart(int)",
      "org.apache.commons.csv.Lexer.isMetaChar(int)",
      "org.apache.commons.csv.Lexer.close()",
      "org.apache.commons.csv.Lexer.static {...}",
      "org.apache.commons.csv.Lexer.CR_STRING : String",
      "org.apache.commons.csv.Lexer.LF_STRING : String",
      "org.apache.commons.csv.Lexer.DISABLED : char",
      "org.apache.commons.csv.Lexer.delimiter : char",
      "org.apache.commons.csv.Lexer.escape : char",
      "org.apache.commons.csv.Lexer.quoteChar : char",
      "org.apache.commons.csv.Lexer.commentStart : char",
      "org.apache.commons.csv.Lexer.ignoreSurroundingSpaces : boolean",
      "org.apache.commons.csv.Lexer.ignoreEmptyLines : boolean",
      "org.apache.commons.csv.Lexer.reader : ExtendedBufferedReader",
      "org.apache.commons.csv.Lexer.firstEol : String",
    ],
    call: [],
  },
  "org.apache.commons.csv.Lexer.getFirstEol()": {
    reference: ["org.apache.commons.csv.Lexer.firstEol : String"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)": {
    reference: [
      "org.apache.commons.csv.Lexer.reader : ExtendedBufferedReader",
      "org.apache.commons.csv.Lexer.delimiter : char",
      "org.apache.commons.csv.Lexer.escape : char",
      "org.apache.commons.csv.Lexer.quoteChar : char",
      "org.apache.commons.csv.Lexer.commentStart : char",
      "org.apache.commons.csv.Lexer.ignoreSurroundingSpaces : boolean",
      "org.apache.commons.csv.Lexer.ignoreEmptyLines : boolean",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.getDelimiter()",
      "org.apache.commons.csv.CSVFormat.getEscapeCharacter()",
      "org.apache.commons.csv.Lexer.mapNullToDisabled(Character)",
      "org.apache.commons.csv.CSVFormat.getQuoteCharacter()",
      "org.apache.commons.csv.CSVFormat.getCommentMarker()",
      "org.apache.commons.csv.CSVFormat.getIgnoreSurroundingSpaces()",
      "org.apache.commons.csv.CSVFormat.getIgnoreEmptyLines()",
    ],
  },
  "org.apache.commons.csv.Lexer.nextToken(Token)": {
    reference: [
      "org.apache.commons.csv.Lexer.reader : ExtendedBufferedReader",
      "org.apache.commons.csv.Lexer.ignoreEmptyLines : boolean",
      "org.apache.commons.csv.Token.Type.EOF : Type",
      "org.apache.commons.csv.Token.type : Type",
      "org.apache.commons.csv.Token.content : StringBuilder",
      "org.apache.commons.csv.Token.Type.COMMENT : Type",
      "org.apache.commons.csv.Token.Type.INVALID : Type",
      "org.apache.commons.csv.Lexer.ignoreSurroundingSpaces : boolean",
      "org.apache.commons.csv.Token.Type.TOKEN : Type",
      "org.apache.commons.csv.Token.Type.EORECORD : Type",
      "org.apache.commons.csv.Token.isReady : boolean",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.ExtendedBufferedReader.getLastChar()",
      "org.apache.commons.csv.ExtendedBufferedReader.read()",
      "org.apache.commons.csv.Lexer.readEndOfLine(int)",
      "org.apache.commons.csv.Lexer.isStartOfLine(int)",
      "org.apache.commons.csv.Lexer.isEndOfFile(int)",
      "org.apache.commons.csv.Lexer.isDelimiter(int)",
      "org.apache.commons.csv.Lexer.isCommentStart(int)",
      "org.apache.commons.csv.ExtendedBufferedReader.readLine()",
      "org.apache.commons.csv.Lexer.isWhitespace(int)",
      "org.apache.commons.csv.Lexer.isQuoteChar(int)",
      "org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)",
      "org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)",
    ],
  },
  "org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)": {
    reference: [
      "org.apache.commons.csv.Token.Type.EORECORD : Type",
      "org.apache.commons.csv.Token.type : Type",
      "org.apache.commons.csv.Token.Type.EOF : Type",
      "org.apache.commons.csv.Token.isReady : boolean",
      "org.apache.commons.csv.Token.Type.TOKEN : Type",
      "org.apache.commons.csv.Token.content : StringBuilder",
      "org.apache.commons.csv.Lexer.reader : ExtendedBufferedReader",
      "org.apache.commons.csv.Lexer.ignoreSurroundingSpaces : boolean",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.Lexer.readEndOfLine(int)",
      "org.apache.commons.csv.Lexer.isEndOfFile(int)",
      "org.apache.commons.csv.Lexer.isDelimiter(int)",
      "org.apache.commons.csv.Lexer.isEscape(int)",
      "org.apache.commons.csv.Lexer.readEscape()",
      "org.apache.commons.csv.ExtendedBufferedReader.getLastChar()",
      "org.apache.commons.csv.ExtendedBufferedReader.read()",
      "org.apache.commons.csv.Lexer.trimTrailingSpaces(StringBuilder)",
    ],
  },
  "org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)": {
    reference: [
      "org.apache.commons.csv.Lexer.reader : ExtendedBufferedReader",
      "org.apache.commons.csv.Token.content : StringBuilder",
      "org.apache.commons.csv.Token.Type.TOKEN : Type",
      "org.apache.commons.csv.Token.type : Type",
      "org.apache.commons.csv.Token.Type.EOF : Type",
      "org.apache.commons.csv.Token.isReady : boolean",
      "org.apache.commons.csv.Token.Type.EORECORD : Type",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.Lexer.getCurrentLineNumber()",
      "org.apache.commons.csv.ExtendedBufferedReader.read()",
      "org.apache.commons.csv.Lexer.isEscape(int)",
      "org.apache.commons.csv.Lexer.readEscape()",
      "org.apache.commons.csv.ExtendedBufferedReader.getLastChar()",
      "org.apache.commons.csv.Lexer.isQuoteChar(int)",
      "org.apache.commons.csv.ExtendedBufferedReader.lookAhead()",
      "org.apache.commons.csv.Lexer.isDelimiter(int)",
      "org.apache.commons.csv.Lexer.isEndOfFile(int)",
      "org.apache.commons.csv.Lexer.readEndOfLine(int)",
      "org.apache.commons.csv.Lexer.isWhitespace(int)",
    ],
  },
  "org.apache.commons.csv.Lexer.getCurrentLineNumber()": {
    reference: ["org.apache.commons.csv.Lexer.reader : ExtendedBufferedReader"],
    contain: [],
    call: [
      "org.apache.commons.csv.ExtendedBufferedReader.getCurrentLineNumber()",
    ],
  },
  "org.apache.commons.csv.Lexer.getCharacterPosition()": {
    reference: ["org.apache.commons.csv.Lexer.reader : ExtendedBufferedReader"],
    contain: [],
    call: ["org.apache.commons.csv.ExtendedBufferedReader.getPosition()"],
  },
  "org.apache.commons.csv.Lexer.readEscape()": {
    reference: ["org.apache.commons.csv.Lexer.reader : ExtendedBufferedReader"],
    contain: [],
    call: [
      "org.apache.commons.csv.ExtendedBufferedReader.read()",
      "org.apache.commons.csv.Lexer.isMetaChar(int)",
    ],
  },
  "org.apache.commons.csv.Lexer.readEndOfLine(int)": {
    reference: [
      "org.apache.commons.csv.Lexer.reader : ExtendedBufferedReader",
      "org.apache.commons.csv.Lexer.firstEol : String",
      "org.apache.commons.csv.Lexer.LF_STRING : String",
      "org.apache.commons.csv.Lexer.CR_STRING : String",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.ExtendedBufferedReader.lookAhead()",
      "org.apache.commons.csv.ExtendedBufferedReader.read()",
    ],
  },
  "org.apache.commons.csv.Lexer.isClosed()": {
    reference: ["org.apache.commons.csv.Lexer.reader : ExtendedBufferedReader"],
    contain: [],
    call: ["org.apache.commons.csv.ExtendedBufferedReader.isClosed()"],
  },
  "org.apache.commons.csv.Lexer.isWhitespace(int)": {
    reference: [],
    contain: [],
    call: ["org.apache.commons.csv.Lexer.isDelimiter(int)"],
  },
  "org.apache.commons.csv.Lexer.isDelimiter(int)": {
    reference: ["org.apache.commons.csv.Lexer.delimiter : char"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.Lexer.isEscape(int)": {
    reference: ["org.apache.commons.csv.Lexer.escape : char"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.Lexer.isQuoteChar(int)": {
    reference: ["org.apache.commons.csv.Lexer.quoteChar : char"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.Lexer.isCommentStart(int)": {
    reference: ["org.apache.commons.csv.Lexer.commentStart : char"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.Lexer.isMetaChar(int)": {
    reference: [
      "org.apache.commons.csv.Lexer.delimiter : char",
      "org.apache.commons.csv.Lexer.escape : char",
      "org.apache.commons.csv.Lexer.quoteChar : char",
      "org.apache.commons.csv.Lexer.commentStart : char",
    ],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.Lexer.close()": {
    reference: ["org.apache.commons.csv.Lexer.reader : ExtendedBufferedReader"],
    contain: [],
    call: ["org.apache.commons.csv.ExtendedBufferedReader.close()"],
  },
  "org.apache.commons.csv.Lexer.static {...}": {
    reference: [
      "org.apache.commons.csv.Lexer.CR_STRING : String",
      "org.apache.commons.csv.Lexer.LF_STRING : String",
    ],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.Lexer.reader : ExtendedBufferedReader": {
    reference: ["org.apache.commons.csv.ExtendedBufferedReader"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVParser": {
    reference: [
      "org.apache.commons.csv.Assertions",
      "org.apache.commons.csv.Token",
      "org.apache.commons.csv.Lexer",
      "org.apache.commons.csv.ExtendedBufferedReader",
      "org.apache.commons.csv.CSVParser.CSVRecordIterator",
      "org.apache.commons.csv.CSVParser.Headers",
      "org.apache.commons.csv.CSVFormat",
      "org.apache.commons.csv.CSVRecord",
      "org.apache.commons.csv.Token.Type",
      "org.apache.commons.csv.Constants",
    ],
    contain: [
      "org.apache.commons.csv.CSVParser.parse(File,Charset,CSVFormat)",
      "org.apache.commons.csv.CSVParser.parse(InputStream,Charset,CSVFormat)",
      "org.apache.commons.csv.CSVParser.parse(Path,Charset,CSVFormat)",
      "org.apache.commons.csv.CSVParser.parse(Reader,CSVFormat)",
      "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)",
      "org.apache.commons.csv.CSVParser.parse(URL,Charset,CSVFormat)",
      "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)",
      "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)",
      "org.apache.commons.csv.CSVParser.addRecordValue(boolean)",
      "org.apache.commons.csv.CSVParser.close()",
      "org.apache.commons.csv.CSVParser.createEmptyHeaderMap()",
      "org.apache.commons.csv.CSVParser.createHeaders()",
      "org.apache.commons.csv.CSVParser.getCurrentLineNumber()",
      "org.apache.commons.csv.CSVParser.getFirstEndOfLine()",
      "org.apache.commons.csv.CSVParser.getHeaderMap()",
      "org.apache.commons.csv.CSVParser.getHeaderMapRaw()",
      "org.apache.commons.csv.CSVParser.getHeaderNames()",
      "org.apache.commons.csv.CSVParser.getRecordNumber()",
      "org.apache.commons.csv.CSVParser.getRecords()",
      "org.apache.commons.csv.CSVParser.isClosed()",
      "org.apache.commons.csv.CSVParser.iterator()",
      "org.apache.commons.csv.CSVParser.nextRecord()",
      "org.apache.commons.csv.CSVParser.format : CSVFormat",
      "org.apache.commons.csv.CSVParser.headerMap : Map",
      "org.apache.commons.csv.CSVParser.headerNames : List",
      "org.apache.commons.csv.CSVParser.lexer : Lexer",
      "org.apache.commons.csv.CSVParser.csvRecordIterator : CSVRecordIterator",
      "org.apache.commons.csv.CSVParser.recordList : List",
      "org.apache.commons.csv.CSVParser.recordNumber : long",
      "org.apache.commons.csv.CSVParser.characterOffset : long",
      "org.apache.commons.csv.CSVParser.reusableToken : Token",
    ],
    call: [],
  },
  "org.apache.commons.csv.CSVParser.parse(File,Charset,CSVFormat)": {
    reference: [],
    contain: [],
    call: [
      "org.apache.commons.csv.Assertions.notNull(Object,String)",
      "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)",
    ],
  },
  "org.apache.commons.csv.CSVParser.parse(InputStream,Charset,CSVFormat)": {
    reference: [],
    contain: [],
    call: [
      "org.apache.commons.csv.Assertions.notNull(Object,String)",
      "org.apache.commons.csv.CSVParser.parse(Reader,CSVFormat)",
    ],
  },
  "org.apache.commons.csv.CSVParser.parse(Path,Charset,CSVFormat)": {
    reference: [],
    contain: [],
    call: [
      "org.apache.commons.csv.Assertions.notNull(Object,String)",
      "org.apache.commons.csv.CSVParser.parse(InputStream,Charset,CSVFormat)",
    ],
  },
  "org.apache.commons.csv.CSVParser.parse(Reader,CSVFormat)": {
    reference: [],
    contain: [],
    call: ["org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)"],
  },
  "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)": {
    reference: [],
    contain: [],
    call: [
      "org.apache.commons.csv.Assertions.notNull(Object,String)",
      "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)",
    ],
  },
  "org.apache.commons.csv.CSVParser.parse(URL,Charset,CSVFormat)": {
    reference: [],
    contain: [],
    call: [
      "org.apache.commons.csv.Assertions.notNull(Object,String)",
      "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)",
    ],
  },
  "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)": {
    reference: [],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)",
    ],
  },
  "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)": {
    reference: [
      "org.apache.commons.csv.CSVParser.recordList : List",
      "org.apache.commons.csv.CSVParser.reusableToken : Token",
      "org.apache.commons.csv.CSVParser.format : CSVFormat",
      "org.apache.commons.csv.CSVParser.lexer : Lexer",
      "org.apache.commons.csv.CSVParser.csvRecordIterator : CSVRecordIterator",
      "org.apache.commons.csv.CSVParser.Headers.headerMap : Map",
      "org.apache.commons.csv.CSVParser.headerMap : Map",
      "org.apache.commons.csv.CSVParser.Headers.headerNames : List",
      "org.apache.commons.csv.CSVParser.headerNames : List",
      "org.apache.commons.csv.CSVParser.characterOffset : long",
      "org.apache.commons.csv.CSVParser.recordNumber : long",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.Token.Token()",
      "org.apache.commons.csv.Assertions.notNull(Object,String)",
      "org.apache.commons.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader)",
      "org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)",
      "org.apache.commons.csv.CSVParser.CSVRecordIterator.CSVRecordIterator()",
      "org.apache.commons.csv.CSVParser.createHeaders()",
    ],
  },
  "org.apache.commons.csv.CSVParser.addRecordValue(boolean)": {
    reference: [
      "org.apache.commons.csv.CSVParser.reusableToken : Token",
      "org.apache.commons.csv.Token.content : StringBuilder",
      "org.apache.commons.csv.CSVParser.format : CSVFormat",
      "org.apache.commons.csv.CSVParser.recordList : List",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.getTrim()",
      "org.apache.commons.csv.CSVFormat.getTrailingDelimiter()",
      "org.apache.commons.csv.CSVFormat.getNullString()",
    ],
  },
  "org.apache.commons.csv.CSVParser.close()": {
    reference: ["org.apache.commons.csv.CSVParser.lexer : Lexer"],
    contain: [],
    call: ["org.apache.commons.csv.Lexer.close()"],
  },
  "org.apache.commons.csv.CSVParser.createEmptyHeaderMap()": {
    reference: ["org.apache.commons.csv.CSVParser.format : CSVFormat"],
    contain: [],
    call: ["org.apache.commons.csv.CSVFormat.getIgnoreHeaderCase()"],
  },
  "org.apache.commons.csv.CSVParser.createHeaders()": {
    reference: ["org.apache.commons.csv.CSVParser.format : CSVFormat"],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.getHeader()",
      "org.apache.commons.csv.CSVParser.createEmptyHeaderMap()",
      "org.apache.commons.csv.CSVParser.nextRecord()",
      "org.apache.commons.csv.CSVRecord.values()",
      "org.apache.commons.csv.CSVFormat.getSkipHeaderRecord()",
      "org.apache.commons.csv.CSVFormat.getAllowMissingColumnNames()",
      "org.apache.commons.csv.CSVFormat.getAllowDuplicateHeaderNames()",
      "org.apache.commons.csv.CSVParser.Headers.Headers(Map,List)",
    ],
  },
  "org.apache.commons.csv.CSVParser.getCurrentLineNumber()": {
    reference: ["org.apache.commons.csv.CSVParser.lexer : Lexer"],
    contain: [],
    call: ["org.apache.commons.csv.Lexer.getCurrentLineNumber()"],
  },
  "org.apache.commons.csv.CSVParser.getFirstEndOfLine()": {
    reference: ["org.apache.commons.csv.CSVParser.lexer : Lexer"],
    contain: [],
    call: ["org.apache.commons.csv.Lexer.getFirstEol()"],
  },
  "org.apache.commons.csv.CSVParser.getHeaderMap()": {
    reference: ["org.apache.commons.csv.CSVParser.headerMap : Map"],
    contain: [],
    call: ["org.apache.commons.csv.CSVParser.createEmptyHeaderMap()"],
  },
  "org.apache.commons.csv.CSVParser.getHeaderMapRaw()": {
    reference: ["org.apache.commons.csv.CSVParser.headerMap : Map"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVParser.getHeaderNames()": {
    reference: ["org.apache.commons.csv.CSVParser.headerNames : List"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVParser.getRecordNumber()": {
    reference: ["org.apache.commons.csv.CSVParser.recordNumber : long"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVParser.getRecords()": {
    reference: [],
    contain: [],
    call: ["org.apache.commons.csv.CSVParser.nextRecord()"],
  },
  "org.apache.commons.csv.CSVParser.isClosed()": {
    reference: ["org.apache.commons.csv.CSVParser.lexer : Lexer"],
    contain: [],
    call: ["org.apache.commons.csv.Lexer.isClosed()"],
  },
  "org.apache.commons.csv.CSVParser.iterator()": {
    reference: [
      "org.apache.commons.csv.CSVParser.csvRecordIterator : CSVRecordIterator",
    ],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVParser.nextRecord()": {
    reference: [
      "org.apache.commons.csv.CSVParser.recordList : List",
      "org.apache.commons.csv.CSVParser.lexer : Lexer",
      "org.apache.commons.csv.CSVParser.characterOffset : long",
      "org.apache.commons.csv.CSVParser.reusableToken : Token",
      "org.apache.commons.csv.CSVParser.1.$SwitchMap$org$apache$commons$csv$Token$Type : int[]",
      "org.apache.commons.csv.Token.type : Type",
      "org.apache.commons.csv.Token.isReady : boolean",
      "org.apache.commons.csv.Token.content : StringBuilder",
      "org.apache.commons.csv.Token.Type.TOKEN : Type",
      "org.apache.commons.csv.CSVParser.recordNumber : long",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.Lexer.getCharacterPosition()",
      "org.apache.commons.csv.Token.reset()",
      "org.apache.commons.csv.Lexer.nextToken(Token)",
      "org.apache.commons.csv.Token.Type.ordinal()",
      "org.apache.commons.csv.CSVParser.addRecordValue(boolean)",
      "org.apache.commons.csv.CSVParser.getCurrentLineNumber()",
      "org.apache.commons.csv.CSVRecord.CSVRecord(CSVParser,String[],String,long,long)",
    ],
  },
  "org.apache.commons.csv.CSVParser.format : CSVFormat": {
    reference: ["org.apache.commons.csv.CSVFormat"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVParser.lexer : Lexer": {
    reference: ["org.apache.commons.csv.Lexer"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVParser.csvRecordIterator : CSVRecordIterator": {
    reference: ["org.apache.commons.csv.CSVParser.CSVRecordIterator"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVParser.reusableToken : Token": {
    reference: ["org.apache.commons.csv.Token"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.ExtendedBufferedReader": {
    reference: ["org.apache.commons.csv.Constants", "char[]"],
    contain: [
      "org.apache.commons.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader)",
      "org.apache.commons.csv.ExtendedBufferedReader.read()",
      "org.apache.commons.csv.ExtendedBufferedReader.getLastChar()",
      "org.apache.commons.csv.ExtendedBufferedReader.read(char[],int,int)",
      "org.apache.commons.csv.ExtendedBufferedReader.readLine()",
      "org.apache.commons.csv.ExtendedBufferedReader.lookAhead()",
      "org.apache.commons.csv.ExtendedBufferedReader.getCurrentLineNumber()",
      "org.apache.commons.csv.ExtendedBufferedReader.getPosition()",
      "org.apache.commons.csv.ExtendedBufferedReader.isClosed()",
      "org.apache.commons.csv.ExtendedBufferedReader.close()",
      "org.apache.commons.csv.ExtendedBufferedReader.lastChar : int",
      "org.apache.commons.csv.ExtendedBufferedReader.eolCounter : long",
      "org.apache.commons.csv.ExtendedBufferedReader.position : long",
      "org.apache.commons.csv.ExtendedBufferedReader.closed : boolean",
    ],
    call: [],
  },
  "org.apache.commons.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader)": {
    reference: ["org.apache.commons.csv.ExtendedBufferedReader.lastChar : int"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.ExtendedBufferedReader.read()": {
    reference: [
      "org.apache.commons.csv.ExtendedBufferedReader.lastChar : int",
      "org.apache.commons.csv.ExtendedBufferedReader.eolCounter : long",
      "org.apache.commons.csv.ExtendedBufferedReader.position : long",
    ],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.ExtendedBufferedReader.getLastChar()": {
    reference: ["org.apache.commons.csv.ExtendedBufferedReader.lastChar : int"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.ExtendedBufferedReader.read(char[],int,int)": {
    reference: [
      "org.apache.commons.csv.ExtendedBufferedReader.lastChar : int",
      "org.apache.commons.csv.ExtendedBufferedReader.eolCounter : long",
      "org.apache.commons.csv.ExtendedBufferedReader.position : long",
    ],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.ExtendedBufferedReader.readLine()": {
    reference: [
      "org.apache.commons.csv.ExtendedBufferedReader.lastChar : int",
      "org.apache.commons.csv.ExtendedBufferedReader.eolCounter : long",
    ],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.ExtendedBufferedReader.getCurrentLineNumber()": {
    reference: [
      "org.apache.commons.csv.ExtendedBufferedReader.lastChar : int",
      "org.apache.commons.csv.ExtendedBufferedReader.eolCounter : long",
    ],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.ExtendedBufferedReader.getPosition()": {
    reference: [
      "org.apache.commons.csv.ExtendedBufferedReader.position : long",
    ],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.ExtendedBufferedReader.isClosed()": {
    reference: [
      "org.apache.commons.csv.ExtendedBufferedReader.closed : boolean",
    ],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.ExtendedBufferedReader.close()": {
    reference: [
      "org.apache.commons.csv.ExtendedBufferedReader.closed : boolean",
      "org.apache.commons.csv.ExtendedBufferedReader.lastChar : int",
    ],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVPrinter": {
    reference: [
      "org.apache.commons.csv.Constants",
      "org.apache.commons.csv.Assertions",
      "org.apache.commons.csv.CSVFormat",
    ],
    contain: [
      "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)",
      "org.apache.commons.csv.CSVPrinter.close()",
      "org.apache.commons.csv.CSVPrinter.close(boolean)",
      "org.apache.commons.csv.CSVPrinter.flush()",
      "org.apache.commons.csv.CSVPrinter.getOut()",
      "org.apache.commons.csv.CSVPrinter.print(Object)",
      "org.apache.commons.csv.CSVPrinter.printComment(String)",
      "org.apache.commons.csv.CSVPrinter.println()",
      "org.apache.commons.csv.CSVPrinter.printRecord(Iterable)",
      "org.apache.commons.csv.CSVPrinter.printRecord(Object[])",
      "org.apache.commons.csv.CSVPrinter.printRecords(Iterable)",
      "org.apache.commons.csv.CSVPrinter.printRecords(Object[])",
      "org.apache.commons.csv.CSVPrinter.printRecords(ResultSet)",
      "org.apache.commons.csv.CSVPrinter.out : Appendable",
      "org.apache.commons.csv.CSVPrinter.format : CSVFormat",
      "org.apache.commons.csv.CSVPrinter.newRecord : boolean",
    ],
    call: [],
  },
  "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)": {
    reference: [
      "org.apache.commons.csv.CSVPrinter.newRecord : boolean",
      "org.apache.commons.csv.CSVPrinter.out : Appendable",
      "org.apache.commons.csv.CSVPrinter.format : CSVFormat",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.Assertions.notNull(Object,String)",
      "org.apache.commons.csv.CSVFormat.getHeaderComments()",
      "org.apache.commons.csv.CSVPrinter.printComment(String)",
      "org.apache.commons.csv.CSVFormat.getHeader()",
      "org.apache.commons.csv.CSVFormat.getSkipHeaderRecord()",
      "org.apache.commons.csv.CSVPrinter.printRecord(Object[])",
    ],
  },
  "org.apache.commons.csv.CSVPrinter.close()": {
    reference: [],
    contain: [],
    call: ["org.apache.commons.csv.CSVPrinter.close(boolean)"],
  },
  "org.apache.commons.csv.CSVPrinter.close(boolean)": {
    reference: [
      "org.apache.commons.csv.CSVPrinter.format : CSVFormat",
      "org.apache.commons.csv.CSVPrinter.out : Appendable",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.getAutoFlush()",
      "org.apache.commons.csv.CSVPrinter.flush()",
    ],
  },
  "org.apache.commons.csv.CSVPrinter.flush()": {
    reference: ["org.apache.commons.csv.CSVPrinter.out : Appendable"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVPrinter.getOut()": {
    reference: ["org.apache.commons.csv.CSVPrinter.out : Appendable"],
    contain: [],
    call: [],
  },
  "org.apache.commons.csv.CSVPrinter.print(Object)": {
    reference: [
      "org.apache.commons.csv.CSVPrinter.format : CSVFormat",
      "org.apache.commons.csv.CSVPrinter.out : Appendable",
      "org.apache.commons.csv.CSVPrinter.newRecord : boolean",
    ],
    contain: [],
    call: ["org.apache.commons.csv.CSVFormat.print(Object,Appendable,boolean)"],
  },
  "org.apache.commons.csv.CSVPrinter.printComment(String)": {
    reference: [
      "org.apache.commons.csv.CSVPrinter.format : CSVFormat",
      "org.apache.commons.csv.CSVPrinter.newRecord : boolean",
      "org.apache.commons.csv.CSVPrinter.out : Appendable",
    ],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVFormat.isCommentMarkerSet()",
      "org.apache.commons.csv.CSVPrinter.println()",
      "org.apache.commons.csv.CSVFormat.getCommentMarker()",
    ],
  },
  "org.apache.commons.csv.CSVPrinter.println()": {
    reference: [
      "org.apache.commons.csv.CSVPrinter.format : CSVFormat",
      "org.apache.commons.csv.CSVPrinter.out : Appendable",
      "org.apache.commons.csv.CSVPrinter.newRecord : boolean",
    ],
    contain: [],
    call: ["org.apache.commons.csv.CSVFormat.println(Appendable)"],
  },
  "org.apache.commons.csv.CSVPrinter.printRecord(Iterable)": {
    reference: [],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVPrinter.print(Object)",
      "org.apache.commons.csv.CSVPrinter.println()",
    ],
  },
  "org.apache.commons.csv.CSVPrinter.printRecord(Object[])": {
    reference: [
      "org.apache.commons.csv.CSVPrinter.format : CSVFormat",
      "org.apache.commons.csv.CSVPrinter.out : Appendable",
      "org.apache.commons.csv.CSVPrinter.newRecord : boolean",
    ],
    contain: [],
    call: ["org.apache.commons.csv.CSVFormat.printRecord(Appendable,Object[])"],
  },
  "org.apache.commons.csv.CSVPrinter.printRecords(Iterable)": {
    reference: [],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVPrinter.printRecord(Object[])",
      "org.apache.commons.csv.CSVPrinter.printRecord(Iterable)",
    ],
  },
  "org.apache.commons.csv.CSVPrinter.printRecords(Object[])": {
    reference: [],
    contain: [],
    call: ["org.apache.commons.csv.CSVPrinter.printRecords(Iterable)"],
  },
  "org.apache.commons.csv.CSVPrinter.printRecords(ResultSet)": {
    reference: [],
    contain: [],
    call: [
      "org.apache.commons.csv.CSVPrinter.print(Object)",
      "org.apache.commons.csv.CSVPrinter.println()",
    ],
  },
  "org.apache.commons.csv.CSVPrinter.format : CSVFormat": {
    reference: ["org.apache.commons.csv.CSVFormat"],
    contain: [],
    call: [],
  },
};
