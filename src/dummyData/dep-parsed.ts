export const deps = {
  "Model.Showtime": {
    reference: [
      "Model.Seat[][]",
      "Model.Seat",
      "Model.Cinema",
      "Model.Constant.Cineplex",
      "Controller.IOController",
      "Model.Movie",
      "Model.Constant",
    ],
    contain: [
      "Model.Showtime.Showtime()",
      "Model.Showtime.setTime(Date)",
      "Model.Showtime.setCinema(Cinema)",
      "Model.Showtime.setMovie(Movie)",
      "Model.Showtime.getMovie()",
      "Model.Showtime.getCinema()",
      "Model.Showtime.getSeats()",
      "Model.Showtime.getSeatAt(int,int)",
      "Model.Showtime.getTime()",
      "Model.Showtime.initializeSeat()",
      "Model.Showtime.getDetails()",
      "Model.Showtime.toString()",
      "Model.Showtime.equals(Object)",
      "Model.Showtime.hashCode()",
      "Model.Showtime.movie : Movie",
      "Model.Showtime.cinema : Cinema",
      "Model.Showtime.time : Date",
      "Model.Showtime.seats : Seat[][]",
      "Model.Showtime.COLS : int",
      "Model.Showtime.ROWS : int",
    ],
    call: [],
  },
  "Model.Showtime.Showtime()": {
    reference: ["Model.Showtime.seats : Seat[][]"],
    contain: [],
    call: ["Model.Showtime.initializeSeat()"],
  },
  "Model.Showtime.setTime(Date)": {
    reference: ["Model.Showtime.time : Date"],
    contain: [],
    call: [],
  },
  "Model.Showtime.setCinema(Cinema)": {
    reference: ["Model.Showtime.cinema : Cinema"],
    contain: [],
    call: [],
  },
  "Model.Showtime.setMovie(Movie)": {
    reference: ["Model.Showtime.movie : Movie"],
    contain: [],
    call: [],
  },
  "Model.Showtime.getMovie()": {
    reference: ["Model.Showtime.movie : Movie"],
    contain: [],
    call: [],
  },
  "Model.Showtime.getCinema()": {
    reference: ["Model.Showtime.cinema : Cinema"],
    contain: [],
    call: [],
  },
  "Model.Showtime.getSeats()": {
    reference: ["Model.Showtime.seats : Seat[][]"],
    contain: [],
    call: [],
  },
  "Model.Showtime.getSeatAt(int,int)": {
    reference: ["Model.Showtime.seats : Seat[][]"],
    contain: [],
    call: [],
  },
  "Model.Showtime.getTime()": {
    reference: ["Model.Showtime.time : Date"],
    contain: [],
    call: [],
  },
  "Model.Showtime.initializeSeat()": {
    reference: ["Model.Showtime.seats : Seat[][]"],
    contain: [],
    call: ["Model.Seat.Seat(int,int,Showtime)"],
  },
  "Model.Showtime.getDetails()": {
    reference: ["Model.Showtime.cinema : Cinema", "Model.Showtime.time : Date"],
    contain: [],
    call: ["Model.Cinema.getCineplex()", "Model.Cinema.toString()"],
  },
  "Model.Showtime.toString()": {
    reference: ["Model.Showtime.cinema : Cinema", "Model.Showtime.time : Date"],
    contain: [],
    call: [
      "Model.Cinema.getCineplex()",
      "Model.Constant.Cineplex.toString()",
      "Controller.IOController.formatTimeMMddkkmm(Date)",
    ],
  },
  "Model.Showtime.equals(Object)": {
    reference: [
      "Model.Showtime.movie : Movie",
      "Model.Showtime.cinema : Cinema",
      "Model.Showtime.time : Date",
    ],
    contain: [],
    call: [
      "Model.Movie.equals(Object)",
      "Model.Cinema.equals(Object)",
      "Controller.IOController.formatTimeMMddkkmm(Date)",
    ],
  },
  "Model.Showtime.hashCode()": {
    reference: [
      "Model.Showtime.movie : Movie",
      "Model.Showtime.cinema : Cinema",
      "Model.Showtime.time : Date",
    ],
    contain: [],
    call: [
      "Model.Movie.hashCode()",
      "Model.Cinema.hashCode()",
      "Controller.IOController.formatTimeMMddkkmm(Date)",
    ],
  },
  "Model.Showtime.movie : Movie": {
    reference: ["Model.Movie"],
    contain: [],
    call: [],
  },
  "Model.Showtime.cinema : Cinema": {
    reference: ["Model.Cinema"],
    contain: [],
    call: [],
  },
  "Model.Showtime.seats : Seat[][]": {
    reference: ["Model.Seat[][]"],
    contain: [],
    call: [],
  },
  "View.moviegoer.Booking": {
    reference: [
      "View.View",
      "Model.Seat",
      "Model.Showtime",
      "Model.Cinema",
      "Controller.IOController",
      "Controller.CineplexManager",
      "Model.Holiday",
      "Model.Movie",
      "Model.Customer",
      "View.moviegoer.Payment",
      "View.moviegoer.MovieListing",
      "Model.Constant.AgeRestriction",
      "Model.Constant",
      "Model.Constant.Cineplex",
    ],
    contain: [
      "View.moviegoer.Booking.Booking(Seat)",
      "View.moviegoer.Booking.start()",
      "View.moviegoer.Booking.displayMenu()",
      "View.moviegoer.Booking.computeBasePrice()",
      "View.moviegoer.Booking.printBookingDetail()",
      "View.moviegoer.Booking.promptCustomerInformation()",
      "View.moviegoer.Booking.destroy()",
      "View.moviegoer.Booking.seat : Seat",
      "View.moviegoer.Booking.ticketType : String",
      "View.moviegoer.Booking.basePrice : double",
      "View.moviegoer.Booking.bookingFinished : boolean",
    ],
    call: [],
  },
  "View.moviegoer.Booking.Booking(Seat)": {
    reference: [
      "View.moviegoer.Booking.seat : Seat",
      "View.moviegoer.Booking.basePrice : double",
      "View.moviegoer.Booking.bookingFinished : boolean",
    ],
    contain: [],
    call: [
      "View.View.View()",
      "Model.Seat.getShowtime()",
      "Model.Showtime.getCinema()",
      "Model.Cinema.getBasePrice()",
      "View.moviegoer.Booking.computeBasePrice()",
    ],
  },
  "View.moviegoer.Booking.start()": {
    reference: ["View.moviegoer.Booking.bookingFinished : boolean"],
    contain: [],
    call: [
      "View.moviegoer.Booking.destroy()",
      "View.moviegoer.Booking.displayMenu()",
    ],
  },
  "View.moviegoer.Booking.displayMenu()": {
    reference: [],
    contain: [],
    call: [
      "Controller.IOController.printHeader(String)",
      "View.moviegoer.Booking.printBookingDetail()",
      "Controller.IOController.printMenu(String[])",
      "Controller.IOController.readChoice(int,int)",
      "View.moviegoer.Booking.promptCustomerInformation()",
      "View.moviegoer.Booking.destroy()",
    ],
  },
  "View.moviegoer.Booking.computeBasePrice()": {
    reference: [
      "View.moviegoer.Booking.seat : Seat",
      "View.moviegoer.Booking.basePrice : double",
      "View.moviegoer.Booking.ticketType : String",
    ],
    contain: [],
    call: [
      "Model.Seat.getShowtime()",
      "Model.Showtime.getTime()",
      "Controller.CineplexManager.getHoliday(Date)",
      "Model.Holiday.getRate()",
      "Model.Holiday.getName()",
      "Controller.IOController.isWeekend(Date)",
    ],
  },
  "View.moviegoer.Booking.printBookingDetail()": {
    reference: [
      "View.moviegoer.Booking.seat : Seat",
      "View.moviegoer.Booking.ticketType : String",
      "View.moviegoer.Booking.basePrice : double",
    ],
    contain: [],
    call: [
      "Model.Seat.getShowtime()",
      "Model.Showtime.getMovie()",
      "Model.Showtime.getCinema()",
      "Model.Movie.getTitle()",
      "Model.Cinema.is3D()",
      "Model.Movie.getAgeRestriction()",
      "Model.Cinema.getCineplex()",
      "Model.Showtime.getTime()",
      "Controller.IOController.formatTimeMMddkkmm(Date)",
      "Model.Seat.getRow()",
      "Model.Seat.getCol()",
      "Controller.IOController.round(double,int)",
    ],
  },
  "View.moviegoer.Booking.promptCustomerInformation()": {
    reference: [
      "View.moviegoer.Booking.bookingFinished : boolean",
      "View.moviegoer.Booking.seat : Seat",
      "View.moviegoer.Booking.basePrice : double",
    ],
    contain: [],
    call: [
      "Controller.IOController.readString(String[])",
      "Controller.IOController.readEmail(String[])",
      "Controller.IOController.askConfirm(String[])",
      "Model.Customer.Customer(String,String,String,boolean)",
      "View.moviegoer.Payment.Payment(Customer,Seat,double)",
      "View.moviegoer.Booking.intent(View,View)",
    ],
  },
  "View.moviegoer.Booking.destroy()": {
    reference: [
      "View.moviegoer.Booking.prevView : View",
      "View.View.prevView : View",
      "View.moviegoer.Booking.seat : Seat",
    ],
    contain: [],
    call: [
      "Controller.CineplexManager.getMovieListing()",
      "Model.Seat.getShowtime()",
      "Model.Showtime.getMovie()",
      "View.moviegoer.MovieListing.start(Movie)",
    ],
  },
  "View.moviegoer.Booking.seat : Seat": {
    reference: ["Model.Seat"],
    contain: [],
    call: [],
  },
  "Controller.IOController": {
    reference: [
      "Model.Constant.AgeRestriction",
      "Model.Constant.MovieStatus",
      "Model.Constant",
    ],
    contain: [
      "Controller.IOController.IOController()",
      "Controller.IOController.readChoice(int,int)",
      "Controller.IOController.readString(String[])",
      "Controller.IOController.readDouble(String[])",
      "Controller.IOController.generateSpaces(int)",
      "Controller.IOController.addLinebreaks(String,int,int)",
      "Controller.IOController.readEmail(String[])",
      "Controller.IOController.readAgeRestriction(String)",
      "Controller.IOController.readMovieStatus(String)",
      "Controller.IOController.readTimeMMddkkmm(String[])",
      "Controller.IOController.readTimeMMdd(String[])",
      "Controller.IOController.askConfirm(String[])",
      "Controller.IOController.printMenu(String[])",
      "Controller.IOController.printHeader(String)",
      "Controller.IOController.formatTimeMMddkkmm(Date)",
      "Controller.IOController.formatTimeMMdd(Date)",
      "Controller.IOController.isWeekend(Date)",
      "Controller.IOController.dateEquals(Date,Date)",
      "Controller.IOController.round(double,int)",
    ],
    call: [],
  },
  "Controller.IOController.readChoice(int,int)": {
    reference: [],
    contain: [],
    call: ["Controller.IOController.readChoice(int,int)"],
  },
  "Controller.IOController.readDouble(String[])": {
    reference: [],
    contain: [],
    call: ["Controller.IOController.readDouble(String[])"],
  },
  "Controller.IOController.readEmail(String[])": {
    reference: [],
    contain: [],
    call: ["Controller.IOController.readEmail(String[])"],
  },
  "Controller.IOController.readAgeRestriction(String)": {
    reference: [
      "Model.Constant.AgeRestriction.G : AgeRestriction",
      "Model.Constant.AgeRestriction.PG : AgeRestriction",
      "Model.Constant.AgeRestriction.PG13 : AgeRestriction",
      "Model.Constant.AgeRestriction.NC16 : AgeRestriction",
      "Model.Constant.AgeRestriction.M18 : AgeRestriction",
      "Model.Constant.AgeRestriction.R21 : AgeRestriction",
    ],
    contain: [],
    call: [],
  },
  "Controller.IOController.readMovieStatus(String)": {
    reference: [
      "Model.Constant.MovieStatus.COMING_SOON : MovieStatus",
      "Model.Constant.MovieStatus.NOW_SHOWING : MovieStatus",
      "Model.Constant.MovieStatus.END_OF_SHOWING : MovieStatus",
    ],
    contain: [],
    call: [],
  },
  "Controller.IOController.readTimeMMddkkmm(String[])": {
    reference: [],
    contain: [],
    call: [
      "Controller.IOController.readString(String[])",
      "Controller.IOController.readTimeMMddkkmm(String[])",
    ],
  },
  "Controller.IOController.readTimeMMdd(String[])": {
    reference: [],
    contain: [],
    call: [
      "Controller.IOController.readString(String[])",
      "Controller.IOController.readTimeMMdd(String[])",
    ],
  },
  "Controller.IOController.dateEquals(Date,Date)": {
    reference: [],
    contain: [],
    call: ["Controller.IOController.formatTimeMMdd(Date)"],
  },
  "View.staff.MovieListing": {
    reference: [
      "View.View",
      "Controller.CineplexManager",
      "Controller.IOController",
      "Model.Movie",
      "Model.Constant.MovieStatus",
      "View.staff.ShowtimeView",
      "Model.Constant.AgeRestriction",
      "Model.Constant",
    ],
    contain: [
      "View.staff.MovieListing.MovieListing()",
      "View.staff.MovieListing.start()",
      "View.staff.MovieListing.displayMenu()",
      "View.staff.MovieListing.addMovieListing()",
      "View.staff.MovieListing.displayMovieDetailMenu(Movie)",
      "View.staff.MovieListing.updateMovieDetailsMenu(Movie)",
      "View.staff.MovieListing.removeListingMenu(Movie)",
    ],
    call: [],
  },
  "View.staff.MovieListing.MovieListing()": {
    reference: [],
    contain: [],
    call: ["View.View.View()"],
  },
  "View.staff.MovieListing.start()": {
    reference: [],
    contain: [],
    call: ["View.staff.MovieListing.displayMenu()"],
  },
  "View.staff.MovieListing.displayMenu()": {
    reference: [],
    contain: [],
    call: [
      "Controller.CineplexManager.getMovieListing()",
      "Controller.IOController.printHeader(String)",
      "Controller.IOController.printMenu(String[])",
      "Controller.IOController.readChoice(int,int)",
      "View.staff.MovieListing.addMovieListing()",
      "View.staff.MovieListing.destroy()",
      "Model.Movie.getTitle()",
      "Controller.IOController.generateSpaces(int)",
      "Model.Movie.getMovieStatus()",
      "Model.Constant.MovieStatus.toString()",
      "View.staff.MovieListing.displayMovieDetailMenu(Movie)",
    ],
  },
  "View.staff.MovieListing.addMovieListing()": {
    reference: [],
    contain: [],
    call: [
      "Controller.IOController.printHeader(String)",
      "Controller.IOController.readString(String[])",
      "Controller.IOController.readAgeRestriction(String)",
      "Controller.IOController.addLinebreaks(String,int,int)",
      "Controller.IOController.readMovieStatus(String)",
      "Model.Movie.Movie()",
      "Model.Movie.setTitle(String)",
      "Model.Movie.setAgeRestriction(Constant.AgeRestriction)",
      "Model.Movie.setDirector(String)",
      "Model.Movie.setSynopsis(String)",
      "Model.Movie.setCast(ArrayList)",
      "Model.Movie.setMovieStatus(Constant.MovieStatus)",
      "Controller.CineplexManager.addNewListing(Movie)",
      "View.staff.MovieListing.displayMenu()",
    ],
  },
  "View.staff.MovieListing.displayMovieDetailMenu(Movie)": {
    reference: [],
    contain: [],
    call: [
      "Controller.IOController.printHeader(String)",
      "Model.Movie.toString()",
      "Controller.IOController.printMenu(String[])",
      "Controller.IOController.readChoice(int,int)",
      "View.staff.MovieListing.updateMovieDetailsMenu(Movie)",
      "View.staff.MovieListing.removeListingMenu(Movie)",
      "View.staff.ShowtimeView.ShowtimeView(Movie)",
      "View.staff.MovieListing.intent(View,View)",
      "View.staff.MovieListing.displayMenu()",
    ],
  },
  "View.staff.MovieListing.updateMovieDetailsMenu(Movie)": {
    reference: [
      "Model.Constant.MovieStatus.NOW_SHOWING : MovieStatus",
      "Model.Constant.MovieStatus.COMING_SOON : MovieStatus",
    ],
    contain: [],
    call: [
      "Controller.IOController.printHeader(String)",
      "Controller.IOController.printMenu(String[])",
      "Controller.IOController.readChoice(int,int)",
      "Controller.IOController.readString(String[])",
      "Model.Movie.setTitle(String)",
      "Controller.IOController.readAgeRestriction(String)",
      "Model.Movie.setAgeRestriction(Constant.AgeRestriction)",
      "Model.Movie.setDirector(String)",
      "Controller.IOController.addLinebreaks(String,int,int)",
      "Model.Movie.setSynopsis(String)",
      "Model.Movie.setCast(ArrayList)",
      "Model.Movie.getMovieStatus()",
      "Model.Constant.MovieStatus.equals(Object)",
      "Controller.IOController.askConfirm(String[])",
      "Model.Movie.setMovieStatus(Constant.MovieStatus)",
      "Controller.CineplexManager.updateMovieListing()",
      "View.staff.MovieListing.displayMovieDetailMenu(Movie)",
    ],
  },
  "View.staff.MovieListing.removeListingMenu(Movie)": {
    reference: [],
    contain: [],
    call: [
      "Controller.IOController.askConfirm(String[])",
      "Controller.CineplexManager.removeListing(Movie)",
      "Controller.CineplexManager.removeAllShowtime(Movie)",
      "View.staff.MovieListing.displayMenu()",
    ],
  },
  "View.staff.CinemaList": {
    reference: [
      "View.View",
      "Controller.IOController",
      "Model.Constant.Cineplex",
      "Controller.CineplexManager",
      "Model.Cinema",
      "View.staff.ShowtimeView",
      "Model.Constant.Cineplex[]",
      "Model.Constant",
    ],
    contain: [
      "View.staff.CinemaList.CinemaList(String)",
      "View.staff.CinemaList.start()",
      "View.staff.CinemaList.displayMenu()",
      "View.staff.CinemaList.displayCinemaListMenu()",
      "View.staff.CinemaList.displayCinemaList(Constant.Cineplex)",
      "View.staff.CinemaList.addCinema()",
      "View.staff.CinemaList.destroy()",
      "View.staff.CinemaList.help : boolean",
    ],
    call: [],
  },
  "View.staff.CinemaList.CinemaList(String)": {
    reference: ["View.staff.CinemaList.help : boolean"],
    contain: [],
    call: ["View.View.View()"],
  },
  "View.staff.CinemaList.start()": {
    reference: ["View.staff.CinemaList.help : boolean"],
    contain: [],
    call: [
      "View.staff.CinemaList.displayCinemaListMenu()",
      "View.staff.CinemaList.displayMenu()",
    ],
  },
  "View.staff.CinemaList.displayMenu()": {
    reference: [],
    contain: [],
    call: [
      "Controller.IOController.printHeader(String)",
      "Controller.IOController.printMenu(String[])",
      "Controller.IOController.readChoice(int,int)",
      "View.staff.CinemaList.displayCinemaListMenu()",
      "View.staff.CinemaList.addCinema()",
      "View.staff.CinemaList.destroy()",
    ],
  },
  "View.staff.CinemaList.displayCinemaListMenu()": {
    reference: [],
    contain: [],
    call: [
      "Model.Constant.Cineplex.values()",
      "Controller.IOController.printMenu(String[])",
      "Controller.IOController.readChoice(int,int)",
      "View.staff.CinemaList.displayCinemaList(Constant.Cineplex)",
    ],
  },
  "View.staff.CinemaList.displayCinemaList(Constant.Cineplex)": {
    reference: ["View.staff.CinemaList.help : boolean"],
    contain: [],
    call: [
      "Model.Constant.Cineplex.toString()",
      "Controller.IOController.printHeader(String)",
      "Controller.CineplexManager.getCinemaList(Constant.Cineplex)",
      "Controller.IOController.printMenu(String[])",
      "Controller.IOController.readString(String[])",
      "Model.Cinema.is3D()",
      "View.staff.CinemaList.destroy()",
      "View.staff.CinemaList.displayMenu()",
    ],
  },
  "View.staff.CinemaList.addCinema()": {
    reference: [],
    contain: [],
    call: [
      "Model.Constant.Cineplex.values()",
      "Controller.IOController.printMenu(String[])",
      "Controller.IOController.readChoice(int,int)",
      "Controller.IOController.askConfirm(String[])",
      "Controller.IOController.readDouble(String[])",
      "Controller.IOController.readString(String[])",
      "Model.Cinema.Cinema(Constant.Cineplex,boolean,boolean,String,double)",
      "Controller.CineplexManager.addCinema(Cinema)",
      "View.staff.CinemaList.destroy()",
    ],
  },
  "View.staff.CinemaList.destroy()": {
    reference: [],
    contain: [],
    call: [
      "View.staff.CinemaList.getPrevView()",
      "View.staff.ShowtimeView.addShowtime()",
      "View.View.destroy()",
    ],
  },
  "Model.BookingHistory": {
    reference: [
      "Model.Customer",
      "Model.Seat",
      "Model.Showtime",
      "Model.Movie",
    ],
    contain: [
      "Model.BookingHistory.BookingHistory(String,Customer,Seat)",
      "Model.BookingHistory.toString()",
      "Model.BookingHistory.TID : String",
      "Model.BookingHistory.customer : Customer",
      "Model.BookingHistory.seat : Seat",
    ],
    call: [],
  },
  "Model.BookingHistory.BookingHistory(String,Customer,Seat)": {
    reference: [
      "Model.BookingHistory.TID : String",
      "Model.BookingHistory.customer : Customer",
      "Model.BookingHistory.seat : Seat",
    ],
    contain: [],
    call: [],
  },
  "Model.BookingHistory.toString()": {
    reference: [
      "Model.BookingHistory.TID : String",
      "Model.BookingHistory.customer : Customer",
      "Model.BookingHistory.seat : Seat",
    ],
    contain: [],
    call: [
      "Model.Customer.getName()",
      "Model.Customer.getMobile()",
      "Model.Customer.getEmail()",
      "Model.Seat.getShowtime()",
      "Model.Showtime.getMovie()",
      "Model.Movie.getTitle()",
      "Model.Showtime.getDetails()",
      "Model.Seat.getRow()",
      "Model.Seat.getCol()",
    ],
  },
  "Model.BookingHistory.customer : Customer": {
    reference: ["Model.Customer"],
    contain: [],
    call: [],
  },
  "Model.BookingHistory.seat : Seat": {
    reference: ["Model.Seat"],
    contain: [],
    call: [],
  },
  "View.moviegoer.MovieListing": {
    reference: [
      "View.View",
      "Controller.IOController",
      "Controller.CineplexManager",
      "Model.Movie",
      "Model.Constant.MovieStatus",
      "View.moviegoer.ShowtimeView",
      "View.moviegoer.ReviewView",
      "Model.Constant",
    ],
    contain: [
      "View.moviegoer.MovieListing.MovieListing()",
      "View.moviegoer.MovieListing.start()",
      "View.moviegoer.MovieListing.start(Movie)",
      "View.moviegoer.MovieListing.displayMenu()",
      "View.moviegoer.MovieListing.searchMovie()",
      "View.moviegoer.MovieListing.displayMovieListing()",
      "View.moviegoer.MovieListing.displayMovieDetailMenu(Movie)",
      "View.moviegoer.MovieListing.topFive : boolean",
    ],
    call: [],
  },
  "View.moviegoer.MovieListing.MovieListing()": {
    reference: ["View.moviegoer.MovieListing.topFive : boolean"],
    contain: [],
    call: ["View.View.View()"],
  },
  "View.moviegoer.MovieListing.start()": {
    reference: [],
    contain: [],
    call: ["View.moviegoer.MovieListing.displayMenu()"],
  },
  "View.moviegoer.MovieListing.start(Movie)": {
    reference: [],
    contain: [],
    call: ["View.moviegoer.MovieListing.displayMovieDetailMenu(Movie)"],
  },
  "View.moviegoer.MovieListing.displayMenu()": {
    reference: ["View.moviegoer.MovieListing.topFive : boolean"],
    contain: [],
    call: [
      "Controller.IOController.printHeader(String)",
      "Controller.IOController.printMenu(String[])",
      "Controller.IOController.readChoice(int,int)",
      "View.moviegoer.MovieListing.searchMovie()",
      "View.moviegoer.MovieListing.displayMovieListing()",
      "View.moviegoer.MovieListing.destroy()",
    ],
  },
  "View.moviegoer.MovieListing.searchMovie()": {
    reference: [],
    contain: [],
    call: [
      "Controller.IOController.readString(String[])",
      "Controller.CineplexManager.getMovieByTitle(String)",
      "Controller.IOController.printMenu(String[])",
      "View.moviegoer.MovieListing.displayMenu()",
      "Model.Movie.getTitle()",
      "Model.Movie.getMovieStatus()",
      "Model.Constant.MovieStatus.toString()",
      "Controller.IOController.readChoice(int,int)",
      "View.moviegoer.MovieListing.start()",
      "View.moviegoer.MovieListing.displayMovieDetailMenu(Movie)",
    ],
  },
  "View.moviegoer.MovieListing.displayMovieListing()": {
    reference: [
      "View.moviegoer.MovieListing.topFive : boolean",
      "Model.Constant.MovieStatus.END_OF_SHOWING : MovieStatus",
    ],
    contain: [],
    call: [
      "Controller.CineplexManager.getTop5MovieListing()",
      "Controller.CineplexManager.getMovieListing()",
      "Controller.IOController.printHeader(String)",
      "Controller.IOController.printMenu(String[])",
      "View.moviegoer.MovieListing.displayMenu()",
      "Controller.CineplexManager.getSystem()",
      "Model.Movie.getMovieStatus()",
      "Model.Constant.MovieStatus.equals(Object)",
      "Model.Movie.getTitle()",
      "Controller.IOController.generateSpaces(int)",
      "Model.Constant.MovieStatus.toString()",
      "Controller.CineplexManager.getMovieRating(Movie)",
      "Model.Movie.getSales()",
      "Controller.IOController.readChoice(int,int)",
      "View.moviegoer.MovieListing.start()",
      "View.moviegoer.MovieListing.displayMovieDetailMenu(Movie)",
    ],
  },
  "View.moviegoer.MovieListing.displayMovieDetailMenu(Movie)": {
    reference: [],
    contain: [],
    call: [
      "Controller.IOController.printHeader(String)",
      "Model.Movie.toString()",
      "Controller.IOController.printMenu(String[])",
      "Controller.IOController.readChoice(int,int)",
      "View.moviegoer.ShowtimeView.ShowtimeView(Movie)",
      "View.moviegoer.MovieListing.intent(View,View)",
      "View.moviegoer.ReviewView.ReviewView(Movie)",
      "View.moviegoer.MovieListing.displayMovieListing()",
    ],
  },
  "View.View": {
    reference: [],
    contain: [
      "View.View.View()",
      "View.View.start()",
      "View.View.destroy()",
      "View.View.intent(View,View)",
      "View.View.getPrevView()",
      "View.View.prevView : View",
    ],
    call: [],
  },
  "View.View.destroy()": {
    reference: ["View.View.prevView : View"],
    contain: [],
    call: ["View.View.start()"],
  },
  "View.View.intent(View,View)": {
    reference: ["View.View.prevView : View"],
    contain: [],
    call: ["View.View.start()"],
  },
  "View.View.getPrevView()": {
    reference: ["View.View.prevView : View"],
    contain: [],
    call: [],
  },
  "View.View.prevView : View": {
    reference: ["View.View"],
    contain: [],
    call: [],
  },
  "View.staff.ShowtimeView": {
    reference: [
      "View.View",
      "Controller.IOController",
      "Controller.CineplexManager",
      "Model.Showtime",
      "View.staff.CinemaList",
      "Model.Cinema",
      "Model.Constant.Cineplex",
      "Model.Constant",
    ],
    contain: [
      "View.staff.ShowtimeView.ShowtimeView(Movie)",
      "View.staff.ShowtimeView.start()",
      "View.staff.ShowtimeView.displayMenu()",
      "View.staff.ShowtimeView.displayShowtimeDetailMenu(Showtime)",
      "View.staff.ShowtimeView.modifyCinema(Showtime)",
      "View.staff.ShowtimeView.modifyTime(Showtime)",
      "View.staff.ShowtimeView.addShowtime()",
      "View.staff.ShowtimeView.lambda$displayMenu$0(Showtime)",
      "View.staff.ShowtimeView.movie : Movie",
    ],
    call: [],
  },
  "View.staff.ShowtimeView.ShowtimeView(Movie)": {
    reference: ["View.staff.ShowtimeView.movie : Movie"],
    contain: [],
    call: ["View.View.View()"],
  },
  "View.staff.ShowtimeView.start()": {
    reference: [],
    contain: [],
    call: ["View.staff.ShowtimeView.displayMenu()"],
  },
  "View.staff.ShowtimeView.displayMenu()": {
    reference: ["View.staff.ShowtimeView.movie : Movie"],
    contain: [],
    call: [
      "Controller.IOController.printHeader(String)",
      "Controller.CineplexManager.getMovieShowtime(Movie)",
      "Controller.IOController.printMenu(String[])",
      "Controller.IOController.readChoice(int,int)",
      "View.staff.ShowtimeView.addShowtime()",
      "View.staff.ShowtimeView.destroy()",
      "View.staff.ShowtimeView.displayShowtimeDetailMenu(Showtime)",
    ],
  },
  "View.staff.ShowtimeView.displayShowtimeDetailMenu(Showtime)": {
    reference: [],
    contain: [],
    call: [
      "Model.Showtime.toString()",
      "Controller.IOController.printHeader(String)",
      "Model.Showtime.getDetails()",
      "Controller.IOController.printMenu(String[])",
      "Controller.IOController.readChoice(int,int)",
      "View.staff.ShowtimeView.modifyCinema(Showtime)",
      "View.staff.ShowtimeView.modifyTime(Showtime)",
      "Controller.IOController.askConfirm(String[])",
      "Controller.CineplexManager.removeShowtime(Showtime)",
      "View.staff.ShowtimeView.displayMenu()",
    ],
  },
  "View.staff.ShowtimeView.modifyCinema(Showtime)": {
    reference: [],
    contain: [],
    call: [
      "Controller.IOController.readString(String[])",
      "Controller.CineplexManager.getCinemaByCode(String)",
      "Controller.IOController.printMenu(String[])",
      "View.staff.ShowtimeView.displayShowtimeDetailMenu(Showtime)",
      "Model.Showtime.setCinema(Cinema)",
      "Controller.CineplexManager.updateShowtime()",
    ],
  },
  "View.staff.ShowtimeView.modifyTime(Showtime)": {
    reference: [],
    contain: [],
    call: [
      "Controller.IOController.printHeader(String)",
      "Controller.IOController.readTimeMMddkkmm(String[])",
      "Model.Showtime.setTime(Date)",
      "Controller.CineplexManager.updateShowtime()",
      "View.staff.ShowtimeView.displayShowtimeDetailMenu(Showtime)",
    ],
  },
  "View.staff.ShowtimeView.addShowtime()": {
    reference: ["View.staff.ShowtimeView.movie : Movie"],
    contain: [],
    call: [
      "Controller.IOController.printHeader(String)",
      "Controller.IOController.readString(String[])",
      "View.staff.CinemaList.CinemaList(String)",
      "View.staff.ShowtimeView.intent(View,View)",
      "View.staff.ShowtimeView.displayMenu()",
      "Controller.CineplexManager.getCinemaByCode(String)",
      "Controller.IOController.printMenu(String[])",
      "Controller.IOController.readTimeMMddkkmm(String[])",
      "Model.Showtime.Showtime()",
      "Model.Showtime.setMovie(Movie)",
      "Model.Showtime.setCinema(Cinema)",
      "Model.Showtime.setTime(Date)",
      "Controller.CineplexManager.addShowtime(Showtime)",
    ],
  },
  "View.staff.ShowtimeView.movie : Movie": {
    reference: ["Model.Movie"],
    contain: [],
    call: [],
  },
  "Model.Seat.Seat(int,int,Showtime)": {
    reference: [
      "Model.Seat.row : int",
      "Model.Seat.col : int",
      "Model.Seat.showtime : Showtime",
      "Model.Seat.booked : boolean",
    ],
    contain: [],
    call: [],
  },
  "Model.Seat": {
    reference: [],
    contain: [
      "Model.Seat.Seat(int,int,Showtime)",
      "Model.Seat.getShowtime()",
      "Model.Seat.getCol()",
      "Model.Seat.getRow()",
      "Model.Seat.isBooked()",
      "Model.Seat.bookSeat()",
      "Model.Seat.toString()",
      "Model.Seat.row : int",
      "Model.Seat.col : int",
      "Model.Seat.showtime : Showtime",
      "Model.Seat.booked : boolean",
    ],
    call: [],
  },
  "Model.Seat.getShowtime()": {
    reference: ["Model.Seat.showtime : Showtime"],
    contain: [],
    call: [],
  },
  "Model.Seat.getCol()": {
    reference: ["Model.Seat.col : int"],
    contain: [],
    call: [],
  },
  "Model.Seat.getRow()": {
    reference: ["Model.Seat.row : int"],
    contain: [],
    call: [],
  },
  "Model.Seat.isBooked()": {
    reference: ["Model.Seat.booked : boolean"],
    contain: [],
    call: [],
  },
  "Model.Seat.bookSeat()": {
    reference: ["Model.Seat.booked : boolean"],
    contain: [],
    call: [],
  },
  "Model.Seat.toString()": {
    reference: ["Model.Seat.booked : boolean"],
    contain: [],
    call: [],
  },
  "Model.Seat.showtime : Showtime": {
    reference: ["Model.Showtime"],
    contain: [],
    call: [],
  },
  "Model.Constant.Cineplex": {
    reference: ["Model.Constant.Cineplex[]", "Model.Constant"],
    contain: [
      "Model.Constant.Cineplex.values()",
      "Model.Constant.Cineplex.valueOf(String)",
      "Model.Constant.Cineplex.Cineplex(String,int,String)",
      "Model.Constant.Cineplex.toString()",
      "Model.Constant.Cineplex.static {...}",
      "Model.Constant.Cineplex.JEM : Cineplex",
      "Model.Constant.Cineplex.TheCathay : Cineplex",
      "Model.Constant.Cineplex.WestMall : Cineplex",
      "Model.Constant.Cineplex.AMK_Hub : Cineplex",
      "Model.Constant.Cineplex.cineplex : String",
      "Model.Constant.Cineplex.$VALUES : Cineplex[]",
    ],
    call: [],
  },
  "Model.Constant.Cineplex.values()": {
    reference: ["Model.Constant.Cineplex.$VALUES : Cineplex[]"],
    contain: [],
    call: ["Model.Constant.Cineplex[].clone()"],
  },
  "Model.Constant.Cineplex.Cineplex(String,int,String)": {
    reference: ["Model.Constant.Cineplex.cineplex : String"],
    contain: [],
    call: [],
  },
  "Model.Constant.Cineplex.toString()": {
    reference: ["Model.Constant.Cineplex.cineplex : String"],
    contain: [],
    call: [],
  },
  "Model.Constant.Cineplex.static {...}": {
    reference: [
      "Model.Constant.Cineplex.JEM : Cineplex",
      "Model.Constant.Cineplex.TheCathay : Cineplex",
      "Model.Constant.Cineplex.WestMall : Cineplex",
      "Model.Constant.Cineplex.AMK_Hub : Cineplex",
      "Model.Constant.Cineplex.$VALUES : Cineplex[]",
    ],
    contain: [],
    call: ["Model.Constant.Cineplex.Cineplex(String,int,String)"],
  },
  "Model.Constant.Cineplex.JEM : Cineplex": {
    reference: ["Model.Constant.Cineplex"],
    contain: [],
    call: [],
  },
  "Model.Constant.Cineplex.TheCathay : Cineplex": {
    reference: ["Model.Constant.Cineplex"],
    contain: [],
    call: [],
  },
  "Model.Constant.Cineplex.WestMall : Cineplex": {
    reference: ["Model.Constant.Cineplex"],
    contain: [],
    call: [],
  },
  "Model.Constant.Cineplex.AMK_Hub : Cineplex": {
    reference: ["Model.Constant.Cineplex"],
    contain: [],
    call: [],
  },
  "Model.Constant.Cineplex.$VALUES : Cineplex[]": {
    reference: ["Model.Constant.Cineplex[]"],
    contain: [],
    call: [],
  },
  "Model.Cinema": {
    reference: ["Model.Constant.Cineplex", "Model.Constant"],
    contain: [
      "Model.Cinema.Cinema(Constant.Cineplex,boolean,boolean,String,double)",
      "Model.Cinema.isPlatinum()",
      "Model.Cinema.getCineplex()",
      "Model.Cinema.getCode()",
      "Model.Cinema.is3D()",
      "Model.Cinema.setBasePrice(double)",
      "Model.Cinema.getBasePrice()",
      "Model.Cinema.equals(Object)",
      "Model.Cinema.hashCode()",
      "Model.Cinema.toString()",
      "Model.Cinema.cineplex : Cineplex",
      "Model.Cinema.isPlatinum : boolean",
      "Model.Cinema.is3D : boolean",
      "Model.Cinema.code : String",
      "Model.Cinema.basePrice : double",
    ],
    call: [],
  },
  "Model.Cinema.Cinema(Constant.Cineplex,boolean,boolean,String,double)": {
    reference: [
      "Model.Cinema.cineplex : Cineplex",
      "Model.Cinema.isPlatinum : boolean",
      "Model.Cinema.is3D : boolean",
      "Model.Cinema.code : String",
      "Model.Cinema.basePrice : double",
    ],
    contain: [],
    call: [],
  },
  "Model.Cinema.isPlatinum()": {
    reference: ["Model.Cinema.isPlatinum : boolean"],
    contain: [],
    call: [],
  },
  "Model.Cinema.getCineplex()": {
    reference: ["Model.Cinema.cineplex : Cineplex"],
    contain: [],
    call: [],
  },
  "Model.Cinema.getCode()": {
    reference: ["Model.Cinema.code : String"],
    contain: [],
    call: [],
  },
  "Model.Cinema.is3D()": {
    reference: ["Model.Cinema.is3D : boolean"],
    contain: [],
    call: [],
  },
  "Model.Cinema.setBasePrice(double)": {
    reference: ["Model.Cinema.basePrice : double"],
    contain: [],
    call: [],
  },
  "Model.Cinema.getBasePrice()": {
    reference: ["Model.Cinema.basePrice : double"],
    contain: [],
    call: [],
  },
  "Model.Cinema.equals(Object)": {
    reference: ["Model.Cinema.code : String"],
    contain: [],
    call: [],
  },
  "Model.Cinema.hashCode()": {
    reference: ["Model.Cinema.code : String"],
    contain: [],
    call: [],
  },
  "Model.Cinema.toString()": {
    reference: ["Model.Cinema.code : String"],
    contain: [],
    call: [],
  },
  "Model.Cinema.cineplex : Cineplex": {
    reference: ["Model.Constant.Cineplex"],
    contain: [],
    call: [],
  },
  "Model.Review": {
    reference: ["Model.Movie"],
    contain: [
      "Model.Review.Review(Movie,int,String,String)",
      "Model.Review.getMovie()",
      "Model.Review.getContent()",
      "Model.Review.getRating()",
      "Model.Review.getName()",
      "Model.Review.getDate()",
      "Model.Review.date : Date",
      "Model.Review.rating : int",
      "Model.Review.content : String",
      "Model.Review.movie : Movie",
      "Model.Review.name : String",
      "Model.Review.maxRating : int",
      "Model.Review.minRating : int",
    ],
    call: [],
  },
  "Model.Review.Review(Movie,int,String,String)": {
    reference: [
      "Model.Review.rating : int",
      "Model.Review.date : Date",
      "Model.Review.content : String",
      "Model.Review.movie : Movie",
      "Model.Review.name : String",
    ],
    contain: [],
    call: [],
  },
  "Model.Review.getMovie()": {
    reference: ["Model.Review.movie : Movie"],
    contain: [],
    call: [],
  },
  "Model.Review.getContent()": {
    reference: ["Model.Review.content : String"],
    contain: [],
    call: [],
  },
  "Model.Review.getRating()": {
    reference: ["Model.Review.rating : int"],
    contain: [],
    call: [],
  },
  "Model.Review.getName()": {
    reference: ["Model.Review.name : String"],
    contain: [],
    call: [],
  },
  "Model.Review.getDate()": {
    reference: ["Model.Review.date : Date"],
    contain: [],
    call: [],
  },
  "Model.Review.movie : Movie": {
    reference: ["Model.Movie"],
    contain: [],
    call: [],
  },
  "Controller.DataManager": {
    reference: [],
    contain: [
      "Controller.DataManager.DataManager()",
      "Controller.DataManager.readSerializedObject(String)",
      "Controller.DataManager.writeSerializedObject(String,Object)",
    ],
    call: [],
  },
  "Model.Constant": {
    reference: [
      "Model.Constant.AgeRestriction",
      "Model.Constant.Cineplex",
      "Model.Constant.MovieStatus",
    ],
    contain: ["Model.Constant.Constant()"],
    call: [],
  },
  "Controller.CineplexManager": {
    reference: [
      "Controller.DataManager",
      "Model.Movie",
      "Model.Constant.MovieStatus",
      "Model.Constant.Cineplex",
      "Model.Cinema",
      "Model.Review",
      "Controller.IOController",
      "Model.Holiday",
      "Model.Showtime",
      "Model.Constant.Cineplex[]",
      "Model.Constant",
    ],
    contain: [
      "Controller.CineplexManager.CineplexManager()",
      "Controller.CineplexManager.initialize()",
      "Controller.CineplexManager.readMovieListing()",
      "Controller.CineplexManager.readMovieShowtime()",
      "Controller.CineplexManager.readStaffAccount()",
      "Controller.CineplexManager.readCinemaList()",
      "Controller.CineplexManager.readBookingHistory()",
      "Controller.CineplexManager.readReviewList()",
      "Controller.CineplexManager.readHolidayList()",
      "Controller.CineplexManager.readSystem()",
      "Controller.CineplexManager.updateMovieListing()",
      "Controller.CineplexManager.updateShowtime()",
      "Controller.CineplexManager.updateCinemaList()",
      "Controller.CineplexManager.updateBookingHistory()",
      "Controller.CineplexManager.updateReviewList()",
      "Controller.CineplexManager.updateHolidayList()",
      "Controller.CineplexManager.updateSystem()",
      "Controller.CineplexManager.getMovieListing()",
      "Controller.CineplexManager.getTop5MovieListing()",
      "Controller.CineplexManager.getMovieShowtime(Movie)",
      "Controller.CineplexManager.getCinemaList(Constant.Cineplex)",
      "Controller.CineplexManager.getBookingHistory()",
      "Controller.CineplexManager.getReviewList(Movie)",
      "Controller.CineplexManager.getHolidayList()",
      "Controller.CineplexManager.getSystem()",
      "Controller.CineplexManager.getCinemaByCode(String)",
      "Controller.CineplexManager.getMovieByTitle(String)",
      "Controller.CineplexManager.getMovieRating(Movie)",
      "Controller.CineplexManager.getHoliday(Date)",
      "Controller.CineplexManager.addNewListing(Movie)",
      "Controller.CineplexManager.addShowtime(Showtime)",
      "Controller.CineplexManager.logBooking(BookingHistory)",
      "Controller.CineplexManager.addNewReview(Movie,Review)",
      "Controller.CineplexManager.addCinema(Cinema)",
      "Controller.CineplexManager.addHoliday(String,Holiday)",
      "Controller.CineplexManager.removeListing(Movie)",
      "Controller.CineplexManager.removeShowtime(Showtime)",
      "Controller.CineplexManager.removeAllShowtime(Movie)",
      "Controller.CineplexManager.authentication(String,String)",
      "Controller.CineplexManager.lambda$getTop5MovieListing$2(Movie,Movie)",
      "Controller.CineplexManager.lambda$getTop5MovieListing$1(Movie,Movie)",
      "Controller.CineplexManager.lambda$readMovieListing$0(Movie)",
      "Controller.CineplexManager.FILENAME_MOVIE : String",
      "Controller.CineplexManager.FILENAME_SHOWTIME : String",
      "Controller.CineplexManager.FILENAME_STAFFACCOUNT : String",
      "Controller.CineplexManager.FILENAME_CINEMALIST : String",
      "Controller.CineplexManager.FILENAME_REVIEWLIST : String",
      "Controller.CineplexManager.FILENAME_BOOKINGHISTORY : String",
      "Controller.CineplexManager.FILENAME_HOLIDAY : String",
      "Controller.CineplexManager.FILENAME_SYSTEM : String",
      "Controller.CineplexManager.movieListing : ArrayList",
      "Controller.CineplexManager.movieShowtime : HashMap",
      "Controller.CineplexManager.cinemaList : HashMap",
      "Controller.CineplexManager.staffAccount : HashMap",
      "Controller.CineplexManager.bookingHistory : ArrayList",
      "Controller.CineplexManager.reviewList : HashMap",
      "Controller.CineplexManager.holidayList : HashMap",
      "Controller.CineplexManager.system : HashMap",
    ],
    call: [],
  },
  "Controller.CineplexManager.CineplexManager()": {
    reference: [],
    contain: [],
    call: ["Controller.DataManager.DataManager()"],
  },
  "Controller.CineplexManager.initialize()": {
    reference: [],
    contain: [],
    call: [
      "Controller.CineplexManager.readSystem()",
      "Controller.CineplexManager.readStaffAccount()",
      "Controller.CineplexManager.readCinemaList()",
      "Controller.CineplexManager.readMovieListing()",
      "Controller.CineplexManager.readMovieShowtime()",
      "Controller.CineplexManager.readReviewList()",
      "Controller.CineplexManager.readHolidayList()",
      "Controller.CineplexManager.readBookingHistory()",
    ],
  },
  "Controller.CineplexManager.readMovieListing()": {
    reference: ["Controller.CineplexManager.movieListing : ArrayList"],
    contain: [],
    call: ["Controller.CineplexManager.readSerializedObject(String)"],
  },
  "Controller.CineplexManager.readMovieShowtime()": {
    reference: ["Controller.CineplexManager.movieShowtime : HashMap"],
    contain: [],
    call: ["Controller.CineplexManager.readSerializedObject(String)"],
  },
  "Controller.CineplexManager.readStaffAccount()": {
    reference: ["Controller.CineplexManager.staffAccount : HashMap"],
    contain: [],
    call: ["Controller.CineplexManager.readSerializedObject(String)"],
  },
  "Controller.CineplexManager.readCinemaList()": {
    reference: ["Controller.CineplexManager.cinemaList : HashMap"],
    contain: [],
    call: ["Controller.CineplexManager.readSerializedObject(String)"],
  },
  "Controller.CineplexManager.readBookingHistory()": {
    reference: ["Controller.CineplexManager.bookingHistory : ArrayList"],
    contain: [],
    call: ["Controller.CineplexManager.readSerializedObject(String)"],
  },
  "Controller.CineplexManager.readReviewList()": {
    reference: ["Controller.CineplexManager.reviewList : HashMap"],
    contain: [],
    call: ["Controller.CineplexManager.readSerializedObject(String)"],
  },
  "Controller.CineplexManager.readHolidayList()": {
    reference: ["Controller.CineplexManager.holidayList : HashMap"],
    contain: [],
    call: ["Controller.CineplexManager.readSerializedObject(String)"],
  },
  "Controller.CineplexManager.readSystem()": {
    reference: ["Controller.CineplexManager.system : HashMap"],
    contain: [],
    call: ["Controller.CineplexManager.readSerializedObject(String)"],
  },
  "Controller.CineplexManager.updateMovieListing()": {
    reference: ["Controller.CineplexManager.movieListing : ArrayList"],
    contain: [],
    call: ["Controller.CineplexManager.writeSerializedObject(String,Object)"],
  },
  "Controller.CineplexManager.updateShowtime()": {
    reference: ["Controller.CineplexManager.movieShowtime : HashMap"],
    contain: [],
    call: ["Controller.CineplexManager.writeSerializedObject(String,Object)"],
  },
  "Controller.CineplexManager.updateCinemaList()": {
    reference: ["Controller.CineplexManager.cinemaList : HashMap"],
    contain: [],
    call: ["Controller.CineplexManager.writeSerializedObject(String,Object)"],
  },
  "Controller.CineplexManager.updateBookingHistory()": {
    reference: ["Controller.CineplexManager.bookingHistory : ArrayList"],
    contain: [],
    call: ["Controller.CineplexManager.writeSerializedObject(String,Object)"],
  },
  "Controller.CineplexManager.updateReviewList()": {
    reference: ["Controller.CineplexManager.reviewList : HashMap"],
    contain: [],
    call: ["Controller.CineplexManager.writeSerializedObject(String,Object)"],
  },
  "Controller.CineplexManager.updateHolidayList()": {
    reference: ["Controller.CineplexManager.holidayList : HashMap"],
    contain: [],
    call: ["Controller.CineplexManager.writeSerializedObject(String,Object)"],
  },
  "Controller.CineplexManager.updateSystem()": {
    reference: ["Controller.CineplexManager.system : HashMap"],
    contain: [],
    call: ["Controller.CineplexManager.writeSerializedObject(String,Object)"],
  },
  "Controller.CineplexManager.getMovieListing()": {
    reference: ["Controller.CineplexManager.movieListing : ArrayList"],
    contain: [],
    call: [],
  },
  "Controller.CineplexManager.getTop5MovieListing()": {
    reference: [
      "Controller.CineplexManager.system : HashMap",
      "Controller.CineplexManager.movieListing : ArrayList",
      "Model.Constant.MovieStatus.END_OF_SHOWING : MovieStatus",
    ],
    contain: [],
    call: [
      "Model.Movie.getMovieStatus()",
      "Model.Constant.MovieStatus.equals(Object)",
    ],
  },
  "Controller.CineplexManager.getMovieShowtime(Movie)": {
    reference: ["Controller.CineplexManager.movieShowtime : HashMap"],
    contain: [],
    call: [],
  },
  "Controller.CineplexManager.getCinemaList(Constant.Cineplex)": {
    reference: ["Controller.CineplexManager.cinemaList : HashMap"],
    contain: [],
    call: [],
  },
  "Controller.CineplexManager.getBookingHistory()": {
    reference: ["Controller.CineplexManager.bookingHistory : ArrayList"],
    contain: [],
    call: [],
  },
  "Controller.CineplexManager.getReviewList(Movie)": {
    reference: ["Controller.CineplexManager.reviewList : HashMap"],
    contain: [],
    call: [],
  },
  "Controller.CineplexManager.getHolidayList()": {
    reference: ["Controller.CineplexManager.holidayList : HashMap"],
    contain: [],
    call: [],
  },
  "Controller.CineplexManager.getSystem()": {
    reference: ["Controller.CineplexManager.system : HashMap"],
    contain: [],
    call: [],
  },
  "Controller.CineplexManager.getCinemaByCode(String)": {
    reference: [],
    contain: [],
    call: [
      "Model.Constant.Cineplex.values()",
      "Controller.CineplexManager.getCinemaList(Constant.Cineplex)",
      "Model.Cinema.getCode()",
    ],
  },
  "Controller.CineplexManager.getMovieByTitle(String)": {
    reference: ["Controller.CineplexManager.movieListing : ArrayList"],
    contain: [],
    call: ["Model.Movie.getTitle()"],
  },
  "Controller.CineplexManager.getMovieRating(Movie)": {
    reference: [],
    contain: [],
    call: [
      "Controller.CineplexManager.getReviewList(Movie)",
      "Model.Review.getRating()",
      "Controller.IOController.round(double,int)",
    ],
  },
  "Controller.CineplexManager.getHoliday(Date)": {
    reference: [],
    contain: [],
    call: [
      "Controller.CineplexManager.getHolidayList()",
      "Controller.IOController.formatTimeMMdd(Date)",
    ],
  },
  "Controller.CineplexManager.addNewListing(Movie)": {
    reference: ["Controller.CineplexManager.movieListing : ArrayList"],
    contain: [],
    call: ["Controller.CineplexManager.updateMovieListing()"],
  },
  "Controller.CineplexManager.addShowtime(Showtime)": {
    reference: ["Controller.CineplexManager.movieShowtime : HashMap"],
    contain: [],
    call: [
      "Model.Showtime.getMovie()",
      "Controller.CineplexManager.updateShowtime()",
    ],
  },
  "Controller.CineplexManager.logBooking(BookingHistory)": {
    reference: ["Controller.CineplexManager.bookingHistory : ArrayList"],
    contain: [],
    call: ["Controller.CineplexManager.updateBookingHistory()"],
  },
  "Controller.CineplexManager.addNewReview(Movie,Review)": {
    reference: ["Controller.CineplexManager.reviewList : HashMap"],
    contain: [],
    call: ["Controller.CineplexManager.updateReviewList()"],
  },
  "Controller.CineplexManager.addCinema(Cinema)": {
    reference: ["Controller.CineplexManager.cinemaList : HashMap"],
    contain: [],
    call: ["Model.Cinema.getCineplex()"],
  },
  "Controller.CineplexManager.addHoliday(String,Holiday)": {
    reference: ["Controller.CineplexManager.holidayList : HashMap"],
    contain: [],
    call: ["Controller.CineplexManager.updateHolidayList()"],
  },
  "Controller.CineplexManager.removeListing(Movie)": {
    reference: ["Model.Constant.MovieStatus.END_OF_SHOWING : MovieStatus"],
    contain: [],
    call: [
      "Model.Movie.setMovieStatus(Constant.MovieStatus)",
      "Controller.CineplexManager.updateMovieListing()",
    ],
  },
  "Controller.CineplexManager.removeShowtime(Showtime)": {
    reference: ["Controller.CineplexManager.movieShowtime : HashMap"],
    contain: [],
    call: [
      "Model.Showtime.getMovie()",
      "Controller.CineplexManager.updateShowtime()",
    ],
  },
  "Controller.CineplexManager.removeAllShowtime(Movie)": {
    reference: ["Controller.CineplexManager.movieShowtime : HashMap"],
    contain: [],
    call: ["Controller.CineplexManager.updateShowtime()"],
  },
  "Controller.CineplexManager.authentication(String,String)": {
    reference: ["Controller.CineplexManager.staffAccount : HashMap"],
    contain: [],
    call: [],
  },
  "View.staff.SystemSetting": {
    reference: [
      "View.View",
      "Controller.IOController",
      "View.staff.CinemaList",
      "Controller.CineplexManager",
      "Model.Cinema",
      "Model.Holiday",
    ],
    contain: [
      "View.staff.SystemSetting.SystemSetting()",
      "View.staff.SystemSetting.start()",
      "View.staff.SystemSetting.displayMenu()",
      "View.staff.SystemSetting.configureTop5Ranking()",
      "View.staff.SystemSetting.configureTicket()",
      "View.staff.SystemSetting.configureHolidays()",
      "View.staff.SystemSetting.displayHolidayList()",
      "View.staff.SystemSetting.displayHolidayDetail(Holiday)",
      "View.staff.SystemSetting.addHoliday()",
    ],
    call: [],
  },
  "View.staff.SystemSetting.SystemSetting()": {
    reference: [],
    contain: [],
    call: ["View.View.View()"],
  },
  "View.staff.SystemSetting.start()": {
    reference: [],
    contain: [],
    call: ["View.staff.SystemSetting.displayMenu()"],
  },
  "View.staff.SystemSetting.displayMenu()": {
    reference: [],
    contain: [],
    call: [
      "Controller.IOController.printHeader(String)",
      "Controller.IOController.printMenu(String[])",
      "Controller.IOController.readChoice(int,int)",
      "View.staff.SystemSetting.configureTicket()",
      "View.staff.SystemSetting.configureTop5Ranking()",
      "View.staff.CinemaList.CinemaList(String)",
      "View.staff.SystemSetting.intent(View,View)",
      "View.staff.SystemSetting.configureHolidays()",
      "View.staff.SystemSetting.destroy()",
    ],
  },
  "View.staff.SystemSetting.configureTop5Ranking()": {
    reference: [],
    contain: [],
    call: [
      "Controller.IOController.printHeader(String)",
      "Controller.CineplexManager.getSystem()",
      "Controller.IOController.askConfirm(String[])",
      "Controller.CineplexManager.updateSystem()",
      "View.staff.SystemSetting.displayMenu()",
    ],
  },
  "View.staff.SystemSetting.configureTicket()": {
    reference: [],
    contain: [],
    call: [
      "Controller.IOController.printHeader(String)",
      "Controller.IOController.readString(String[])",
      "View.staff.CinemaList.CinemaList(String)",
      "View.staff.SystemSetting.intent(View,View)",
      "View.staff.SystemSetting.displayMenu()",
      "Controller.CineplexManager.getCinemaByCode(String)",
      "Model.Cinema.isPlatinum()",
      "Model.Cinema.getCode()",
      "Model.Cinema.getBasePrice()",
      "Controller.IOController.askConfirm(String[])",
      "Controller.IOController.readDouble(String[])",
      "Model.Cinema.setBasePrice(double)",
      "Controller.CineplexManager.updateCinemaList()",
    ],
  },
  "View.staff.SystemSetting.configureHolidays()": {
    reference: [],
    contain: [],
    call: [
      "Controller.IOController.printHeader(String)",
      "Controller.IOController.printMenu(String[])",
      "Controller.IOController.readChoice(int,int)",
      "View.staff.SystemSetting.displayHolidayList()",
      "View.staff.SystemSetting.addHoliday()",
      "View.staff.SystemSetting.displayMenu()",
    ],
  },
  "View.staff.SystemSetting.displayHolidayList()": {
    reference: [],
    contain: [],
    call: [
      "Controller.IOController.printHeader(String)",
      "Controller.CineplexManager.getHolidayList()",
      "Controller.IOController.printMenu(String[])",
      "Controller.IOController.readString(String[])",
      "View.staff.SystemSetting.configureHolidays()",
      "Controller.IOController.readChoice(int,int)",
      "View.staff.SystemSetting.displayHolidayDetail(Holiday)",
    ],
  },
  "View.staff.SystemSetting.displayHolidayDetail(Holiday)": {
    reference: [],
    contain: [],
    call: [
      "Model.Holiday.getName()",
      "Controller.IOController.printHeader(String)",
      "Model.Holiday.printDetail()",
      "Controller.IOController.printMenu(String[])",
      "Controller.IOController.askConfirm(String[])",
      "Controller.CineplexManager.getHolidayList()",
      "Model.Holiday.getDate()",
      "Controller.IOController.formatTimeMMdd(Date)",
      "Controller.CineplexManager.updateHolidayList()",
      "View.staff.SystemSetting.displayHolidayList()",
    ],
  },
  "View.staff.SystemSetting.addHoliday()": {
    reference: [],
    contain: [],
    call: [
      "Controller.IOController.readString(String[])",
      "Controller.IOController.readTimeMMdd(String[])",
      "Controller.IOController.readDouble(String[])",
      "Model.Holiday.Holiday(String,Date,double)",
      "Controller.IOController.formatTimeMMdd(Date)",
      "Controller.CineplexManager.addHoliday(String,Holiday)",
      "View.staff.SystemSetting.displayHolidayList()",
    ],
  },
  "Model.Constant.AgeRestriction": {
    reference: ["Model.Constant.AgeRestriction[]", "Model.Constant"],
    contain: [
      "Model.Constant.AgeRestriction.values()",
      "Model.Constant.AgeRestriction.valueOf(String)",
      "Model.Constant.AgeRestriction.AgeRestriction(String,int,String)",
      "Model.Constant.AgeRestriction.toString()",
      "Model.Constant.AgeRestriction.static {...}",
      "Model.Constant.AgeRestriction.G : AgeRestriction",
      "Model.Constant.AgeRestriction.PG : AgeRestriction",
      "Model.Constant.AgeRestriction.PG13 : AgeRestriction",
      "Model.Constant.AgeRestriction.NC16 : AgeRestriction",
      "Model.Constant.AgeRestriction.M18 : AgeRestriction",
      "Model.Constant.AgeRestriction.R21 : AgeRestriction",
      "Model.Constant.AgeRestriction.movieRestriction : String",
      "Model.Constant.AgeRestriction.$VALUES : AgeRestriction[]",
    ],
    call: [],
  },
  "Model.Constant.AgeRestriction.values()": {
    reference: ["Model.Constant.AgeRestriction.$VALUES : AgeRestriction[]"],
    contain: [],
    call: ["Model.Constant.AgeRestriction[].clone()"],
  },
  "Model.Constant.AgeRestriction.AgeRestriction(String,int,String)": {
    reference: ["Model.Constant.AgeRestriction.movieRestriction : String"],
    contain: [],
    call: [],
  },
  "Model.Constant.AgeRestriction.toString()": {
    reference: ["Model.Constant.AgeRestriction.movieRestriction : String"],
    contain: [],
    call: [],
  },
  "Model.Constant.AgeRestriction.static {...}": {
    reference: [
      "Model.Constant.AgeRestriction.G : AgeRestriction",
      "Model.Constant.AgeRestriction.PG : AgeRestriction",
      "Model.Constant.AgeRestriction.PG13 : AgeRestriction",
      "Model.Constant.AgeRestriction.NC16 : AgeRestriction",
      "Model.Constant.AgeRestriction.M18 : AgeRestriction",
      "Model.Constant.AgeRestriction.R21 : AgeRestriction",
      "Model.Constant.AgeRestriction.$VALUES : AgeRestriction[]",
    ],
    contain: [],
    call: ["Model.Constant.AgeRestriction.AgeRestriction(String,int,String)"],
  },
  "Model.Constant.AgeRestriction.G : AgeRestriction": {
    reference: ["Model.Constant.AgeRestriction"],
    contain: [],
    call: [],
  },
  "Model.Constant.AgeRestriction.PG : AgeRestriction": {
    reference: ["Model.Constant.AgeRestriction"],
    contain: [],
    call: [],
  },
  "Model.Constant.AgeRestriction.PG13 : AgeRestriction": {
    reference: ["Model.Constant.AgeRestriction"],
    contain: [],
    call: [],
  },
  "Model.Constant.AgeRestriction.NC16 : AgeRestriction": {
    reference: ["Model.Constant.AgeRestriction"],
    contain: [],
    call: [],
  },
  "Model.Constant.AgeRestriction.M18 : AgeRestriction": {
    reference: ["Model.Constant.AgeRestriction"],
    contain: [],
    call: [],
  },
  "Model.Constant.AgeRestriction.R21 : AgeRestriction": {
    reference: ["Model.Constant.AgeRestriction"],
    contain: [],
    call: [],
  },
  "Model.Constant.AgeRestriction.$VALUES : AgeRestriction[]": {
    reference: ["Model.Constant.AgeRestriction[]"],
    contain: [],
    call: [],
  },
  "View.moviegoer.ShowtimeView": {
    reference: [
      "View.View",
      "Model.Movie",
      "Model.Constant.MovieStatus",
      "Controller.IOController",
      "Controller.CineplexManager",
      "Model.Showtime",
      "Model.Cinema",
      "Model.Seat",
      "View.moviegoer.Booking",
      "View.moviegoer.MovieListing",
      "Model.Constant.Cineplex",
      "Model.Constant",
    ],
    contain: [
      "View.moviegoer.ShowtimeView.ShowtimeView(Movie)",
      "View.moviegoer.ShowtimeView.start()",
      "View.moviegoer.ShowtimeView.displayMenu()",
      "View.moviegoer.ShowtimeView.displayShowtimeDetailMenu(Showtime)",
      "View.moviegoer.ShowtimeView.displayPrice(Showtime)",
      "View.moviegoer.ShowtimeView.displaySeat(Seat[][])",
      "View.moviegoer.ShowtimeView.displayBookSeatMenu(Showtime)",
      "View.moviegoer.ShowtimeView.destroy()",
      "View.moviegoer.ShowtimeView.lambda$displayMenu$0(Showtime)",
      "View.moviegoer.ShowtimeView.movie : Movie",
    ],
    call: [],
  },
  "View.moviegoer.ShowtimeView.ShowtimeView(Movie)": {
    reference: ["View.moviegoer.ShowtimeView.movie : Movie"],
    contain: [],
    call: ["View.View.View()"],
  },
  "View.moviegoer.ShowtimeView.start()": {
    reference: [],
    contain: [],
    call: ["View.moviegoer.ShowtimeView.displayMenu()"],
  },
  "View.moviegoer.ShowtimeView.displayMenu()": {
    reference: [
      "View.moviegoer.ShowtimeView.movie : Movie",
      "Model.Constant.MovieStatus.NOW_SHOWING : MovieStatus",
    ],
    contain: [],
    call: [
      "Model.Movie.getMovieStatus()",
      "Model.Constant.MovieStatus.equals(Object)",
      "Controller.IOController.formatTimeMMdd(Date)",
      "Controller.IOController.printMenu(String[])",
      "Controller.IOController.readChoice(int,int)",
      "Controller.IOController.printHeader(String)",
      "Controller.CineplexManager.getMovieShowtime(Movie)",
      "Model.Showtime.getTime()",
      "Controller.IOController.dateEquals(Date,Date)",
      "Controller.IOController.readString(String[])",
      "View.moviegoer.ShowtimeView.destroy()",
      "View.moviegoer.ShowtimeView.displayShowtimeDetailMenu(Showtime)",
    ],
  },
  "View.moviegoer.ShowtimeView.displayShowtimeDetailMenu(Showtime)": {
    reference: [],
    contain: [],
    call: [
      "Model.Showtime.toString()",
      "Controller.IOController.printHeader(String)",
      "Controller.IOController.printMenu(String[])",
      "Controller.IOController.readChoice(int,int)",
      "Model.Showtime.getSeats()",
      "View.moviegoer.ShowtimeView.displaySeat(Seat[][])",
      "View.moviegoer.ShowtimeView.displayShowtimeDetailMenu(Showtime)",
      "View.moviegoer.ShowtimeView.displayBookSeatMenu(Showtime)",
      "View.moviegoer.ShowtimeView.displayPrice(Showtime)",
      "View.moviegoer.ShowtimeView.destroy()",
    ],
  },
  "View.moviegoer.ShowtimeView.displayPrice(Showtime)": {
    reference: [],
    contain: [],
    call: [
      "Model.Showtime.getCinema()",
      "Model.Cinema.getBasePrice()",
      "Model.Showtime.getMovie()",
      "Model.Movie.getTitle()",
      "Model.Cinema.is3D()",
      "Controller.IOController.printHeader(String)",
      "Controller.IOController.generateSpaces(int)",
      "Controller.IOController.readString(String[])",
      "View.moviegoer.ShowtimeView.displayShowtimeDetailMenu(Showtime)",
    ],
  },
  "View.moviegoer.ShowtimeView.displaySeat(Seat[][])": {
    reference: [],
    contain: [],
    call: ["Controller.IOController.readString(String[])"],
  },
  "View.moviegoer.ShowtimeView.displayBookSeatMenu(Showtime)": {
    reference: [],
    contain: [],
    call: [
      "Controller.IOController.readChoice(int,int)",
      "Model.Showtime.getSeatAt(int,int)",
      "View.moviegoer.ShowtimeView.displayBookSeatMenu(Showtime)",
      "Model.Seat.isBooked()",
      "Model.Showtime.getMovie()",
      "Model.Movie.getSales()",
      "View.moviegoer.Booking.Booking(Seat)",
      "View.moviegoer.ShowtimeView.intent(View,View)",
    ],
  },
  "View.moviegoer.ShowtimeView.destroy()": {
    reference: ["View.moviegoer.ShowtimeView.movie : Movie"],
    contain: [],
    call: [
      "View.moviegoer.ShowtimeView.getPrevView()",
      "View.moviegoer.MovieListing.start(Movie)",
    ],
  },
  "View.moviegoer.ShowtimeView.movie : Movie": {
    reference: ["Model.Movie"],
    contain: [],
    call: [],
  },
  "Model.Customer.Customer(String,String,String,boolean)": {
    reference: [
      "Model.Customer.email : String",
      "Model.Customer.name : String",
      "Model.Customer.mobile : String",
      "Model.Customer.isSeniorCitizen : boolean",
    ],
    contain: [],
    call: [],
  },
  "Model.Customer": {
    reference: [],
    contain: [
      "Model.Customer.Customer(String,String,String,boolean)",
      "Model.Customer.isSeniorCitizen()",
      "Model.Customer.getName()",
      "Model.Customer.getMobile()",
      "Model.Customer.getEmail()",
      "Model.Customer.equals(Object)",
      "Model.Customer.hashCode()",
      "Model.Customer.name : String",
      "Model.Customer.mobile : String",
      "Model.Customer.email : String",
      "Model.Customer.isSeniorCitizen : boolean",
    ],
    call: [],
  },
  "Model.Customer.isSeniorCitizen()": {
    reference: ["Model.Customer.isSeniorCitizen : boolean"],
    contain: [],
    call: [],
  },
  "Model.Customer.getName()": {
    reference: ["Model.Customer.name : String"],
    contain: [],
    call: [],
  },
  "Model.Customer.getMobile()": {
    reference: ["Model.Customer.mobile : String"],
    contain: [],
    call: [],
  },
  "Model.Customer.getEmail()": {
    reference: ["Model.Customer.email : String"],
    contain: [],
    call: [],
  },
  "Model.Customer.equals(Object)": {
    reference: [
      "Model.Customer.name : String",
      "Model.Customer.mobile : String",
      "Model.Customer.email : String",
    ],
    contain: [],
    call: [],
  },
  "Model.Customer.hashCode()": {
    reference: [
      "Model.Customer.name : String",
      "Model.Customer.mobile : String",
      "Model.Customer.email : String",
    ],
    contain: [],
    call: [],
  },
  "Model.Movie": {
    reference: [
      "Controller.CineplexManager",
      "Model.Constant.AgeRestriction",
      "Controller.IOController",
      "Model.Constant.MovieStatus",
      "Model.Constant",
    ],
    contain: [
      "Model.Movie.Movie()",
      "Model.Movie.setTitle(String)",
      "Model.Movie.setAgeRestriction(Constant.AgeRestriction)",
      "Model.Movie.setSynopsis(String)",
      "Model.Movie.setDirector(String)",
      "Model.Movie.setCast(ArrayList)",
      "Model.Movie.setMovieStatus(Constant.MovieStatus)",
      "Model.Movie.incrementSales()",
      "Model.Movie.getTitle()",
      "Model.Movie.getMovieStatus()",
      "Model.Movie.getAgeRestriction()",
      "Model.Movie.getSales()",
      "Model.Movie.toString()",
      "Model.Movie.equals(Object)",
      "Model.Movie.hashCode()",
      "Model.Movie.title : String",
      "Model.Movie.ageRestriction : AgeRestriction",
      "Model.Movie.director : String",
      "Model.Movie.synopsis : String",
      "Model.Movie.cast : ArrayList",
      "Model.Movie.movieStatus : MovieStatus",
      "Model.Movie.sales : int",
    ],
    call: [],
  },
  "Model.Movie.Movie()": {
    reference: ["Model.Movie.sales : int"],
    contain: [],
    call: [],
  },
  "Model.Movie.setTitle(String)": {
    reference: ["Model.Movie.title : String"],
    contain: [],
    call: [],
  },
  "Model.Movie.setAgeRestriction(Constant.AgeRestriction)": {
    reference: ["Model.Movie.ageRestriction : AgeRestriction"],
    contain: [],
    call: [],
  },
  "Model.Movie.setSynopsis(String)": {
    reference: ["Model.Movie.synopsis : String"],
    contain: [],
    call: [],
  },
  "Model.Movie.setDirector(String)": {
    reference: ["Model.Movie.director : String"],
    contain: [],
    call: [],
  },
  "Model.Movie.setCast(ArrayList)": {
    reference: ["Model.Movie.cast : ArrayList"],
    contain: [],
    call: [],
  },
  "Model.Movie.setMovieStatus(Constant.MovieStatus)": {
    reference: ["Model.Movie.movieStatus : MovieStatus"],
    contain: [],
    call: [],
  },
  "Model.Movie.incrementSales()": {
    reference: ["Model.Movie.sales : int"],
    contain: [],
    call: [],
  },
  "Model.Movie.getTitle()": {
    reference: ["Model.Movie.title : String"],
    contain: [],
    call: [],
  },
  "Model.Movie.getMovieStatus()": {
    reference: ["Model.Movie.movieStatus : MovieStatus"],
    contain: [],
    call: [],
  },
  "Model.Movie.getAgeRestriction()": {
    reference: ["Model.Movie.ageRestriction : AgeRestriction"],
    contain: [],
    call: [],
  },
  "Model.Movie.getSales()": {
    reference: ["Model.Movie.sales : int"],
    contain: [],
    call: [],
  },
  "Model.Movie.toString()": {
    reference: [
      "Model.Movie.ageRestriction : AgeRestriction",
      "Model.Movie.director : String",
      "Model.Movie.synopsis : String",
      "Model.Movie.cast : ArrayList",
      "Model.Movie.movieStatus : MovieStatus",
    ],
    contain: [],
    call: [
      "Controller.CineplexManager.getMovieRating(Movie)",
      "Model.Movie.getTitle()",
      "Model.Constant.AgeRestriction.toString()",
      "Controller.IOController.addLinebreaks(String,int,int)",
      "Model.Constant.MovieStatus.toString()",
    ],
  },
  "Model.Movie.equals(Object)": {
    reference: ["Model.Movie.title : String", "Model.Movie.director : String"],
    contain: [],
    call: [],
  },
  "Model.Movie.hashCode()": {
    reference: ["Model.Movie.title : String", "Model.Movie.director : String"],
    contain: [],
    call: [],
  },
  "Model.Movie.ageRestriction : AgeRestriction": {
    reference: ["Model.Constant.AgeRestriction"],
    contain: [],
    call: [],
  },
  "Model.Movie.movieStatus : MovieStatus": {
    reference: ["Model.Constant.MovieStatus"],
    contain: [],
    call: [],
  },
  Moblima: {
    reference: [
      "View.View",
      "Controller.CineplexManager",
      "Controller.IOController",
      "View.MovieGoerView",
      "View.StaffView",
    ],
    contain: ["Moblima.Moblima()", "Moblima.start()", "Moblima.main(String[])"],
    call: [],
  },
  "Moblima.Moblima()": {
    reference: [],
    contain: [],
    call: ["View.View.View()"],
  },
  "Moblima.start()": {
    reference: [],
    contain: [],
    call: [
      "Controller.CineplexManager.initialize()",
      "Controller.IOController.printHeader(String)",
      "Controller.IOController.printMenu(String[])",
      "Controller.IOController.readChoice(int,int)",
      "View.MovieGoerView.MovieGoerView()",
      "Moblima.intent(View,View)",
      "View.StaffView.StaffView()",
      "Moblima.destroy()",
    ],
  },
  "Moblima.main(String[])": {
    reference: [],
    contain: [],
    call: ["Moblima.Moblima()", "Moblima.start()"],
  },
  "Model.Holiday": {
    reference: ["Controller.IOController"],
    contain: [
      "Model.Holiday.Holiday(String,Date,double)",
      "Model.Holiday.getName()",
      "Model.Holiday.getDate()",
      "Model.Holiday.getRate()",
      "Model.Holiday.printDetail()",
      "Model.Holiday.toString()",
      "Model.Holiday.name : String",
      "Model.Holiday.date : Date",
      "Model.Holiday.rate : double",
    ],
    call: [],
  },
  "Model.Holiday.Holiday(String,Date,double)": {
    reference: [
      "Model.Holiday.name : String",
      "Model.Holiday.date : Date",
      "Model.Holiday.rate : double",
    ],
    contain: [],
    call: [],
  },
  "Model.Holiday.getName()": {
    reference: ["Model.Holiday.name : String"],
    contain: [],
    call: [],
  },
  "Model.Holiday.getDate()": {
    reference: ["Model.Holiday.date : Date"],
    contain: [],
    call: [],
  },
  "Model.Holiday.getRate()": {
    reference: ["Model.Holiday.rate : double"],
    contain: [],
    call: [],
  },
  "Model.Holiday.printDetail()": {
    reference: ["Model.Holiday.date : Date", "Model.Holiday.rate : double"],
    contain: [],
    call: ["Controller.IOController.formatTimeMMdd(Date)"],
  },
  "Model.Holiday.toString()": {
    reference: ["Model.Holiday.name : String", "Model.Holiday.date : Date"],
    contain: [],
    call: ["Controller.IOController.formatTimeMMdd(Date)"],
  },
  "View.moviegoer.ReviewView": {
    reference: [
      "View.View",
      "Controller.IOController",
      "Model.Movie",
      "Model.Constant.MovieStatus",
      "Model.Review",
      "Controller.CineplexManager",
      "View.moviegoer.MovieListing",
      "Model.Constant",
    ],
    contain: [
      "View.moviegoer.ReviewView.ReviewView(Movie)",
      "View.moviegoer.ReviewView.start()",
      "View.moviegoer.ReviewView.displayMenu()",
      "View.moviegoer.ReviewView.addReview()",
      "View.moviegoer.ReviewView.listReview()",
      "View.moviegoer.ReviewView.destroy()",
      "View.moviegoer.ReviewView.movie : Movie",
    ],
    call: [],
  },
  "View.moviegoer.ReviewView.ReviewView(Movie)": {
    reference: ["View.moviegoer.ReviewView.movie : Movie"],
    contain: [],
    call: ["View.View.View()"],
  },
  "View.moviegoer.ReviewView.start()": {
    reference: [],
    contain: [],
    call: ["View.moviegoer.ReviewView.displayMenu()"],
  },
  "View.moviegoer.ReviewView.displayMenu()": {
    reference: [
      "View.moviegoer.ReviewView.movie : Movie",
      "Model.Constant.MovieStatus.COMING_SOON : MovieStatus",
    ],
    contain: [],
    call: [
      "Controller.IOController.printHeader(String)",
      "Model.Movie.getMovieStatus()",
      "Controller.IOController.readString(String[])",
      "View.moviegoer.ReviewView.destroy()",
      "Controller.IOController.printMenu(String[])",
      "Controller.IOController.readChoice(int,int)",
      "View.moviegoer.ReviewView.addReview()",
      "View.moviegoer.ReviewView.listReview()",
    ],
  },
  "View.moviegoer.ReviewView.addReview()": {
    reference: ["View.moviegoer.ReviewView.movie : Movie"],
    contain: [],
    call: [
      "Controller.IOController.printHeader(String)",
      "Controller.IOController.readString(String[])",
      "Controller.IOController.printMenu(String[])",
      "Controller.IOController.readChoice(int,int)",
      "Model.Review.Review(Movie,int,String,String)",
      "Controller.CineplexManager.addNewReview(Movie,Review)",
      "Model.Movie.getTitle()",
      "View.moviegoer.ReviewView.start()",
    ],
  },
  "View.moviegoer.ReviewView.listReview()": {
    reference: ["View.moviegoer.ReviewView.movie : Movie"],
    contain: [],
    call: [
      "Model.Movie.getTitle()",
      "Controller.IOController.printHeader(String)",
      "Controller.CineplexManager.getReviewList(Movie)",
      "Model.Review.getName()",
      "Model.Review.getDate()",
      "Controller.IOController.formatTimeMMddkkmm(Date)",
      "Model.Review.getRating()",
      "Model.Review.getContent()",
      "Controller.IOController.addLinebreaks(String,int,int)",
      "Controller.IOController.readString(String[])",
      "View.moviegoer.ReviewView.start()",
    ],
  },
  "View.moviegoer.ReviewView.destroy()": {
    reference: ["View.moviegoer.ReviewView.movie : Movie"],
    contain: [],
    call: [
      "View.moviegoer.ReviewView.getPrevView()",
      "View.moviegoer.MovieListing.start(Movie)",
    ],
  },
  "View.moviegoer.ReviewView.movie : Movie": {
    reference: ["Model.Movie"],
    contain: [],
    call: [],
  },
  "View.moviegoer.Payment": {
    reference: [
      "View.View",
      "Model.Seat",
      "Model.Showtime",
      "Model.Cinema",
      "Model.Customer",
      "Controller.IOController",
      "Controller.CineplexManager",
      "Model.Movie",
      "Model.BookingHistory",
    ],
    contain: [
      "View.moviegoer.Payment.start()",
      "View.moviegoer.Payment.Payment(Customer,Seat,double)",
      "View.moviegoer.Payment.generateTID()",
      "View.moviegoer.Payment.computeTotalPrice()",
      "View.moviegoer.Payment.displayMenu()",
      "View.moviegoer.Payment.logBooking()",
      "View.moviegoer.Payment.seat : Seat",
      "View.moviegoer.Payment.customer : Customer",
      "View.moviegoer.Payment.TID : String",
      "View.moviegoer.Payment.basePrice : double",
      "View.moviegoer.Payment.GST : double",
      "View.moviegoer.Payment.totalPrice : double",
    ],
    call: [],
  },
  "View.moviegoer.Payment.start()": {
    reference: [],
    contain: [],
    call: ["View.moviegoer.Payment.displayMenu()"],
  },
  "View.moviegoer.Payment.Payment(Customer,Seat,double)": {
    reference: [
      "View.moviegoer.Payment.customer : Customer",
      "View.moviegoer.Payment.seat : Seat",
      "View.moviegoer.Payment.basePrice : double",
    ],
    contain: [],
    call: [
      "View.View.View()",
      "View.moviegoer.Payment.generateTID()",
      "View.moviegoer.Payment.computeTotalPrice()",
    ],
  },
  "View.moviegoer.Payment.generateTID()": {
    reference: [
      "View.moviegoer.Payment.seat : Seat",
      "View.moviegoer.Payment.TID : String",
    ],
    contain: [],
    call: [
      "Model.Seat.getShowtime()",
      "Model.Showtime.getCinema()",
      "Model.Cinema.getCode()",
    ],
  },
  "View.moviegoer.Payment.computeTotalPrice()": {
    reference: [
      "View.moviegoer.Payment.customer : Customer",
      "View.moviegoer.Payment.basePrice : double",
      "View.moviegoer.Payment.GST : double",
      "View.moviegoer.Payment.totalPrice : double",
    ],
    contain: [],
    call: [
      "Model.Customer.isSeniorCitizen()",
      "Controller.IOController.round(double,int)",
    ],
  },
  "View.moviegoer.Payment.displayMenu()": {
    reference: [
      "View.moviegoer.Payment.TID : String",
      "View.moviegoer.Payment.basePrice : double",
      "View.moviegoer.Payment.GST : double",
      "View.moviegoer.Payment.totalPrice : double",
      "View.moviegoer.Payment.customer : Customer",
    ],
    contain: [],
    call: [
      "Controller.IOController.printHeader(String)",
      "Controller.IOController.printMenu(String[])",
      "Model.Customer.isSeniorCitizen()",
      "Controller.IOController.readChoice(int,int)",
      "View.moviegoer.Payment.logBooking()",
      "View.moviegoer.Payment.destroy()",
    ],
  },
  "View.moviegoer.Payment.logBooking()": {
    reference: [
      "View.moviegoer.Payment.seat : Seat",
      "View.moviegoer.Payment.TID : String",
      "View.moviegoer.Payment.customer : Customer",
    ],
    contain: [],
    call: [
      "Model.Seat.bookSeat()",
      "Model.Seat.getShowtime()",
      "Model.Showtime.getMovie()",
      "Controller.CineplexManager.getMovieListing()",
      "Model.Movie.incrementSales()",
      "Model.BookingHistory.BookingHistory(String,Customer,Seat)",
      "Controller.CineplexManager.logBooking(BookingHistory)",
      "Controller.CineplexManager.updateShowtime()",
      "Controller.CineplexManager.updateMovieListing()",
      "View.moviegoer.Payment.destroy()",
    ],
  },
  "View.moviegoer.Payment.seat : Seat": {
    reference: ["Model.Seat"],
    contain: [],
    call: [],
  },
  "View.moviegoer.Payment.customer : Customer": {
    reference: ["Model.Customer"],
    contain: [],
    call: [],
  },
  "View.StaffView": {
    reference: [
      "View.View",
      "Controller.IOController",
      "Controller.CineplexManager",
      "View.staff.MovieListing",
      "View.staff.SystemSetting",
    ],
    contain: [
      "View.StaffView.StaffView()",
      "View.StaffView.start()",
      "View.StaffView.login()",
      "View.StaffView.displayMenu()",
      "View.StaffView.loggedIn : boolean",
    ],
    call: [],
  },
  "View.StaffView.StaffView()": {
    reference: ["View.StaffView.loggedIn : boolean"],
    contain: [],
    call: ["View.View.View()"],
  },
  "View.StaffView.start()": {
    reference: ["View.StaffView.loggedIn : boolean"],
    contain: [],
    call: ["View.StaffView.login()", "View.StaffView.displayMenu()"],
  },
  "View.StaffView.login()": {
    reference: ["View.StaffView.loggedIn : boolean"],
    contain: [],
    call: [
      "Controller.IOController.readString(String[])",
      "Controller.CineplexManager.authentication(String,String)",
      "View.StaffView.displayMenu()",
      "View.StaffView.destroy()",
    ],
  },
  "View.StaffView.displayMenu()": {
    reference: ["View.StaffView.loggedIn : boolean"],
    contain: [],
    call: [
      "Controller.IOController.printHeader(String)",
      "Controller.IOController.printMenu(String[])",
      "Controller.IOController.readChoice(int,int)",
      "View.staff.MovieListing.MovieListing()",
      "View.StaffView.intent(View,View)",
      "View.staff.SystemSetting.SystemSetting()",
      "View.StaffView.destroy()",
    ],
  },
  "Model.Constant.MovieStatus": {
    reference: ["Model.Constant.MovieStatus[]", "Model.Constant"],
    contain: [
      "Model.Constant.MovieStatus.values()",
      "Model.Constant.MovieStatus.valueOf(String)",
      "Model.Constant.MovieStatus.MovieStatus(String,int,String)",
      "Model.Constant.MovieStatus.toString()",
      "Model.Constant.MovieStatus.static {...}",
      "Model.Constant.MovieStatus.COMING_SOON : MovieStatus",
      "Model.Constant.MovieStatus.END_OF_SHOWING : MovieStatus",
      "Model.Constant.MovieStatus.NOW_SHOWING : MovieStatus",
      "Model.Constant.MovieStatus.status : String",
      "Model.Constant.MovieStatus.$VALUES : MovieStatus[]",
    ],
    call: [],
  },
  "Model.Constant.MovieStatus.values()": {
    reference: ["Model.Constant.MovieStatus.$VALUES : MovieStatus[]"],
    contain: [],
    call: ["Model.Constant.MovieStatus[].clone()"],
  },
  "Model.Constant.MovieStatus.MovieStatus(String,int,String)": {
    reference: ["Model.Constant.MovieStatus.status : String"],
    contain: [],
    call: [],
  },
  "Model.Constant.MovieStatus.toString()": {
    reference: ["Model.Constant.MovieStatus.status : String"],
    contain: [],
    call: [],
  },
  "Model.Constant.MovieStatus.static {...}": {
    reference: [
      "Model.Constant.MovieStatus.COMING_SOON : MovieStatus",
      "Model.Constant.MovieStatus.END_OF_SHOWING : MovieStatus",
      "Model.Constant.MovieStatus.NOW_SHOWING : MovieStatus",
      "Model.Constant.MovieStatus.$VALUES : MovieStatus[]",
    ],
    contain: [],
    call: ["Model.Constant.MovieStatus.MovieStatus(String,int,String)"],
  },
  "Model.Constant.MovieStatus.COMING_SOON : MovieStatus": {
    reference: ["Model.Constant.MovieStatus"],
    contain: [],
    call: [],
  },
  "Model.Constant.MovieStatus.END_OF_SHOWING : MovieStatus": {
    reference: ["Model.Constant.MovieStatus"],
    contain: [],
    call: [],
  },
  "Model.Constant.MovieStatus.NOW_SHOWING : MovieStatus": {
    reference: ["Model.Constant.MovieStatus"],
    contain: [],
    call: [],
  },
  "Model.Constant.MovieStatus.$VALUES : MovieStatus[]": {
    reference: ["Model.Constant.MovieStatus[]"],
    contain: [],
    call: [],
  },
  "View.MovieGoerView": {
    reference: [
      "View.View",
      "Controller.IOController",
      "View.moviegoer.MovieListing",
      "View.moviegoer.BookingHistoryView",
    ],
    contain: [
      "View.MovieGoerView.MovieGoerView()",
      "View.MovieGoerView.start()",
    ],
    call: [],
  },
  "View.MovieGoerView.MovieGoerView()": {
    reference: [],
    contain: [],
    call: ["View.View.View()"],
  },
  "View.MovieGoerView.start()": {
    reference: [],
    contain: [],
    call: [
      "Controller.IOController.printHeader(String)",
      "Controller.IOController.printMenu(String[])",
      "Controller.IOController.readChoice(int,int)",
      "View.moviegoer.MovieListing.MovieListing()",
      "View.MovieGoerView.intent(View,View)",
      "View.moviegoer.BookingHistoryView.BookingHistoryView()",
      "View.MovieGoerView.destroy()",
    ],
  },
  "View.moviegoer.BookingHistoryView": {
    reference: [
      "View.View",
      "Controller.IOController",
      "Controller.CineplexManager",
      "Model.BookingHistory",
    ],
    contain: [
      "View.moviegoer.BookingHistoryView.BookingHistoryView()",
      "View.moviegoer.BookingHistoryView.start()",
      "View.moviegoer.BookingHistoryView.displayMenu()",
    ],
    call: [],
  },
  "View.moviegoer.BookingHistoryView.BookingHistoryView()": {
    reference: [],
    contain: [],
    call: ["View.View.View()"],
  },
  "View.moviegoer.BookingHistoryView.start()": {
    reference: [],
    contain: [],
    call: ["View.moviegoer.BookingHistoryView.displayMenu()"],
  },
  "View.moviegoer.BookingHistoryView.displayMenu()": {
    reference: [],
    contain: [],
    call: [
      "Controller.IOController.printHeader(String)",
      "Controller.CineplexManager.getBookingHistory()",
      "Controller.IOController.readString(String[])",
      "View.moviegoer.BookingHistoryView.destroy()",
    ],
  },
};
