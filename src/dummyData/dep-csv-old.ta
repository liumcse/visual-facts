FACT TUPLE :
reference "org.apache.commons.csv.CSVRecordTest.EnumHeader" "org.apache.commons.csv.CSVRecordTest.EnumHeader[]"
reference "org.apache.commons.csv.CSVRecordTest.EnumHeader" "org.apache.commons.csv.CSVRecordTest"
reference "org.apache.commons.csv.CSVRecordTest.EnumHeader.values()" "org.apache.commons.csv.CSVRecordTest.EnumHeader.$VALUES : EnumHeader[]"
call "org.apache.commons.csv.CSVRecordTest.EnumHeader.values()" "org.apache.commons.csv.CSVRecordTest.EnumHeader[].clone()"
contain "org.apache.commons.csv.CSVRecordTest.EnumHeader" "org.apache.commons.csv.CSVRecordTest.EnumHeader.values()"
contain "org.apache.commons.csv.CSVRecordTest.EnumHeader" "org.apache.commons.csv.CSVRecordTest.EnumHeader.valueOf(String)"
reference "org.apache.commons.csv.CSVRecordTest.EnumHeader.EnumHeader(String,int,String)" "org.apache.commons.csv.CSVRecordTest.EnumHeader.number : String"
contain "org.apache.commons.csv.CSVRecordTest.EnumHeader" "org.apache.commons.csv.CSVRecordTest.EnumHeader.EnumHeader(String,int,String)"
reference "org.apache.commons.csv.CSVRecordTest.EnumHeader.toString()" "org.apache.commons.csv.CSVRecordTest.EnumHeader.number : String"
contain "org.apache.commons.csv.CSVRecordTest.EnumHeader" "org.apache.commons.csv.CSVRecordTest.EnumHeader.toString()"
call "org.apache.commons.csv.CSVRecordTest.EnumHeader.static {...}" "org.apache.commons.csv.CSVRecordTest.EnumHeader.EnumHeader(String,int,String)"
reference "org.apache.commons.csv.CSVRecordTest.EnumHeader.static {...}" "org.apache.commons.csv.CSVRecordTest.EnumHeader.FIRST : EnumHeader"
reference "org.apache.commons.csv.CSVRecordTest.EnumHeader.static {...}" "org.apache.commons.csv.CSVRecordTest.EnumHeader.SECOND : EnumHeader"
reference "org.apache.commons.csv.CSVRecordTest.EnumHeader.static {...}" "org.apache.commons.csv.CSVRecordTest.EnumHeader.THIRD : EnumHeader"
reference "org.apache.commons.csv.CSVRecordTest.EnumHeader.static {...}" "org.apache.commons.csv.CSVRecordTest.EnumHeader.$VALUES : EnumHeader[]"
contain "org.apache.commons.csv.CSVRecordTest.EnumHeader" "org.apache.commons.csv.CSVRecordTest.EnumHeader.static {...}"
reference "org.apache.commons.csv.CSVRecordTest.EnumHeader.FIRST : EnumHeader" "org.apache.commons.csv.CSVRecordTest.EnumHeader"
contain "org.apache.commons.csv.CSVRecordTest.EnumHeader" "org.apache.commons.csv.CSVRecordTest.EnumHeader.FIRST : EnumHeader"
reference "org.apache.commons.csv.CSVRecordTest.EnumHeader.SECOND : EnumHeader" "org.apache.commons.csv.CSVRecordTest.EnumHeader"
contain "org.apache.commons.csv.CSVRecordTest.EnumHeader" "org.apache.commons.csv.CSVRecordTest.EnumHeader.SECOND : EnumHeader"
reference "org.apache.commons.csv.CSVRecordTest.EnumHeader.THIRD : EnumHeader" "org.apache.commons.csv.CSVRecordTest.EnumHeader"
contain "org.apache.commons.csv.CSVRecordTest.EnumHeader" "org.apache.commons.csv.CSVRecordTest.EnumHeader.THIRD : EnumHeader"
contain "org.apache.commons.csv.CSVRecordTest.EnumHeader" "org.apache.commons.csv.CSVRecordTest.EnumHeader.number : String"
reference "org.apache.commons.csv.CSVRecordTest.EnumHeader.$VALUES : EnumHeader[]" "org.apache.commons.csv.CSVRecordTest.EnumHeader[]"
contain "org.apache.commons.csv.CSVRecordTest.EnumHeader" "org.apache.commons.csv.CSVRecordTest.EnumHeader.$VALUES : EnumHeader[]"
reference "org.apache.commons.csv.PerformanceTest" "org.apache.commons.io.IOUtils"
reference "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.Stats"
reference "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.ExtendedBufferedReader"
reference "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.CSVParserFactory"
reference "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.CSVParser"
reference "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.CSVFormat"
reference "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.Token"
reference "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.Lexer"
reference "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.Token.Type"
reference "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.CSVRecord"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.PerformanceTest()"
reference "org.apache.commons.csv.PerformanceTest.main(String[])" "org.apache.commons.csv.PerformanceTest.BIG_FILE : File"
call "org.apache.commons.csv.PerformanceTest.main(String[])" "org.apache.commons.io.IOUtils.copy(InputStream,OutputStream)"
reference "org.apache.commons.csv.PerformanceTest.main(String[])" "org.apache.commons.csv.PerformanceTest.max : int"
reference "org.apache.commons.csv.PerformanceTest.main(String[])" "org.apache.commons.csv.PerformanceTest.PROPS : String[]"
call "org.apache.commons.csv.PerformanceTest.main(String[])" "org.apache.commons.csv.PerformanceTest.testReadBigFile(boolean)"
call "org.apache.commons.csv.PerformanceTest.main(String[])" "org.apache.commons.csv.PerformanceTest.testParseCommonsCSV()"
call "org.apache.commons.csv.PerformanceTest.main(String[])" "org.apache.commons.csv.PerformanceTest.testParsePath()"
call "org.apache.commons.csv.PerformanceTest.main(String[])" "org.apache.commons.csv.PerformanceTest.testParsePathDoubleBuffering()"
call "org.apache.commons.csv.PerformanceTest.main(String[])" "org.apache.commons.csv.PerformanceTest.testParseURL()"
call "org.apache.commons.csv.PerformanceTest.main(String[])" "org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)"
call "org.apache.commons.csv.PerformanceTest.main(String[])" "org.apache.commons.csv.PerformanceTest.testExtendedBuffer(boolean)"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.main(String[])"
reference "org.apache.commons.csv.PerformanceTest.createReader()" "org.apache.commons.csv.PerformanceTest.BIG_FILE : File"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.createReader()"
reference "org.apache.commons.csv.PerformanceTest.show(String,PerformanceTest.Stats,long)" "org.apache.commons.csv.PerformanceTest.Stats.count : int"
reference "org.apache.commons.csv.PerformanceTest.show(String,PerformanceTest.Stats,long)" "org.apache.commons.csv.PerformanceTest.Stats.fields : int"
reference "org.apache.commons.csv.PerformanceTest.show(String,PerformanceTest.Stats,long)" "org.apache.commons.csv.PerformanceTest.elapsedTimes : long[]"
reference "org.apache.commons.csv.PerformanceTest.show(String,PerformanceTest.Stats,long)" "org.apache.commons.csv.PerformanceTest.num : int"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.show(String,PerformanceTest.Stats,long)"
reference "org.apache.commons.csv.PerformanceTest.show()" "org.apache.commons.csv.PerformanceTest.num : int"
reference "org.apache.commons.csv.PerformanceTest.show()" "org.apache.commons.csv.PerformanceTest.elapsedTimes : long[]"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.show()"
reference "org.apache.commons.csv.PerformanceTest.testReadBigFile(boolean)" "org.apache.commons.csv.PerformanceTest.max : int"
call "org.apache.commons.csv.PerformanceTest.testReadBigFile(boolean)" "org.apache.commons.csv.PerformanceTest.createReader()"
call "org.apache.commons.csv.PerformanceTest.testReadBigFile(boolean)" "org.apache.commons.csv.PerformanceTest.readAll(BufferedReader,boolean)"
call "org.apache.commons.csv.PerformanceTest.testReadBigFile(boolean)" "org.apache.commons.csv.PerformanceTest.show(String,PerformanceTest.Stats,long)"
call "org.apache.commons.csv.PerformanceTest.testReadBigFile(boolean)" "org.apache.commons.csv.PerformanceTest.show()"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.testReadBigFile(boolean)"
call "org.apache.commons.csv.PerformanceTest.readAll(BufferedReader,boolean)" "org.apache.commons.csv.PerformanceTest.Stats.Stats(int,int)"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.readAll(BufferedReader,boolean)"
reference "org.apache.commons.csv.PerformanceTest.testExtendedBuffer(boolean)" "org.apache.commons.csv.PerformanceTest.max : int"
call "org.apache.commons.csv.PerformanceTest.testExtendedBuffer(boolean)" "org.apache.commons.csv.PerformanceTest.createReader()"
call "org.apache.commons.csv.PerformanceTest.testExtendedBuffer(boolean)" "org.apache.commons.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader)"
call "org.apache.commons.csv.PerformanceTest.testExtendedBuffer(boolean)" "org.apache.commons.csv.ExtendedBufferedReader.read()"
call "org.apache.commons.csv.PerformanceTest.testExtendedBuffer(boolean)" "org.apache.commons.csv.ExtendedBufferedReader.close()"
call "org.apache.commons.csv.PerformanceTest.testExtendedBuffer(boolean)" "org.apache.commons.csv.PerformanceTest.Stats.Stats(int,int)"
call "org.apache.commons.csv.PerformanceTest.testExtendedBuffer(boolean)" "org.apache.commons.csv.PerformanceTest.show(String,PerformanceTest.Stats,long)"
call "org.apache.commons.csv.PerformanceTest.testExtendedBuffer(boolean)" "org.apache.commons.csv.PerformanceTest.show()"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.testExtendedBuffer(boolean)"
reference "org.apache.commons.csv.PerformanceTest.testParser(String,PerformanceTest.CSVParserFactory)" "org.apache.commons.csv.PerformanceTest.max : int"
call "org.apache.commons.csv.PerformanceTest.testParser(String,PerformanceTest.CSVParserFactory)" "org.apache.commons.csv.PerformanceTest.CSVParserFactory.createParser()"
call "org.apache.commons.csv.PerformanceTest.testParser(String,PerformanceTest.CSVParserFactory)" "org.apache.commons.csv.PerformanceTest.iterate(Iterable)"
call "org.apache.commons.csv.PerformanceTest.testParser(String,PerformanceTest.CSVParserFactory)" "org.apache.commons.csv.CSVParser.close()"
call "org.apache.commons.csv.PerformanceTest.testParser(String,PerformanceTest.CSVParserFactory)" "org.apache.commons.csv.PerformanceTest.show(String,PerformanceTest.Stats,long)"
call "org.apache.commons.csv.PerformanceTest.testParser(String,PerformanceTest.CSVParserFactory)" "org.apache.commons.csv.PerformanceTest.show()"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.testParser(String,PerformanceTest.CSVParserFactory)"
call "org.apache.commons.csv.PerformanceTest.testParseCommonsCSV()" "org.apache.commons.csv.PerformanceTest.testParser(String,PerformanceTest.CSVParserFactory)"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.testParseCommonsCSV()"
call "org.apache.commons.csv.PerformanceTest.testParsePath()" "org.apache.commons.csv.PerformanceTest.testParser(String,PerformanceTest.CSVParserFactory)"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.testParsePath()"
call "org.apache.commons.csv.PerformanceTest.testParsePathDoubleBuffering()" "org.apache.commons.csv.PerformanceTest.testParser(String,PerformanceTest.CSVParserFactory)"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.testParsePathDoubleBuffering()"
call "org.apache.commons.csv.PerformanceTest.testParseURL()" "org.apache.commons.csv.PerformanceTest.testParser(String,PerformanceTest.CSVParserFactory)"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.testParseURL()"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.getLexerCtor(String)"
call "org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)" "org.apache.commons.csv.Token.Token()"
reference "org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)" "org.apache.commons.csv.PerformanceTest.max : int"
call "org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)" "org.apache.commons.csv.PerformanceTest.createReader()"
call "org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)" "org.apache.commons.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader)"
call "org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)" "org.apache.commons.csv.PerformanceTest.createTestCSVLexer(String,ExtendedBufferedReader)"
call "org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)" "org.apache.commons.csv.Token.reset()"
call "org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)" "org.apache.commons.csv.Lexer.nextToken(Token)"
reference "org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)" "org.apache.commons.csv.PerformanceTest.1.$SwitchMap$org$apache$commons$csv$Token$Type : int[]"
reference "org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)" "org.apache.commons.csv.Token.type : Type"
call "org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)" "org.apache.commons.csv.Token.Type.ordinal()"
reference "org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)" "org.apache.commons.csv.Token.content : StringBuilder"
reference "org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)" "org.apache.commons.csv.Token.Type.EOF : Type"
call "org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)" "org.apache.commons.csv.Token.Type.equals(Object)"
call "org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)" "org.apache.commons.csv.PerformanceTest.Stats.Stats(int,int)"
call "org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)" "org.apache.commons.csv.Lexer.close()"
call "org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)" "org.apache.commons.csv.ExtendedBufferedReader.close()"
call "org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)" "org.apache.commons.csv.PerformanceTest.show(String,PerformanceTest.Stats,long)"
call "org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)" "org.apache.commons.csv.PerformanceTest.show()"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.testCSVLexer(boolean,String)"
call "org.apache.commons.csv.PerformanceTest.createTestCSVLexer(String,ExtendedBufferedReader)" "org.apache.commons.csv.PerformanceTest.getLexerCtor(String)"
reference "org.apache.commons.csv.PerformanceTest.createTestCSVLexer(String,ExtendedBufferedReader)" "org.apache.commons.csv.PerformanceTest.format : CSVFormat"
call "org.apache.commons.csv.PerformanceTest.createTestCSVLexer(String,ExtendedBufferedReader)" "org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.createTestCSVLexer(String,ExtendedBufferedReader)"
call "org.apache.commons.csv.PerformanceTest.iterate(Iterable)" "org.apache.commons.csv.CSVRecord.size()"
call "org.apache.commons.csv.PerformanceTest.iterate(Iterable)" "org.apache.commons.csv.PerformanceTest.Stats.Stats(int,int)"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.iterate(Iterable)"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.lambda$testParseURL$3()"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.lambda$testParsePathDoubleBuffering$2()"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.lambda$testParsePath$1()"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.lambda$testParseCommonsCSV$0()"
reference "org.apache.commons.csv.PerformanceTest.static {...}" "org.apache.commons.csv.PerformanceTest.PROPS : String[]"
reference "org.apache.commons.csv.PerformanceTest.static {...}" "org.apache.commons.csv.PerformanceTest.max : int"
reference "org.apache.commons.csv.PerformanceTest.static {...}" "org.apache.commons.csv.PerformanceTest.num : int"
reference "org.apache.commons.csv.PerformanceTest.static {...}" "org.apache.commons.csv.PerformanceTest.elapsedTimes : long[]"
reference "org.apache.commons.csv.PerformanceTest.static {...}" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
reference "org.apache.commons.csv.PerformanceTest.static {...}" "org.apache.commons.csv.PerformanceTest.format : CSVFormat"
reference "org.apache.commons.csv.PerformanceTest.static {...}" "org.apache.commons.csv.PerformanceTest.BIG_FILE : File"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.static {...}"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.PROPS : String[]"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.max : int"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.num : int"
reference "org.apache.commons.csv.PerformanceTest.elapsedTimes : long[]" "long[]"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.elapsedTimes : long[]"
reference "org.apache.commons.csv.PerformanceTest.format : CSVFormat" "org.apache.commons.csv.CSVFormat"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.format : CSVFormat"
contain "org.apache.commons.csv.PerformanceTest" "org.apache.commons.csv.PerformanceTest.BIG_FILE : File"
reference "org.apache.commons.csv.TokenMatchers.2" "org.hamcrest.TypeSafeDiagnosingMatcher"
reference "org.apache.commons.csv.TokenMatchers.2" "org.hamcrest.Description"
reference "org.apache.commons.csv.TokenMatchers.2" "org.apache.commons.csv.Token"
reference "org.apache.commons.csv.TokenMatchers.2" "org.apache.commons.csv.TokenMatchers"
reference "org.apache.commons.csv.TokenMatchers.2.{...}" "org.apache.commons.csv.TokenMatchers.2.val$expectedContent : String"
call "org.apache.commons.csv.TokenMatchers.2.{...}" "org.hamcrest.TypeSafeDiagnosingMatcher.TypeSafeDiagnosingMatcher()"
contain "org.apache.commons.csv.TokenMatchers.2" "org.apache.commons.csv.TokenMatchers.2.{...}"
call "org.apache.commons.csv.TokenMatchers.2.describeTo(Description)" "org.hamcrest.Description.appendText(String)"
reference "org.apache.commons.csv.TokenMatchers.2.describeTo(Description)" "org.apache.commons.csv.TokenMatchers.2.val$expectedContent : String"
call "org.apache.commons.csv.TokenMatchers.2.describeTo(Description)" "org.hamcrest.Description.appendValue(Object)"
contain "org.apache.commons.csv.TokenMatchers.2" "org.apache.commons.csv.TokenMatchers.2.describeTo(Description)"
call "org.apache.commons.csv.TokenMatchers.2.matchesSafely(Token,Description)" "org.hamcrest.Description.appendText(String)"
reference "org.apache.commons.csv.TokenMatchers.2.matchesSafely(Token,Description)" "org.apache.commons.csv.Token.content : StringBuilder"
call "org.apache.commons.csv.TokenMatchers.2.matchesSafely(Token,Description)" "org.hamcrest.Description.appendValue(Object)"
reference "org.apache.commons.csv.TokenMatchers.2.matchesSafely(Token,Description)" "org.apache.commons.csv.TokenMatchers.2.val$expectedContent : String"
contain "org.apache.commons.csv.TokenMatchers.2" "org.apache.commons.csv.TokenMatchers.2.matchesSafely(Token,Description)"
contain "org.apache.commons.csv.TokenMatchers.2" "org.apache.commons.csv.TokenMatchers.2.matchesSafely(Object,Description)"
contain "org.apache.commons.csv.TokenMatchers.2" "org.apache.commons.csv.TokenMatchers.2.val$expectedContent : String"
reference "org.apache.commons.csv.TokenMatchers.3" "org.hamcrest.TypeSafeDiagnosingMatcher"
reference "org.apache.commons.csv.TokenMatchers.3" "org.hamcrest.Description"
reference "org.apache.commons.csv.TokenMatchers.3" "org.apache.commons.csv.Token"
reference "org.apache.commons.csv.TokenMatchers.3" "org.apache.commons.csv.TokenMatchers"
call "org.apache.commons.csv.TokenMatchers.3.{...}" "org.hamcrest.TypeSafeDiagnosingMatcher.TypeSafeDiagnosingMatcher()"
contain "org.apache.commons.csv.TokenMatchers.3" "org.apache.commons.csv.TokenMatchers.3.{...}"
call "org.apache.commons.csv.TokenMatchers.3.describeTo(Description)" "org.hamcrest.Description.appendText(String)"
contain "org.apache.commons.csv.TokenMatchers.3" "org.apache.commons.csv.TokenMatchers.3.describeTo(Description)"
call "org.apache.commons.csv.TokenMatchers.3.matchesSafely(Token,Description)" "org.hamcrest.Description.appendText(String)"
reference "org.apache.commons.csv.TokenMatchers.3.matchesSafely(Token,Description)" "org.apache.commons.csv.Token.isReady : boolean"
contain "org.apache.commons.csv.TokenMatchers.3" "org.apache.commons.csv.TokenMatchers.3.matchesSafely(Token,Description)"
contain "org.apache.commons.csv.TokenMatchers.3" "org.apache.commons.csv.TokenMatchers.3.matchesSafely(Object,Description)"
reference "org.apache.commons.csv.Token" "org.apache.commons.csv.Token.Type"
reference "org.apache.commons.csv.Token.Token()" "org.apache.commons.csv.Token.Type.INVALID : Type"
reference "org.apache.commons.csv.Token.Token()" "org.apache.commons.csv.Token.type : Type"
reference "org.apache.commons.csv.Token.Token()" "org.apache.commons.csv.Token.content : StringBuilder"
contain "org.apache.commons.csv.Token" "org.apache.commons.csv.Token.Token()"
reference "org.apache.commons.csv.Token.reset()" "org.apache.commons.csv.Token.content : StringBuilder"
reference "org.apache.commons.csv.Token.reset()" "org.apache.commons.csv.Token.Type.INVALID : Type"
reference "org.apache.commons.csv.Token.reset()" "org.apache.commons.csv.Token.type : Type"
reference "org.apache.commons.csv.Token.reset()" "org.apache.commons.csv.Token.isReady : boolean"
contain "org.apache.commons.csv.Token" "org.apache.commons.csv.Token.reset()"
reference "org.apache.commons.csv.Token.toString()" "org.apache.commons.csv.Token.type : Type"
call "org.apache.commons.csv.Token.toString()" "org.apache.commons.csv.Token.Type.name()"
reference "org.apache.commons.csv.Token.toString()" "org.apache.commons.csv.Token.content : StringBuilder"
contain "org.apache.commons.csv.Token" "org.apache.commons.csv.Token.toString()"
contain "org.apache.commons.csv.Token" "org.apache.commons.csv.Token.INITIAL_TOKEN_LENGTH : int"
reference "org.apache.commons.csv.Token.type : Type" "org.apache.commons.csv.Token.Type"
contain "org.apache.commons.csv.Token" "org.apache.commons.csv.Token.type : Type"
contain "org.apache.commons.csv.Token" "org.apache.commons.csv.Token.content : StringBuilder"
contain "org.apache.commons.csv.Token" "org.apache.commons.csv.Token.isReady : boolean"
reference "org.apache.commons.csv.TokenMatchers.1" "org.hamcrest.TypeSafeDiagnosingMatcher"
reference "org.apache.commons.csv.TokenMatchers.1" "org.hamcrest.Description"
reference "org.apache.commons.csv.TokenMatchers.1" "org.apache.commons.csv.Token"
reference "org.apache.commons.csv.TokenMatchers.1" "org.apache.commons.csv.TokenMatchers"
reference "org.apache.commons.csv.TokenMatchers.1" "org.apache.commons.csv.Token.Type"
reference "org.apache.commons.csv.TokenMatchers.1.{...}" "org.apache.commons.csv.TokenMatchers.1.val$expectedType : Type"
call "org.apache.commons.csv.TokenMatchers.1.{...}" "org.hamcrest.TypeSafeDiagnosingMatcher.TypeSafeDiagnosingMatcher()"
contain "org.apache.commons.csv.TokenMatchers.1" "org.apache.commons.csv.TokenMatchers.1.{...}"
call "org.apache.commons.csv.TokenMatchers.1.describeTo(Description)" "org.hamcrest.Description.appendText(String)"
reference "org.apache.commons.csv.TokenMatchers.1.describeTo(Description)" "org.apache.commons.csv.TokenMatchers.1.val$expectedType : Type"
call "org.apache.commons.csv.TokenMatchers.1.describeTo(Description)" "org.hamcrest.Description.appendValue(Object)"
contain "org.apache.commons.csv.TokenMatchers.1" "org.apache.commons.csv.TokenMatchers.1.describeTo(Description)"
call "org.apache.commons.csv.TokenMatchers.1.matchesSafely(Token,Description)" "org.hamcrest.Description.appendText(String)"
reference "org.apache.commons.csv.TokenMatchers.1.matchesSafely(Token,Description)" "org.apache.commons.csv.Token.type : Type"
call "org.apache.commons.csv.TokenMatchers.1.matchesSafely(Token,Description)" "org.hamcrest.Description.appendValue(Object)"
reference "org.apache.commons.csv.TokenMatchers.1.matchesSafely(Token,Description)" "org.apache.commons.csv.TokenMatchers.1.val$expectedType : Type"
contain "org.apache.commons.csv.TokenMatchers.1" "org.apache.commons.csv.TokenMatchers.1.matchesSafely(Token,Description)"
contain "org.apache.commons.csv.TokenMatchers.1" "org.apache.commons.csv.TokenMatchers.1.matchesSafely(Object,Description)"
reference "org.apache.commons.csv.TokenMatchers.1.val$expectedType : Type" "org.apache.commons.csv.Token.Type"
contain "org.apache.commons.csv.TokenMatchers.1" "org.apache.commons.csv.TokenMatchers.1.val$expectedType : Type"
contain "org.apache.commons.csv.Constants" "org.apache.commons.csv.Constants.Constants()"
reference "org.apache.commons.csv.Constants.static {...}" "org.apache.commons.csv.Constants.DOUBLE_QUOTE_CHAR : Character"
contain "org.apache.commons.csv.Constants" "org.apache.commons.csv.Constants.static {...}"
contain "org.apache.commons.csv.Constants" "org.apache.commons.csv.Constants.BACKSLASH : char"
contain "org.apache.commons.csv.Constants" "org.apache.commons.csv.Constants.BACKSPACE : char"
contain "org.apache.commons.csv.Constants" "org.apache.commons.csv.Constants.COMMA : char"
contain "org.apache.commons.csv.Constants" "org.apache.commons.csv.Constants.COMMENT : char"
contain "org.apache.commons.csv.Constants" "org.apache.commons.csv.Constants.CR : char"
contain "org.apache.commons.csv.Constants" "org.apache.commons.csv.Constants.CRLF : String"
contain "org.apache.commons.csv.Constants" "org.apache.commons.csv.Constants.DOUBLE_QUOTE_CHAR : Character"
contain "org.apache.commons.csv.Constants" "org.apache.commons.csv.Constants.EMPTY : String"
contain "org.apache.commons.csv.Constants" "org.apache.commons.csv.Constants.END_OF_STREAM : int"
contain "org.apache.commons.csv.Constants" "org.apache.commons.csv.Constants.FF : char"
contain "org.apache.commons.csv.Constants" "org.apache.commons.csv.Constants.LF : char"
contain "org.apache.commons.csv.Constants" "org.apache.commons.csv.Constants.LINE_SEPARATOR : String"
contain "org.apache.commons.csv.Constants" "org.apache.commons.csv.Constants.NEXT_LINE : String"
contain "org.apache.commons.csv.Constants" "org.apache.commons.csv.Constants.PARAGRAPH_SEPARATOR : String"
contain "org.apache.commons.csv.Constants" "org.apache.commons.csv.Constants.PIPE : char"
contain "org.apache.commons.csv.Constants" "org.apache.commons.csv.Constants.RS : char"
contain "org.apache.commons.csv.Constants" "org.apache.commons.csv.Constants.SP : char"
contain "org.apache.commons.csv.Constants" "org.apache.commons.csv.Constants.TAB : char"
contain "org.apache.commons.csv.Constants" "org.apache.commons.csv.Constants.UNDEFINED : int"
contain "org.apache.commons.csv.Constants" "org.apache.commons.csv.Constants.US : char"
reference "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVParser"
reference "org.apache.commons.csv.CSVRecord.CSVRecord(CSVParser,String[],String,long,long)" "org.apache.commons.csv.CSVRecord.recordNumber : long"
reference "org.apache.commons.csv.CSVRecord.CSVRecord(CSVParser,String[],String,long,long)" "org.apache.commons.csv.CSVRecord.EMPTY_STRING_ARRAY : String[]"
reference "org.apache.commons.csv.CSVRecord.CSVRecord(CSVParser,String[],String,long,long)" "org.apache.commons.csv.CSVRecord.values : String[]"
reference "org.apache.commons.csv.CSVRecord.CSVRecord(CSVParser,String[],String,long,long)" "org.apache.commons.csv.CSVRecord.parser : CSVParser"
reference "org.apache.commons.csv.CSVRecord.CSVRecord(CSVParser,String[],String,long,long)" "org.apache.commons.csv.CSVRecord.comment : String"
reference "org.apache.commons.csv.CSVRecord.CSVRecord(CSVParser,String[],String,long,long)" "org.apache.commons.csv.CSVRecord.characterPosition : long"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.CSVRecord(CSVParser,String[],String,long,long)"
call "org.apache.commons.csv.CSVRecord.get(Enum)" "org.apache.commons.csv.CSVRecord.get(String)"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.get(Enum)"
reference "org.apache.commons.csv.CSVRecord.get(int)" "org.apache.commons.csv.CSVRecord.values : String[]"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.get(int)"
call "org.apache.commons.csv.CSVRecord.get(String)" "org.apache.commons.csv.CSVRecord.getHeaderMapRaw()"
reference "org.apache.commons.csv.CSVRecord.get(String)" "org.apache.commons.csv.CSVRecord.values : String[]"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.get(String)"
reference "org.apache.commons.csv.CSVRecord.getCharacterPosition()" "org.apache.commons.csv.CSVRecord.characterPosition : long"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.getCharacterPosition()"
reference "org.apache.commons.csv.CSVRecord.getComment()" "org.apache.commons.csv.CSVRecord.comment : String"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.getComment()"
reference "org.apache.commons.csv.CSVRecord.getHeaderMapRaw()" "org.apache.commons.csv.CSVRecord.parser : CSVParser"
call "org.apache.commons.csv.CSVRecord.getHeaderMapRaw()" "org.apache.commons.csv.CSVParser.getHeaderMapRaw()"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.getHeaderMapRaw()"
reference "org.apache.commons.csv.CSVRecord.getParser()" "org.apache.commons.csv.CSVRecord.parser : CSVParser"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.getParser()"
reference "org.apache.commons.csv.CSVRecord.getRecordNumber()" "org.apache.commons.csv.CSVRecord.recordNumber : long"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.getRecordNumber()"
reference "org.apache.commons.csv.CSVRecord.hasComment()" "org.apache.commons.csv.CSVRecord.comment : String"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.hasComment()"
call "org.apache.commons.csv.CSVRecord.isConsistent()" "org.apache.commons.csv.CSVRecord.getHeaderMapRaw()"
reference "org.apache.commons.csv.CSVRecord.isConsistent()" "org.apache.commons.csv.CSVRecord.values : String[]"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.isConsistent()"
call "org.apache.commons.csv.CSVRecord.isMapped(String)" "org.apache.commons.csv.CSVRecord.getHeaderMapRaw()"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.isMapped(String)"
call "org.apache.commons.csv.CSVRecord.isSet(String)" "org.apache.commons.csv.CSVRecord.isMapped(String)"
call "org.apache.commons.csv.CSVRecord.isSet(String)" "org.apache.commons.csv.CSVRecord.getHeaderMapRaw()"
reference "org.apache.commons.csv.CSVRecord.isSet(String)" "org.apache.commons.csv.CSVRecord.values : String[]"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.isSet(String)"
reference "org.apache.commons.csv.CSVRecord.isSet(int)" "org.apache.commons.csv.CSVRecord.values : String[]"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.isSet(int)"
call "org.apache.commons.csv.CSVRecord.iterator()" "org.apache.commons.csv.CSVRecord.toList()"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.iterator()"
call "org.apache.commons.csv.CSVRecord.putIn(Map)" "org.apache.commons.csv.CSVRecord.getHeaderMapRaw()"
reference "org.apache.commons.csv.CSVRecord.putIn(Map)" "org.apache.commons.csv.CSVRecord.values : String[]"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.putIn(Map)"
reference "org.apache.commons.csv.CSVRecord.size()" "org.apache.commons.csv.CSVRecord.values : String[]"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.size()"
reference "org.apache.commons.csv.CSVRecord.toList()" "org.apache.commons.csv.CSVRecord.values : String[]"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.toList()"
reference "org.apache.commons.csv.CSVRecord.toMap()" "org.apache.commons.csv.CSVRecord.values : String[]"
call "org.apache.commons.csv.CSVRecord.toMap()" "org.apache.commons.csv.CSVRecord.putIn(Map)"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.toMap()"
reference "org.apache.commons.csv.CSVRecord.toString()" "org.apache.commons.csv.CSVRecord.comment : String"
reference "org.apache.commons.csv.CSVRecord.toString()" "org.apache.commons.csv.CSVRecord.recordNumber : long"
reference "org.apache.commons.csv.CSVRecord.toString()" "org.apache.commons.csv.CSVRecord.values : String[]"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.toString()"
reference "org.apache.commons.csv.CSVRecord.values()" "org.apache.commons.csv.CSVRecord.values : String[]"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.values()"
reference "org.apache.commons.csv.CSVRecord.static {...}" "org.apache.commons.csv.CSVRecord.EMPTY_STRING_ARRAY : String[]"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.static {...}"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.EMPTY_STRING_ARRAY : String[]"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.serialVersionUID : long"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.characterPosition : long"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.comment : String"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.recordNumber : long"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.values : String[]"
reference "org.apache.commons.csv.CSVRecord.parser : CSVParser" "org.apache.commons.csv.CSVParser"
contain "org.apache.commons.csv.CSVRecord" "org.apache.commons.csv.CSVRecord.parser : CSVParser"
contain "org.apache.commons.csv.Assertions" "org.apache.commons.csv.Assertions.Assertions()"
contain "org.apache.commons.csv.Assertions" "org.apache.commons.csv.Assertions.notNull(Object,String)"
reference "org.apache.commons.csv.perf.PerformanceTest" "org.apache.commons.io.IOUtils"
reference "org.apache.commons.csv.perf.PerformanceTest" "org.apache.commons.csv.CSVFormat"
reference "org.apache.commons.csv.perf.PerformanceTest" "org.apache.commons.csv.CSVParser"
reference "org.apache.commons.csv.perf.PerformanceTest" "org.apache.commons.csv.CSVRecord"
reference "org.apache.commons.csv.perf.PerformanceTest.PerformanceTest()" "org.apache.commons.csv.perf.PerformanceTest.max : int"
contain "org.apache.commons.csv.perf.PerformanceTest" "org.apache.commons.csv.perf.PerformanceTest.PerformanceTest()"
reference "org.apache.commons.csv.perf.PerformanceTest.setUpClass()" "org.apache.commons.csv.perf.PerformanceTest.BIG_FILE : File"
call "org.apache.commons.csv.perf.PerformanceTest.setUpClass()" "org.apache.commons.io.IOUtils.copy(InputStream,OutputStream)"
contain "org.apache.commons.csv.perf.PerformanceTest" "org.apache.commons.csv.perf.PerformanceTest.setUpClass()"
reference "org.apache.commons.csv.perf.PerformanceTest.createBufferedReader()" "org.apache.commons.csv.perf.PerformanceTest.BIG_FILE : File"
contain "org.apache.commons.csv.perf.PerformanceTest" "org.apache.commons.csv.perf.PerformanceTest.createBufferedReader()"
reference "org.apache.commons.csv.perf.PerformanceTest.parse(Reader,boolean)" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.perf.PerformanceTest.parse(Reader,boolean)" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)"
call "org.apache.commons.csv.perf.PerformanceTest.parse(Reader,boolean)" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.perf.PerformanceTest.parse(Reader,boolean)" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.perf.PerformanceTest.parse(Reader,boolean)" "org.apache.commons.csv.CSVRecord.iterator()"
contain "org.apache.commons.csv.perf.PerformanceTest" "org.apache.commons.csv.perf.PerformanceTest.parse(Reader,boolean)"
contain "org.apache.commons.csv.perf.PerformanceTest" "org.apache.commons.csv.perf.PerformanceTest.println(String)"
contain "org.apache.commons.csv.perf.PerformanceTest" "org.apache.commons.csv.perf.PerformanceTest.readAll(BufferedReader)"
call "org.apache.commons.csv.perf.PerformanceTest.testParseBigFile(boolean)" "org.apache.commons.csv.perf.PerformanceTest.createBufferedReader()"
call "org.apache.commons.csv.perf.PerformanceTest.testParseBigFile(boolean)" "org.apache.commons.csv.perf.PerformanceTest.parse(Reader,boolean)"
call "org.apache.commons.csv.perf.PerformanceTest.testParseBigFile(boolean)" "org.apache.commons.csv.perf.PerformanceTest.println(String)"
contain "org.apache.commons.csv.perf.PerformanceTest" "org.apache.commons.csv.perf.PerformanceTest.testParseBigFile(boolean)"
call "org.apache.commons.csv.perf.PerformanceTest.testParseBigFileRepeat()" "org.apache.commons.csv.perf.PerformanceTest.testParseBigFile(boolean)"
call "org.apache.commons.csv.perf.PerformanceTest.testParseBigFileRepeat()" "org.apache.commons.csv.perf.PerformanceTest.println(String)"
contain "org.apache.commons.csv.perf.PerformanceTest" "org.apache.commons.csv.perf.PerformanceTest.testParseBigFileRepeat()"
call "org.apache.commons.csv.perf.PerformanceTest.testReadBigFile()" "org.apache.commons.csv.perf.PerformanceTest.createBufferedReader()"
call "org.apache.commons.csv.perf.PerformanceTest.testReadBigFile()" "org.apache.commons.csv.perf.PerformanceTest.readAll(BufferedReader)"
call "org.apache.commons.csv.perf.PerformanceTest.testReadBigFile()" "org.apache.commons.csv.perf.PerformanceTest.println(String)"
contain "org.apache.commons.csv.perf.PerformanceTest" "org.apache.commons.csv.perf.PerformanceTest.testReadBigFile()"
reference "org.apache.commons.csv.perf.PerformanceTest.static {...}" "org.apache.commons.csv.perf.PerformanceTest.BIG_FILE : File"
contain "org.apache.commons.csv.perf.PerformanceTest" "org.apache.commons.csv.perf.PerformanceTest.static {...}"
contain "org.apache.commons.csv.perf.PerformanceTest" "org.apache.commons.csv.perf.PerformanceTest.max : int"
contain "org.apache.commons.csv.perf.PerformanceTest" "org.apache.commons.csv.perf.PerformanceTest.BIG_FILE : File"
reference "org.apache.commons.csv.issues.JiraCsv164Test" "org.apache.commons.csv.CSVFormat"
reference "org.apache.commons.csv.issues.JiraCsv164Test" "org.apache.commons.csv.CSVPrinter"
contain "org.apache.commons.csv.issues.JiraCsv164Test" "org.apache.commons.csv.issues.JiraCsv164Test.JiraCsv164Test()"
reference "org.apache.commons.csv.issues.JiraCsv164Test.testJiraCsv154_withCommentMarker()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.issues.JiraCsv164Test.testJiraCsv154_withCommentMarker()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.issues.JiraCsv164Test.testJiraCsv154_withCommentMarker()" "org.apache.commons.csv.CSVFormat.withCommentMarker(char)"
call "org.apache.commons.csv.issues.JiraCsv164Test.testJiraCsv154_withCommentMarker()" "org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])"
call "org.apache.commons.csv.issues.JiraCsv164Test.testJiraCsv154_withCommentMarker()" "org.apache.commons.csv.CSVFormat.print(Appendable)"
call "org.apache.commons.csv.issues.JiraCsv164Test.testJiraCsv154_withCommentMarker()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.issues.JiraCsv164Test.testJiraCsv154_withCommentMarker()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.issues.JiraCsv164Test" "org.apache.commons.csv.issues.JiraCsv164Test.testJiraCsv154_withCommentMarker()"
reference "org.apache.commons.csv.issues.JiraCsv164Test.testJiraCsv154_withHeaderComments()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.issues.JiraCsv164Test.testJiraCsv154_withHeaderComments()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.issues.JiraCsv164Test.testJiraCsv154_withHeaderComments()" "org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])"
call "org.apache.commons.csv.issues.JiraCsv164Test.testJiraCsv154_withHeaderComments()" "org.apache.commons.csv.CSVFormat.withCommentMarker(char)"
call "org.apache.commons.csv.issues.JiraCsv164Test.testJiraCsv154_withHeaderComments()" "org.apache.commons.csv.CSVFormat.print(Appendable)"
call "org.apache.commons.csv.issues.JiraCsv164Test.testJiraCsv154_withHeaderComments()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.issues.JiraCsv164Test.testJiraCsv154_withHeaderComments()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.issues.JiraCsv164Test" "org.apache.commons.csv.issues.JiraCsv164Test.testJiraCsv154_withHeaderComments()"
reference "org.apache.commons.csv.TokenMatchers" "org.hamcrest.Matcher"
reference "org.apache.commons.csv.TokenMatchers" "org.hamcrest.core.AllOf"
reference "org.apache.commons.csv.TokenMatchers" "org.apache.commons.csv.Token.Type"
reference "org.apache.commons.csv.TokenMatchers" "org.apache.commons.csv.Token"
contain "org.apache.commons.csv.TokenMatchers" "org.apache.commons.csv.TokenMatchers.TokenMatchers()"
call "org.apache.commons.csv.TokenMatchers.hasType(Token.Type)" "org.apache.commons.csv.TokenMatchers.1.{...}"
contain "org.apache.commons.csv.TokenMatchers" "org.apache.commons.csv.TokenMatchers.hasType(Token.Type)"
call "org.apache.commons.csv.TokenMatchers.hasContent(String)" "org.apache.commons.csv.TokenMatchers.2.{...}"
contain "org.apache.commons.csv.TokenMatchers" "org.apache.commons.csv.TokenMatchers.hasContent(String)"
call "org.apache.commons.csv.TokenMatchers.isReady()" "org.apache.commons.csv.TokenMatchers.3.{...}"
contain "org.apache.commons.csv.TokenMatchers" "org.apache.commons.csv.TokenMatchers.isReady()"
call "org.apache.commons.csv.TokenMatchers.matches(Token.Type,String)" "org.apache.commons.csv.TokenMatchers.hasType(Token.Type)"
call "org.apache.commons.csv.TokenMatchers.matches(Token.Type,String)" "org.apache.commons.csv.TokenMatchers.hasContent(String)"
call "org.apache.commons.csv.TokenMatchers.matches(Token.Type,String)" "org.hamcrest.core.AllOf.allOf(Matcher[])"
contain "org.apache.commons.csv.TokenMatchers" "org.apache.commons.csv.TokenMatchers.matches(Token.Type,String)"
reference "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.Constants"
reference "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.Predefined"
reference "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVPrinter"
reference "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.QuoteMode"
reference "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVParser"
reference "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.IOUtils"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.isLineBreak(char)"
call "org.apache.commons.csv.CSVFormat.isLineBreak(Character)" "org.apache.commons.csv.CSVFormat.isLineBreak(char)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.isLineBreak(Character)"
call "org.apache.commons.csv.CSVFormat.newFormat(char)" "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.newFormat(char)"
call "org.apache.commons.csv.CSVFormat.valueOf(String)" "org.apache.commons.csv.CSVFormat.Predefined.valueOf(String)"
call "org.apache.commons.csv.CSVFormat.valueOf(String)" "org.apache.commons.csv.CSVFormat.Predefined.getFormat()"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.valueOf(String)"
reference "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)" "org.apache.commons.csv.CSVFormat.delimiter : char"
reference "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)" "org.apache.commons.csv.CSVFormat.quoteCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)" "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)" "org.apache.commons.csv.CSVFormat.commentMarker : Character"
reference "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)" "org.apache.commons.csv.CSVFormat.escapeCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)" "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean"
reference "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)" "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean"
reference "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)" "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean"
reference "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)" "org.apache.commons.csv.CSVFormat.recordSeparator : String"
reference "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)" "org.apache.commons.csv.CSVFormat.nullString : String"
call "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)" "org.apache.commons.csv.CSVFormat.toStringArray(Object[])"
reference "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)" "org.apache.commons.csv.CSVFormat.headerComments : String[]"
reference "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)" "org.apache.commons.csv.CSVFormat.header : String[]"
reference "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)" "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean"
reference "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)" "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean"
reference "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)" "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean"
reference "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)" "org.apache.commons.csv.CSVFormat.trim : boolean"
reference "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)" "org.apache.commons.csv.CSVFormat.autoFlush : boolean"
reference "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)" "org.apache.commons.csv.CSVFormat.quotedNullString : String"
reference "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)" "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean"
call "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)" "org.apache.commons.csv.CSVFormat.validate()"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)"
reference "org.apache.commons.csv.CSVFormat.equals(Object)" "org.apache.commons.csv.CSVFormat.delimiter : char"
reference "org.apache.commons.csv.CSVFormat.equals(Object)" "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean"
reference "org.apache.commons.csv.CSVFormat.equals(Object)" "org.apache.commons.csv.CSVFormat.autoFlush : boolean"
reference "org.apache.commons.csv.CSVFormat.equals(Object)" "org.apache.commons.csv.CSVFormat.trim : boolean"
reference "org.apache.commons.csv.CSVFormat.equals(Object)" "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean"
reference "org.apache.commons.csv.CSVFormat.equals(Object)" "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean"
reference "org.apache.commons.csv.CSVFormat.equals(Object)" "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean"
reference "org.apache.commons.csv.CSVFormat.equals(Object)" "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.equals(Object)" "org.apache.commons.csv.CSVFormat.quoteCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.equals(Object)" "org.apache.commons.csv.CSVFormat.commentMarker : Character"
reference "org.apache.commons.csv.CSVFormat.equals(Object)" "org.apache.commons.csv.CSVFormat.escapeCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.equals(Object)" "org.apache.commons.csv.CSVFormat.nullString : String"
reference "org.apache.commons.csv.CSVFormat.equals(Object)" "org.apache.commons.csv.CSVFormat.header : String[]"
reference "org.apache.commons.csv.CSVFormat.equals(Object)" "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean"
reference "org.apache.commons.csv.CSVFormat.equals(Object)" "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean"
reference "org.apache.commons.csv.CSVFormat.equals(Object)" "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean"
reference "org.apache.commons.csv.CSVFormat.equals(Object)" "org.apache.commons.csv.CSVFormat.recordSeparator : String"
reference "org.apache.commons.csv.CSVFormat.equals(Object)" "org.apache.commons.csv.CSVFormat.headerComments : String[]"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.equals(Object)"
call "org.apache.commons.csv.CSVFormat.format(Object[])" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVFormat.format(Object[])" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
call "org.apache.commons.csv.CSVFormat.format(Object[])" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.format(Object[])"
reference "org.apache.commons.csv.CSVFormat.getAllowDuplicateHeaderNames()" "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.getAllowDuplicateHeaderNames()"
reference "org.apache.commons.csv.CSVFormat.getAllowMissingColumnNames()" "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.getAllowMissingColumnNames()"
reference "org.apache.commons.csv.CSVFormat.getAutoFlush()" "org.apache.commons.csv.CSVFormat.autoFlush : boolean"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.getAutoFlush()"
reference "org.apache.commons.csv.CSVFormat.getCommentMarker()" "org.apache.commons.csv.CSVFormat.commentMarker : Character"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.getCommentMarker()"
reference "org.apache.commons.csv.CSVFormat.getDelimiter()" "org.apache.commons.csv.CSVFormat.delimiter : char"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.getDelimiter()"
reference "org.apache.commons.csv.CSVFormat.getEscapeCharacter()" "org.apache.commons.csv.CSVFormat.escapeCharacter : Character"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.getEscapeCharacter()"
reference "org.apache.commons.csv.CSVFormat.getHeader()" "org.apache.commons.csv.CSVFormat.header : String[]"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.getHeader()"
reference "org.apache.commons.csv.CSVFormat.getHeaderComments()" "org.apache.commons.csv.CSVFormat.headerComments : String[]"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.getHeaderComments()"
reference "org.apache.commons.csv.CSVFormat.getIgnoreEmptyLines()" "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.getIgnoreEmptyLines()"
reference "org.apache.commons.csv.CSVFormat.getIgnoreHeaderCase()" "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.getIgnoreHeaderCase()"
reference "org.apache.commons.csv.CSVFormat.getIgnoreSurroundingSpaces()" "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.getIgnoreSurroundingSpaces()"
reference "org.apache.commons.csv.CSVFormat.getNullString()" "org.apache.commons.csv.CSVFormat.nullString : String"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.getNullString()"
reference "org.apache.commons.csv.CSVFormat.getQuoteCharacter()" "org.apache.commons.csv.CSVFormat.quoteCharacter : Character"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.getQuoteCharacter()"
reference "org.apache.commons.csv.CSVFormat.getQuoteMode()" "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.getQuoteMode()"
reference "org.apache.commons.csv.CSVFormat.getRecordSeparator()" "org.apache.commons.csv.CSVFormat.recordSeparator : String"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.getRecordSeparator()"
reference "org.apache.commons.csv.CSVFormat.getSkipHeaderRecord()" "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.getSkipHeaderRecord()"
reference "org.apache.commons.csv.CSVFormat.getTrailingDelimiter()" "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.getTrailingDelimiter()"
reference "org.apache.commons.csv.CSVFormat.getTrim()" "org.apache.commons.csv.CSVFormat.trim : boolean"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.getTrim()"
reference "org.apache.commons.csv.CSVFormat.hashCode()" "org.apache.commons.csv.CSVFormat.delimiter : char"
reference "org.apache.commons.csv.CSVFormat.hashCode()" "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode"
call "org.apache.commons.csv.CSVFormat.hashCode()" "org.apache.commons.csv.QuoteMode.hashCode()"
reference "org.apache.commons.csv.CSVFormat.hashCode()" "org.apache.commons.csv.CSVFormat.quoteCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.hashCode()" "org.apache.commons.csv.CSVFormat.commentMarker : Character"
reference "org.apache.commons.csv.CSVFormat.hashCode()" "org.apache.commons.csv.CSVFormat.escapeCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.hashCode()" "org.apache.commons.csv.CSVFormat.nullString : String"
reference "org.apache.commons.csv.CSVFormat.hashCode()" "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean"
reference "org.apache.commons.csv.CSVFormat.hashCode()" "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean"
reference "org.apache.commons.csv.CSVFormat.hashCode()" "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean"
reference "org.apache.commons.csv.CSVFormat.hashCode()" "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean"
reference "org.apache.commons.csv.CSVFormat.hashCode()" "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean"
reference "org.apache.commons.csv.CSVFormat.hashCode()" "org.apache.commons.csv.CSVFormat.trim : boolean"
reference "org.apache.commons.csv.CSVFormat.hashCode()" "org.apache.commons.csv.CSVFormat.autoFlush : boolean"
reference "org.apache.commons.csv.CSVFormat.hashCode()" "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean"
reference "org.apache.commons.csv.CSVFormat.hashCode()" "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean"
reference "org.apache.commons.csv.CSVFormat.hashCode()" "org.apache.commons.csv.CSVFormat.recordSeparator : String"
reference "org.apache.commons.csv.CSVFormat.hashCode()" "org.apache.commons.csv.CSVFormat.header : String[]"
reference "org.apache.commons.csv.CSVFormat.hashCode()" "org.apache.commons.csv.CSVFormat.headerComments : String[]"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.hashCode()"
reference "org.apache.commons.csv.CSVFormat.isCommentMarkerSet()" "org.apache.commons.csv.CSVFormat.commentMarker : Character"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.isCommentMarkerSet()"
reference "org.apache.commons.csv.CSVFormat.isEscapeCharacterSet()" "org.apache.commons.csv.CSVFormat.escapeCharacter : Character"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.isEscapeCharacterSet()"
reference "org.apache.commons.csv.CSVFormat.isNullStringSet()" "org.apache.commons.csv.CSVFormat.nullString : String"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.isNullStringSet()"
reference "org.apache.commons.csv.CSVFormat.isQuoteCharacterSet()" "org.apache.commons.csv.CSVFormat.quoteCharacter : Character"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.isQuoteCharacterSet()"
call "org.apache.commons.csv.CSVFormat.parse(Reader)" "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.CSVFormat.print(Appendable)" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.print(Appendable)"
call "org.apache.commons.csv.CSVFormat.print(File,Charset)" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.print(File,Charset)"
reference "org.apache.commons.csv.CSVFormat.print(Object,Appendable,boolean)" "org.apache.commons.csv.CSVFormat.nullString : String"
reference "org.apache.commons.csv.CSVFormat.print(Object,Appendable,boolean)" "org.apache.commons.csv.QuoteMode.ALL : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.print(Object,Appendable,boolean)" "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.print(Object,Appendable,boolean)" "org.apache.commons.csv.CSVFormat.quotedNullString : String"
call "org.apache.commons.csv.CSVFormat.print(Object,Appendable,boolean)" "org.apache.commons.csv.CSVFormat.print(Reader,Appendable,boolean)"
call "org.apache.commons.csv.CSVFormat.print(Object,Appendable,boolean)" "org.apache.commons.csv.CSVFormat.getTrim()"
call "org.apache.commons.csv.CSVFormat.print(Object,Appendable,boolean)" "org.apache.commons.csv.CSVFormat.trim(CharSequence)"
call "org.apache.commons.csv.CSVFormat.print(Object,Appendable,boolean)" "org.apache.commons.csv.CSVFormat.print(Object,CharSequence,Appendable,boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.print(Object,Appendable,boolean)"
call "org.apache.commons.csv.CSVFormat.print(Object,CharSequence,Appendable,boolean)" "org.apache.commons.csv.CSVFormat.getDelimiter()"
call "org.apache.commons.csv.CSVFormat.print(Object,CharSequence,Appendable,boolean)" "org.apache.commons.csv.CSVFormat.isQuoteCharacterSet()"
call "org.apache.commons.csv.CSVFormat.print(Object,CharSequence,Appendable,boolean)" "org.apache.commons.csv.CSVFormat.printWithQuotes(Object,CharSequence,Appendable,boolean)"
call "org.apache.commons.csv.CSVFormat.print(Object,CharSequence,Appendable,boolean)" "org.apache.commons.csv.CSVFormat.isEscapeCharacterSet()"
call "org.apache.commons.csv.CSVFormat.print(Object,CharSequence,Appendable,boolean)" "org.apache.commons.csv.CSVFormat.printWithEscapes(CharSequence,Appendable)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.print(Object,CharSequence,Appendable,boolean)"
call "org.apache.commons.csv.CSVFormat.print(Path,Charset)" "org.apache.commons.csv.CSVFormat.print(Appendable)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.print(Path,Charset)"
call "org.apache.commons.csv.CSVFormat.print(Reader,Appendable,boolean)" "org.apache.commons.csv.CSVFormat.getDelimiter()"
call "org.apache.commons.csv.CSVFormat.print(Reader,Appendable,boolean)" "org.apache.commons.csv.CSVFormat.isQuoteCharacterSet()"
call "org.apache.commons.csv.CSVFormat.print(Reader,Appendable,boolean)" "org.apache.commons.csv.CSVFormat.printWithQuotes(Reader,Appendable)"
call "org.apache.commons.csv.CSVFormat.print(Reader,Appendable,boolean)" "org.apache.commons.csv.CSVFormat.isEscapeCharacterSet()"
call "org.apache.commons.csv.CSVFormat.print(Reader,Appendable,boolean)" "org.apache.commons.csv.CSVFormat.printWithEscapes(Reader,Appendable)"
call "org.apache.commons.csv.CSVFormat.print(Reader,Appendable,boolean)" "org.apache.commons.csv.IOUtils.copyLarge(Reader,Writer)"
call "org.apache.commons.csv.CSVFormat.print(Reader,Appendable,boolean)" "org.apache.commons.csv.IOUtils.copy(Reader,Appendable)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.print(Reader,Appendable,boolean)"
call "org.apache.commons.csv.CSVFormat.printer()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.printer()"
call "org.apache.commons.csv.CSVFormat.println(Appendable)" "org.apache.commons.csv.CSVFormat.getTrailingDelimiter()"
call "org.apache.commons.csv.CSVFormat.println(Appendable)" "org.apache.commons.csv.CSVFormat.getDelimiter()"
reference "org.apache.commons.csv.CSVFormat.println(Appendable)" "org.apache.commons.csv.CSVFormat.recordSeparator : String"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.println(Appendable)"
call "org.apache.commons.csv.CSVFormat.printRecord(Appendable,Object[])" "org.apache.commons.csv.CSVFormat.print(Object,Appendable,boolean)"
call "org.apache.commons.csv.CSVFormat.printRecord(Appendable,Object[])" "org.apache.commons.csv.CSVFormat.println(Appendable)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.printRecord(Appendable,Object[])"
call "org.apache.commons.csv.CSVFormat.printWithEscapes(CharSequence,Appendable)" "org.apache.commons.csv.CSVFormat.getDelimiter()"
call "org.apache.commons.csv.CSVFormat.printWithEscapes(CharSequence,Appendable)" "org.apache.commons.csv.CSVFormat.getEscapeCharacter()"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.printWithEscapes(CharSequence,Appendable)"
call "org.apache.commons.csv.CSVFormat.printWithEscapes(Reader,Appendable)" "org.apache.commons.csv.CSVFormat.getDelimiter()"
call "org.apache.commons.csv.CSVFormat.printWithEscapes(Reader,Appendable)" "org.apache.commons.csv.CSVFormat.getEscapeCharacter()"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.printWithEscapes(Reader,Appendable)"
call "org.apache.commons.csv.CSVFormat.printWithQuotes(Object,CharSequence,Appendable,boolean)" "org.apache.commons.csv.CSVFormat.getDelimiter()"
call "org.apache.commons.csv.CSVFormat.printWithQuotes(Object,CharSequence,Appendable,boolean)" "org.apache.commons.csv.CSVFormat.getQuoteCharacter()"
call "org.apache.commons.csv.CSVFormat.printWithQuotes(Object,CharSequence,Appendable,boolean)" "org.apache.commons.csv.CSVFormat.isEscapeCharacterSet()"
call "org.apache.commons.csv.CSVFormat.printWithQuotes(Object,CharSequence,Appendable,boolean)" "org.apache.commons.csv.CSVFormat.getEscapeCharacter()"
call "org.apache.commons.csv.CSVFormat.printWithQuotes(Object,CharSequence,Appendable,boolean)" "org.apache.commons.csv.CSVFormat.getQuoteMode()"
reference "org.apache.commons.csv.CSVFormat.printWithQuotes(Object,CharSequence,Appendable,boolean)" "org.apache.commons.csv.QuoteMode.MINIMAL : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.printWithQuotes(Object,CharSequence,Appendable,boolean)" "org.apache.commons.csv.CSVFormat.1.$SwitchMap$org$apache$commons$csv$QuoteMode : int[]"
call "org.apache.commons.csv.CSVFormat.printWithQuotes(Object,CharSequence,Appendable,boolean)" "org.apache.commons.csv.QuoteMode.ordinal()"
call "org.apache.commons.csv.CSVFormat.printWithQuotes(Object,CharSequence,Appendable,boolean)" "org.apache.commons.csv.CSVFormat.printWithEscapes(CharSequence,Appendable)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.printWithQuotes(Object,CharSequence,Appendable,boolean)"
call "org.apache.commons.csv.CSVFormat.printWithQuotes(Reader,Appendable)" "org.apache.commons.csv.CSVFormat.getQuoteMode()"
reference "org.apache.commons.csv.CSVFormat.printWithQuotes(Reader,Appendable)" "org.apache.commons.csv.QuoteMode.NONE : QuoteMode"
call "org.apache.commons.csv.CSVFormat.printWithQuotes(Reader,Appendable)" "org.apache.commons.csv.CSVFormat.printWithEscapes(Reader,Appendable)"
call "org.apache.commons.csv.CSVFormat.printWithQuotes(Reader,Appendable)" "org.apache.commons.csv.CSVFormat.getQuoteCharacter()"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.printWithQuotes(Reader,Appendable)"
reference "org.apache.commons.csv.CSVFormat.toString()" "org.apache.commons.csv.CSVFormat.delimiter : char"
call "org.apache.commons.csv.CSVFormat.toString()" "org.apache.commons.csv.CSVFormat.isEscapeCharacterSet()"
reference "org.apache.commons.csv.CSVFormat.toString()" "org.apache.commons.csv.CSVFormat.escapeCharacter : Character"
call "org.apache.commons.csv.CSVFormat.toString()" "org.apache.commons.csv.CSVFormat.isQuoteCharacterSet()"
reference "org.apache.commons.csv.CSVFormat.toString()" "org.apache.commons.csv.CSVFormat.quoteCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.toString()" "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode"
call "org.apache.commons.csv.CSVFormat.toString()" "org.apache.commons.csv.CSVFormat.isCommentMarkerSet()"
reference "org.apache.commons.csv.CSVFormat.toString()" "org.apache.commons.csv.CSVFormat.commentMarker : Character"
call "org.apache.commons.csv.CSVFormat.toString()" "org.apache.commons.csv.CSVFormat.isNullStringSet()"
reference "org.apache.commons.csv.CSVFormat.toString()" "org.apache.commons.csv.CSVFormat.nullString : String"
reference "org.apache.commons.csv.CSVFormat.toString()" "org.apache.commons.csv.CSVFormat.recordSeparator : String"
call "org.apache.commons.csv.CSVFormat.toString()" "org.apache.commons.csv.CSVFormat.getIgnoreEmptyLines()"
call "org.apache.commons.csv.CSVFormat.toString()" "org.apache.commons.csv.CSVFormat.getIgnoreSurroundingSpaces()"
call "org.apache.commons.csv.CSVFormat.toString()" "org.apache.commons.csv.CSVFormat.getIgnoreHeaderCase()"
reference "org.apache.commons.csv.CSVFormat.toString()" "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean"
reference "org.apache.commons.csv.CSVFormat.toString()" "org.apache.commons.csv.CSVFormat.headerComments : String[]"
reference "org.apache.commons.csv.CSVFormat.toString()" "org.apache.commons.csv.CSVFormat.header : String[]"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.toString()"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.toStringArray(Object[])"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.trim(CharSequence)"
reference "org.apache.commons.csv.CSVFormat.validate()" "org.apache.commons.csv.CSVFormat.delimiter : char"
call "org.apache.commons.csv.CSVFormat.validate()" "org.apache.commons.csv.CSVFormat.isLineBreak(char)"
reference "org.apache.commons.csv.CSVFormat.validate()" "org.apache.commons.csv.CSVFormat.quoteCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.validate()" "org.apache.commons.csv.CSVFormat.escapeCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.validate()" "org.apache.commons.csv.CSVFormat.commentMarker : Character"
reference "org.apache.commons.csv.CSVFormat.validate()" "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.validate()" "org.apache.commons.csv.QuoteMode.NONE : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.validate()" "org.apache.commons.csv.CSVFormat.header : String[]"
reference "org.apache.commons.csv.CSVFormat.validate()" "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.validate()"
call "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames()" "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames()"
reference "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)" "org.apache.commons.csv.CSVFormat.delimiter : char"
reference "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)" "org.apache.commons.csv.CSVFormat.quoteCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)" "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)" "org.apache.commons.csv.CSVFormat.commentMarker : Character"
reference "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)" "org.apache.commons.csv.CSVFormat.escapeCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)" "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean"
reference "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)" "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean"
reference "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)" "org.apache.commons.csv.CSVFormat.recordSeparator : String"
reference "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)" "org.apache.commons.csv.CSVFormat.nullString : String"
reference "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)" "org.apache.commons.csv.CSVFormat.headerComments : String[]"
reference "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)" "org.apache.commons.csv.CSVFormat.header : String[]"
reference "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)" "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean"
reference "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)" "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean"
reference "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)" "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean"
reference "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)" "org.apache.commons.csv.CSVFormat.trim : boolean"
reference "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)" "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean"
reference "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)" "org.apache.commons.csv.CSVFormat.autoFlush : boolean"
call "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)" "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)"
call "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames()" "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames()"
reference "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)" "org.apache.commons.csv.CSVFormat.delimiter : char"
reference "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)" "org.apache.commons.csv.CSVFormat.quoteCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)" "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)" "org.apache.commons.csv.CSVFormat.commentMarker : Character"
reference "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)" "org.apache.commons.csv.CSVFormat.escapeCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)" "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean"
reference "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)" "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean"
reference "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)" "org.apache.commons.csv.CSVFormat.recordSeparator : String"
reference "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)" "org.apache.commons.csv.CSVFormat.nullString : String"
reference "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)" "org.apache.commons.csv.CSVFormat.headerComments : String[]"
reference "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)" "org.apache.commons.csv.CSVFormat.header : String[]"
reference "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)" "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean"
reference "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)" "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean"
reference "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)" "org.apache.commons.csv.CSVFormat.trim : boolean"
reference "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)" "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean"
reference "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)" "org.apache.commons.csv.CSVFormat.autoFlush : boolean"
reference "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)" "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean"
call "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)" "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)"
reference "org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)" "org.apache.commons.csv.CSVFormat.delimiter : char"
reference "org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)" "org.apache.commons.csv.CSVFormat.quoteCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)" "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)" "org.apache.commons.csv.CSVFormat.commentMarker : Character"
reference "org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)" "org.apache.commons.csv.CSVFormat.escapeCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)" "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean"
reference "org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)" "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean"
reference "org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)" "org.apache.commons.csv.CSVFormat.recordSeparator : String"
reference "org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)" "org.apache.commons.csv.CSVFormat.nullString : String"
reference "org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)" "org.apache.commons.csv.CSVFormat.headerComments : String[]"
reference "org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)" "org.apache.commons.csv.CSVFormat.header : String[]"
reference "org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)" "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean"
reference "org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)" "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean"
reference "org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)" "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean"
reference "org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)" "org.apache.commons.csv.CSVFormat.trim : boolean"
reference "org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)" "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean"
reference "org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)" "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean"
call "org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)" "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)"
call "org.apache.commons.csv.CSVFormat.withCommentMarker(char)" "org.apache.commons.csv.CSVFormat.withCommentMarker(Character)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withCommentMarker(char)"
call "org.apache.commons.csv.CSVFormat.withCommentMarker(Character)" "org.apache.commons.csv.CSVFormat.isLineBreak(Character)"
reference "org.apache.commons.csv.CSVFormat.withCommentMarker(Character)" "org.apache.commons.csv.CSVFormat.delimiter : char"
reference "org.apache.commons.csv.CSVFormat.withCommentMarker(Character)" "org.apache.commons.csv.CSVFormat.quoteCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withCommentMarker(Character)" "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.withCommentMarker(Character)" "org.apache.commons.csv.CSVFormat.escapeCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withCommentMarker(Character)" "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean"
reference "org.apache.commons.csv.CSVFormat.withCommentMarker(Character)" "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean"
reference "org.apache.commons.csv.CSVFormat.withCommentMarker(Character)" "org.apache.commons.csv.CSVFormat.recordSeparator : String"
reference "org.apache.commons.csv.CSVFormat.withCommentMarker(Character)" "org.apache.commons.csv.CSVFormat.nullString : String"
reference "org.apache.commons.csv.CSVFormat.withCommentMarker(Character)" "org.apache.commons.csv.CSVFormat.headerComments : String[]"
reference "org.apache.commons.csv.CSVFormat.withCommentMarker(Character)" "org.apache.commons.csv.CSVFormat.header : String[]"
reference "org.apache.commons.csv.CSVFormat.withCommentMarker(Character)" "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean"
reference "org.apache.commons.csv.CSVFormat.withCommentMarker(Character)" "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean"
reference "org.apache.commons.csv.CSVFormat.withCommentMarker(Character)" "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean"
reference "org.apache.commons.csv.CSVFormat.withCommentMarker(Character)" "org.apache.commons.csv.CSVFormat.trim : boolean"
reference "org.apache.commons.csv.CSVFormat.withCommentMarker(Character)" "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean"
reference "org.apache.commons.csv.CSVFormat.withCommentMarker(Character)" "org.apache.commons.csv.CSVFormat.autoFlush : boolean"
reference "org.apache.commons.csv.CSVFormat.withCommentMarker(Character)" "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean"
call "org.apache.commons.csv.CSVFormat.withCommentMarker(Character)" "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withCommentMarker(Character)"
call "org.apache.commons.csv.CSVFormat.withDelimiter(char)" "org.apache.commons.csv.CSVFormat.isLineBreak(char)"
reference "org.apache.commons.csv.CSVFormat.withDelimiter(char)" "org.apache.commons.csv.CSVFormat.quoteCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withDelimiter(char)" "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.withDelimiter(char)" "org.apache.commons.csv.CSVFormat.commentMarker : Character"
reference "org.apache.commons.csv.CSVFormat.withDelimiter(char)" "org.apache.commons.csv.CSVFormat.escapeCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withDelimiter(char)" "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean"
reference "org.apache.commons.csv.CSVFormat.withDelimiter(char)" "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean"
reference "org.apache.commons.csv.CSVFormat.withDelimiter(char)" "org.apache.commons.csv.CSVFormat.recordSeparator : String"
reference "org.apache.commons.csv.CSVFormat.withDelimiter(char)" "org.apache.commons.csv.CSVFormat.nullString : String"
reference "org.apache.commons.csv.CSVFormat.withDelimiter(char)" "org.apache.commons.csv.CSVFormat.headerComments : String[]"
reference "org.apache.commons.csv.CSVFormat.withDelimiter(char)" "org.apache.commons.csv.CSVFormat.header : String[]"
reference "org.apache.commons.csv.CSVFormat.withDelimiter(char)" "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean"
reference "org.apache.commons.csv.CSVFormat.withDelimiter(char)" "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean"
reference "org.apache.commons.csv.CSVFormat.withDelimiter(char)" "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean"
reference "org.apache.commons.csv.CSVFormat.withDelimiter(char)" "org.apache.commons.csv.CSVFormat.trim : boolean"
reference "org.apache.commons.csv.CSVFormat.withDelimiter(char)" "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean"
reference "org.apache.commons.csv.CSVFormat.withDelimiter(char)" "org.apache.commons.csv.CSVFormat.autoFlush : boolean"
reference "org.apache.commons.csv.CSVFormat.withDelimiter(char)" "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean"
call "org.apache.commons.csv.CSVFormat.withDelimiter(char)" "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withDelimiter(char)"
call "org.apache.commons.csv.CSVFormat.withEscape(char)" "org.apache.commons.csv.CSVFormat.withEscape(Character)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withEscape(char)"
call "org.apache.commons.csv.CSVFormat.withEscape(Character)" "org.apache.commons.csv.CSVFormat.isLineBreak(Character)"
reference "org.apache.commons.csv.CSVFormat.withEscape(Character)" "org.apache.commons.csv.CSVFormat.delimiter : char"
reference "org.apache.commons.csv.CSVFormat.withEscape(Character)" "org.apache.commons.csv.CSVFormat.quoteCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withEscape(Character)" "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.withEscape(Character)" "org.apache.commons.csv.CSVFormat.commentMarker : Character"
reference "org.apache.commons.csv.CSVFormat.withEscape(Character)" "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean"
reference "org.apache.commons.csv.CSVFormat.withEscape(Character)" "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean"
reference "org.apache.commons.csv.CSVFormat.withEscape(Character)" "org.apache.commons.csv.CSVFormat.recordSeparator : String"
reference "org.apache.commons.csv.CSVFormat.withEscape(Character)" "org.apache.commons.csv.CSVFormat.nullString : String"
reference "org.apache.commons.csv.CSVFormat.withEscape(Character)" "org.apache.commons.csv.CSVFormat.headerComments : String[]"
reference "org.apache.commons.csv.CSVFormat.withEscape(Character)" "org.apache.commons.csv.CSVFormat.header : String[]"
reference "org.apache.commons.csv.CSVFormat.withEscape(Character)" "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean"
reference "org.apache.commons.csv.CSVFormat.withEscape(Character)" "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean"
reference "org.apache.commons.csv.CSVFormat.withEscape(Character)" "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean"
reference "org.apache.commons.csv.CSVFormat.withEscape(Character)" "org.apache.commons.csv.CSVFormat.trim : boolean"
reference "org.apache.commons.csv.CSVFormat.withEscape(Character)" "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean"
reference "org.apache.commons.csv.CSVFormat.withEscape(Character)" "org.apache.commons.csv.CSVFormat.autoFlush : boolean"
reference "org.apache.commons.csv.CSVFormat.withEscape(Character)" "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean"
call "org.apache.commons.csv.CSVFormat.withEscape(Character)" "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withEscape(Character)"
call "org.apache.commons.csv.CSVFormat.withFirstRecordAsHeader()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVFormat.withFirstRecordAsHeader()" "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord()"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withFirstRecordAsHeader()"
call "org.apache.commons.csv.CSVFormat.withHeader(Class)" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withHeader(Class)"
call "org.apache.commons.csv.CSVFormat.withHeader(ResultSet)" "org.apache.commons.csv.CSVFormat.withHeader(ResultSetMetaData)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withHeader(ResultSet)"
call "org.apache.commons.csv.CSVFormat.withHeader(ResultSetMetaData)" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withHeader(ResultSetMetaData)"
reference "org.apache.commons.csv.CSVFormat.withHeader(String[])" "org.apache.commons.csv.CSVFormat.delimiter : char"
reference "org.apache.commons.csv.CSVFormat.withHeader(String[])" "org.apache.commons.csv.CSVFormat.quoteCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withHeader(String[])" "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.withHeader(String[])" "org.apache.commons.csv.CSVFormat.commentMarker : Character"
reference "org.apache.commons.csv.CSVFormat.withHeader(String[])" "org.apache.commons.csv.CSVFormat.escapeCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withHeader(String[])" "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean"
reference "org.apache.commons.csv.CSVFormat.withHeader(String[])" "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean"
reference "org.apache.commons.csv.CSVFormat.withHeader(String[])" "org.apache.commons.csv.CSVFormat.recordSeparator : String"
reference "org.apache.commons.csv.CSVFormat.withHeader(String[])" "org.apache.commons.csv.CSVFormat.nullString : String"
reference "org.apache.commons.csv.CSVFormat.withHeader(String[])" "org.apache.commons.csv.CSVFormat.headerComments : String[]"
reference "org.apache.commons.csv.CSVFormat.withHeader(String[])" "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean"
reference "org.apache.commons.csv.CSVFormat.withHeader(String[])" "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean"
reference "org.apache.commons.csv.CSVFormat.withHeader(String[])" "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean"
reference "org.apache.commons.csv.CSVFormat.withHeader(String[])" "org.apache.commons.csv.CSVFormat.trim : boolean"
reference "org.apache.commons.csv.CSVFormat.withHeader(String[])" "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean"
reference "org.apache.commons.csv.CSVFormat.withHeader(String[])" "org.apache.commons.csv.CSVFormat.autoFlush : boolean"
reference "org.apache.commons.csv.CSVFormat.withHeader(String[])" "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean"
call "org.apache.commons.csv.CSVFormat.withHeader(String[])" "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
reference "org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])" "org.apache.commons.csv.CSVFormat.delimiter : char"
reference "org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])" "org.apache.commons.csv.CSVFormat.quoteCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])" "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])" "org.apache.commons.csv.CSVFormat.commentMarker : Character"
reference "org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])" "org.apache.commons.csv.CSVFormat.escapeCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])" "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean"
reference "org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])" "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean"
reference "org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])" "org.apache.commons.csv.CSVFormat.recordSeparator : String"
reference "org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])" "org.apache.commons.csv.CSVFormat.nullString : String"
reference "org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])" "org.apache.commons.csv.CSVFormat.header : String[]"
reference "org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])" "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean"
reference "org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])" "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean"
reference "org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])" "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean"
reference "org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])" "org.apache.commons.csv.CSVFormat.trim : boolean"
reference "org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])" "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean"
reference "org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])" "org.apache.commons.csv.CSVFormat.autoFlush : boolean"
reference "org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])" "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean"
call "org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])" "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])"
call "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines()" "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines()"
reference "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)" "org.apache.commons.csv.CSVFormat.delimiter : char"
reference "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)" "org.apache.commons.csv.CSVFormat.quoteCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)" "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)" "org.apache.commons.csv.CSVFormat.commentMarker : Character"
reference "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)" "org.apache.commons.csv.CSVFormat.escapeCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)" "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean"
reference "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)" "org.apache.commons.csv.CSVFormat.recordSeparator : String"
reference "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)" "org.apache.commons.csv.CSVFormat.nullString : String"
reference "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)" "org.apache.commons.csv.CSVFormat.headerComments : String[]"
reference "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)" "org.apache.commons.csv.CSVFormat.header : String[]"
reference "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)" "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean"
reference "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)" "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean"
reference "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)" "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean"
reference "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)" "org.apache.commons.csv.CSVFormat.trim : boolean"
reference "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)" "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean"
reference "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)" "org.apache.commons.csv.CSVFormat.autoFlush : boolean"
reference "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)" "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean"
call "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)" "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)"
call "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase()" "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase()"
reference "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)" "org.apache.commons.csv.CSVFormat.delimiter : char"
reference "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)" "org.apache.commons.csv.CSVFormat.quoteCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)" "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)" "org.apache.commons.csv.CSVFormat.commentMarker : Character"
reference "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)" "org.apache.commons.csv.CSVFormat.escapeCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)" "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean"
reference "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)" "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean"
reference "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)" "org.apache.commons.csv.CSVFormat.recordSeparator : String"
reference "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)" "org.apache.commons.csv.CSVFormat.nullString : String"
reference "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)" "org.apache.commons.csv.CSVFormat.headerComments : String[]"
reference "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)" "org.apache.commons.csv.CSVFormat.header : String[]"
reference "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)" "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean"
reference "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)" "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean"
reference "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)" "org.apache.commons.csv.CSVFormat.trim : boolean"
reference "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)" "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean"
reference "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)" "org.apache.commons.csv.CSVFormat.autoFlush : boolean"
reference "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)" "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean"
call "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)" "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase(boolean)"
call "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces()" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces()"
reference "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)" "org.apache.commons.csv.CSVFormat.delimiter : char"
reference "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)" "org.apache.commons.csv.CSVFormat.quoteCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)" "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)" "org.apache.commons.csv.CSVFormat.commentMarker : Character"
reference "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)" "org.apache.commons.csv.CSVFormat.escapeCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)" "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean"
reference "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)" "org.apache.commons.csv.CSVFormat.recordSeparator : String"
reference "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)" "org.apache.commons.csv.CSVFormat.nullString : String"
reference "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)" "org.apache.commons.csv.CSVFormat.headerComments : String[]"
reference "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)" "org.apache.commons.csv.CSVFormat.header : String[]"
reference "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)" "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean"
reference "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)" "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean"
reference "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)" "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean"
reference "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)" "org.apache.commons.csv.CSVFormat.trim : boolean"
reference "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)" "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean"
reference "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)" "org.apache.commons.csv.CSVFormat.autoFlush : boolean"
reference "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)" "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean"
call "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)" "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)"
reference "org.apache.commons.csv.CSVFormat.withNullString(String)" "org.apache.commons.csv.CSVFormat.delimiter : char"
reference "org.apache.commons.csv.CSVFormat.withNullString(String)" "org.apache.commons.csv.CSVFormat.quoteCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withNullString(String)" "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.withNullString(String)" "org.apache.commons.csv.CSVFormat.commentMarker : Character"
reference "org.apache.commons.csv.CSVFormat.withNullString(String)" "org.apache.commons.csv.CSVFormat.escapeCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withNullString(String)" "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean"
reference "org.apache.commons.csv.CSVFormat.withNullString(String)" "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean"
reference "org.apache.commons.csv.CSVFormat.withNullString(String)" "org.apache.commons.csv.CSVFormat.recordSeparator : String"
reference "org.apache.commons.csv.CSVFormat.withNullString(String)" "org.apache.commons.csv.CSVFormat.headerComments : String[]"
reference "org.apache.commons.csv.CSVFormat.withNullString(String)" "org.apache.commons.csv.CSVFormat.header : String[]"
reference "org.apache.commons.csv.CSVFormat.withNullString(String)" "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean"
reference "org.apache.commons.csv.CSVFormat.withNullString(String)" "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean"
reference "org.apache.commons.csv.CSVFormat.withNullString(String)" "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean"
reference "org.apache.commons.csv.CSVFormat.withNullString(String)" "org.apache.commons.csv.CSVFormat.trim : boolean"
reference "org.apache.commons.csv.CSVFormat.withNullString(String)" "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean"
reference "org.apache.commons.csv.CSVFormat.withNullString(String)" "org.apache.commons.csv.CSVFormat.autoFlush : boolean"
reference "org.apache.commons.csv.CSVFormat.withNullString(String)" "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean"
call "org.apache.commons.csv.CSVFormat.withNullString(String)" "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withNullString(String)"
call "org.apache.commons.csv.CSVFormat.withQuote(char)" "org.apache.commons.csv.CSVFormat.withQuote(Character)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withQuote(char)"
call "org.apache.commons.csv.CSVFormat.withQuote(Character)" "org.apache.commons.csv.CSVFormat.isLineBreak(Character)"
reference "org.apache.commons.csv.CSVFormat.withQuote(Character)" "org.apache.commons.csv.CSVFormat.delimiter : char"
reference "org.apache.commons.csv.CSVFormat.withQuote(Character)" "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.withQuote(Character)" "org.apache.commons.csv.CSVFormat.commentMarker : Character"
reference "org.apache.commons.csv.CSVFormat.withQuote(Character)" "org.apache.commons.csv.CSVFormat.escapeCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withQuote(Character)" "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean"
reference "org.apache.commons.csv.CSVFormat.withQuote(Character)" "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean"
reference "org.apache.commons.csv.CSVFormat.withQuote(Character)" "org.apache.commons.csv.CSVFormat.recordSeparator : String"
reference "org.apache.commons.csv.CSVFormat.withQuote(Character)" "org.apache.commons.csv.CSVFormat.nullString : String"
reference "org.apache.commons.csv.CSVFormat.withQuote(Character)" "org.apache.commons.csv.CSVFormat.headerComments : String[]"
reference "org.apache.commons.csv.CSVFormat.withQuote(Character)" "org.apache.commons.csv.CSVFormat.header : String[]"
reference "org.apache.commons.csv.CSVFormat.withQuote(Character)" "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean"
reference "org.apache.commons.csv.CSVFormat.withQuote(Character)" "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean"
reference "org.apache.commons.csv.CSVFormat.withQuote(Character)" "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean"
reference "org.apache.commons.csv.CSVFormat.withQuote(Character)" "org.apache.commons.csv.CSVFormat.trim : boolean"
reference "org.apache.commons.csv.CSVFormat.withQuote(Character)" "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean"
reference "org.apache.commons.csv.CSVFormat.withQuote(Character)" "org.apache.commons.csv.CSVFormat.autoFlush : boolean"
reference "org.apache.commons.csv.CSVFormat.withQuote(Character)" "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean"
call "org.apache.commons.csv.CSVFormat.withQuote(Character)" "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withQuote(Character)"
reference "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)" "org.apache.commons.csv.CSVFormat.delimiter : char"
reference "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)" "org.apache.commons.csv.CSVFormat.quoteCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)" "org.apache.commons.csv.CSVFormat.commentMarker : Character"
reference "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)" "org.apache.commons.csv.CSVFormat.escapeCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)" "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean"
reference "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)" "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean"
reference "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)" "org.apache.commons.csv.CSVFormat.recordSeparator : String"
reference "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)" "org.apache.commons.csv.CSVFormat.nullString : String"
reference "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)" "org.apache.commons.csv.CSVFormat.headerComments : String[]"
reference "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)" "org.apache.commons.csv.CSVFormat.header : String[]"
reference "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)" "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean"
reference "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)" "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean"
reference "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)" "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean"
reference "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)" "org.apache.commons.csv.CSVFormat.trim : boolean"
reference "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)" "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean"
reference "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)" "org.apache.commons.csv.CSVFormat.autoFlush : boolean"
reference "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)" "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean"
call "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)" "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)"
call "org.apache.commons.csv.CSVFormat.withRecordSeparator(char)" "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withRecordSeparator(char)"
reference "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)" "org.apache.commons.csv.CSVFormat.delimiter : char"
reference "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)" "org.apache.commons.csv.CSVFormat.quoteCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)" "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)" "org.apache.commons.csv.CSVFormat.commentMarker : Character"
reference "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)" "org.apache.commons.csv.CSVFormat.escapeCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)" "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean"
reference "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)" "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean"
reference "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)" "org.apache.commons.csv.CSVFormat.nullString : String"
reference "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)" "org.apache.commons.csv.CSVFormat.headerComments : String[]"
reference "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)" "org.apache.commons.csv.CSVFormat.header : String[]"
reference "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)" "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean"
reference "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)" "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean"
reference "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)" "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean"
reference "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)" "org.apache.commons.csv.CSVFormat.trim : boolean"
reference "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)" "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean"
reference "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)" "org.apache.commons.csv.CSVFormat.autoFlush : boolean"
reference "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)" "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean"
call "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)" "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)"
call "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord()" "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord()"
reference "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)" "org.apache.commons.csv.CSVFormat.delimiter : char"
reference "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)" "org.apache.commons.csv.CSVFormat.quoteCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)" "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)" "org.apache.commons.csv.CSVFormat.commentMarker : Character"
reference "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)" "org.apache.commons.csv.CSVFormat.escapeCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)" "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean"
reference "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)" "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean"
reference "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)" "org.apache.commons.csv.CSVFormat.recordSeparator : String"
reference "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)" "org.apache.commons.csv.CSVFormat.nullString : String"
reference "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)" "org.apache.commons.csv.CSVFormat.headerComments : String[]"
reference "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)" "org.apache.commons.csv.CSVFormat.header : String[]"
reference "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)" "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean"
reference "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)" "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean"
reference "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)" "org.apache.commons.csv.CSVFormat.trim : boolean"
reference "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)" "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean"
reference "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)" "org.apache.commons.csv.CSVFormat.autoFlush : boolean"
reference "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)" "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean"
call "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)" "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)"
call "org.apache.commons.csv.CSVFormat.withSystemRecordSeparator()" "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withSystemRecordSeparator()"
call "org.apache.commons.csv.CSVFormat.withTrailingDelimiter()" "org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withTrailingDelimiter()"
reference "org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)" "org.apache.commons.csv.CSVFormat.delimiter : char"
reference "org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)" "org.apache.commons.csv.CSVFormat.quoteCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)" "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)" "org.apache.commons.csv.CSVFormat.commentMarker : Character"
reference "org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)" "org.apache.commons.csv.CSVFormat.escapeCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)" "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean"
reference "org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)" "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean"
reference "org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)" "org.apache.commons.csv.CSVFormat.recordSeparator : String"
reference "org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)" "org.apache.commons.csv.CSVFormat.nullString : String"
reference "org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)" "org.apache.commons.csv.CSVFormat.headerComments : String[]"
reference "org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)" "org.apache.commons.csv.CSVFormat.header : String[]"
reference "org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)" "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean"
reference "org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)" "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean"
reference "org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)" "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean"
reference "org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)" "org.apache.commons.csv.CSVFormat.trim : boolean"
reference "org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)" "org.apache.commons.csv.CSVFormat.autoFlush : boolean"
reference "org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)" "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean"
call "org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)" "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withTrailingDelimiter(boolean)"
call "org.apache.commons.csv.CSVFormat.withTrim()" "org.apache.commons.csv.CSVFormat.withTrim(boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withTrim()"
reference "org.apache.commons.csv.CSVFormat.withTrim(boolean)" "org.apache.commons.csv.CSVFormat.delimiter : char"
reference "org.apache.commons.csv.CSVFormat.withTrim(boolean)" "org.apache.commons.csv.CSVFormat.quoteCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withTrim(boolean)" "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.withTrim(boolean)" "org.apache.commons.csv.CSVFormat.commentMarker : Character"
reference "org.apache.commons.csv.CSVFormat.withTrim(boolean)" "org.apache.commons.csv.CSVFormat.escapeCharacter : Character"
reference "org.apache.commons.csv.CSVFormat.withTrim(boolean)" "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean"
reference "org.apache.commons.csv.CSVFormat.withTrim(boolean)" "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean"
reference "org.apache.commons.csv.CSVFormat.withTrim(boolean)" "org.apache.commons.csv.CSVFormat.recordSeparator : String"
reference "org.apache.commons.csv.CSVFormat.withTrim(boolean)" "org.apache.commons.csv.CSVFormat.nullString : String"
reference "org.apache.commons.csv.CSVFormat.withTrim(boolean)" "org.apache.commons.csv.CSVFormat.headerComments : String[]"
reference "org.apache.commons.csv.CSVFormat.withTrim(boolean)" "org.apache.commons.csv.CSVFormat.header : String[]"
reference "org.apache.commons.csv.CSVFormat.withTrim(boolean)" "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean"
reference "org.apache.commons.csv.CSVFormat.withTrim(boolean)" "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean"
reference "org.apache.commons.csv.CSVFormat.withTrim(boolean)" "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean"
reference "org.apache.commons.csv.CSVFormat.withTrim(boolean)" "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean"
reference "org.apache.commons.csv.CSVFormat.withTrim(boolean)" "org.apache.commons.csv.CSVFormat.autoFlush : boolean"
reference "org.apache.commons.csv.CSVFormat.withTrim(boolean)" "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean"
call "org.apache.commons.csv.CSVFormat.withTrim(boolean)" "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.withTrim(boolean)"
reference "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.Constants.DOUBLE_QUOTE_CHAR : Character"
call "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,QuoteMode,Character,Character,boolean,boolean,String,String,Object[],String[],boolean,boolean,boolean,boolean,boolean,boolean,boolean)"
reference "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)"
call "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames()"
reference "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.CSVFormat.withDelimiter(char)"
call "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.CSVFormat.withEscape(char)"
call "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.CSVFormat.withQuote(Character)"
call "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.CSVFormat.withRecordSeparator(char)"
reference "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD : CSVFormat"
reference "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV : CSVFormat"
call "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.CSVFormat.withEscape(Character)"
reference "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.QuoteMode.MINIMAL : QuoteMode"
call "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)"
call "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)"
reference "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.CSVFormat.MONGODB_CSV : CSVFormat"
reference "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.CSVFormat.MONGODB_TSV : CSVFormat"
call "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.CSVFormat.withNullString(String)"
reference "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.QuoteMode.ALL_NON_NULL : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.CSVFormat.MYSQL : CSVFormat"
call "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.CSVFormat.withTrim()"
call "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.CSVFormat.withSystemRecordSeparator()"
reference "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.CSVFormat.ORACLE : CSVFormat"
reference "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV : CSVFormat"
reference "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT : CSVFormat"
reference "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.CSVFormat.RFC4180 : CSVFormat"
call "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces()"
reference "org.apache.commons.csv.CSVFormat.static {...}" "org.apache.commons.csv.CSVFormat.TDF : CSVFormat"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.static {...}"
reference "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat" "org.apache.commons.csv.CSVFormat"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
reference "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat" "org.apache.commons.csv.CSVFormat"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
reference "org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD : CSVFormat" "org.apache.commons.csv.CSVFormat"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD : CSVFormat"
reference "org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV : CSVFormat" "org.apache.commons.csv.CSVFormat"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV : CSVFormat"
reference "org.apache.commons.csv.CSVFormat.MONGODB_CSV : CSVFormat" "org.apache.commons.csv.CSVFormat"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.MONGODB_CSV : CSVFormat"
reference "org.apache.commons.csv.CSVFormat.MONGODB_TSV : CSVFormat" "org.apache.commons.csv.CSVFormat"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.MONGODB_TSV : CSVFormat"
reference "org.apache.commons.csv.CSVFormat.MYSQL : CSVFormat" "org.apache.commons.csv.CSVFormat"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.MYSQL : CSVFormat"
reference "org.apache.commons.csv.CSVFormat.ORACLE : CSVFormat" "org.apache.commons.csv.CSVFormat"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.ORACLE : CSVFormat"
reference "org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV : CSVFormat" "org.apache.commons.csv.CSVFormat"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV : CSVFormat"
reference "org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT : CSVFormat" "org.apache.commons.csv.CSVFormat"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT : CSVFormat"
reference "org.apache.commons.csv.CSVFormat.RFC4180 : CSVFormat" "org.apache.commons.csv.CSVFormat"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.RFC4180 : CSVFormat"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.serialVersionUID : long"
reference "org.apache.commons.csv.CSVFormat.TDF : CSVFormat" "org.apache.commons.csv.CSVFormat"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.TDF : CSVFormat"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.allowDuplicateHeaderNames : boolean"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.allowMissingColumnNames : boolean"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.autoFlush : boolean"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.commentMarker : Character"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.delimiter : char"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.escapeCharacter : Character"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.header : String[]"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.headerComments : String[]"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.ignoreEmptyLines : boolean"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.ignoreHeaderCase : boolean"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.ignoreSurroundingSpaces : boolean"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.nullString : String"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.quoteCharacter : Character"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.quotedNullString : String"
reference "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode" "org.apache.commons.csv.QuoteMode"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.quoteMode : QuoteMode"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.recordSeparator : String"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.skipHeaderRecord : boolean"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.trailingDelimiter : boolean"
contain "org.apache.commons.csv.CSVFormat" "org.apache.commons.csv.CSVFormat.trim : boolean"
reference "org.apache.commons.csv.issues.JiraCsv198Test" "org.apache.commons.csv.CSVFormat"
reference "org.apache.commons.csv.issues.JiraCsv198Test" "org.apache.commons.csv.CSVParser"
reference "org.apache.commons.csv.issues.JiraCsv198Test" "org.apache.commons.csv.CSVRecord"
contain "org.apache.commons.csv.issues.JiraCsv198Test" "org.apache.commons.csv.issues.JiraCsv198Test.JiraCsv198Test()"
reference "org.apache.commons.csv.issues.JiraCsv198Test.test()" "org.apache.commons.csv.issues.JiraCsv198Test.CSV_FORMAT : CSVFormat"
call "org.apache.commons.csv.issues.JiraCsv198Test.test()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.issues.JiraCsv198Test.test()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.issues.JiraCsv198Test.test()" "org.apache.commons.csv.CSVRecord.get(String)"
call "org.apache.commons.csv.issues.JiraCsv198Test.test()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.issues.JiraCsv198Test" "org.apache.commons.csv.issues.JiraCsv198Test.test()"
reference "org.apache.commons.csv.issues.JiraCsv198Test.static {...}" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.issues.JiraCsv198Test.static {...}" "org.apache.commons.csv.CSVFormat.withDelimiter(char)"
call "org.apache.commons.csv.issues.JiraCsv198Test.static {...}" "org.apache.commons.csv.CSVFormat.withFirstRecordAsHeader()"
reference "org.apache.commons.csv.issues.JiraCsv198Test.static {...}" "org.apache.commons.csv.issues.JiraCsv198Test.CSV_FORMAT : CSVFormat"
contain "org.apache.commons.csv.issues.JiraCsv198Test" "org.apache.commons.csv.issues.JiraCsv198Test.static {...}"
reference "org.apache.commons.csv.issues.JiraCsv198Test.CSV_FORMAT : CSVFormat" "org.apache.commons.csv.CSVFormat"
contain "org.apache.commons.csv.issues.JiraCsv198Test" "org.apache.commons.csv.issues.JiraCsv198Test.CSV_FORMAT : CSVFormat"
reference "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.Assertions"
reference "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.Token"
reference "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.Lexer"
reference "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.ExtendedBufferedReader"
reference "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.CSVRecordIterator"
reference "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.Headers"
reference "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVFormat"
reference "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVRecord"
reference "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.Token.Type"
reference "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.Constants"
call "org.apache.commons.csv.CSVParser.parse(File,Charset,CSVFormat)" "org.apache.commons.csv.Assertions.notNull(Object,String)"
call "org.apache.commons.csv.CSVParser.parse(File,Charset,CSVFormat)" "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.parse(File,Charset,CSVFormat)"
call "org.apache.commons.csv.CSVParser.parse(InputStream,Charset,CSVFormat)" "org.apache.commons.csv.Assertions.notNull(Object,String)"
call "org.apache.commons.csv.CSVParser.parse(InputStream,Charset,CSVFormat)" "org.apache.commons.csv.CSVParser.parse(Reader,CSVFormat)"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.parse(InputStream,Charset,CSVFormat)"
call "org.apache.commons.csv.CSVParser.parse(Path,Charset,CSVFormat)" "org.apache.commons.csv.Assertions.notNull(Object,String)"
call "org.apache.commons.csv.CSVParser.parse(Path,Charset,CSVFormat)" "org.apache.commons.csv.CSVParser.parse(InputStream,Charset,CSVFormat)"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.parse(Path,Charset,CSVFormat)"
call "org.apache.commons.csv.CSVParser.parse(Reader,CSVFormat)" "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.parse(Reader,CSVFormat)"
call "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)" "org.apache.commons.csv.Assertions.notNull(Object,String)"
call "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)" "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParser.parse(URL,Charset,CSVFormat)" "org.apache.commons.csv.Assertions.notNull(Object,String)"
call "org.apache.commons.csv.CSVParser.parse(URL,Charset,CSVFormat)" "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.parse(URL,Charset,CSVFormat)"
call "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)" "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)"
reference "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)" "org.apache.commons.csv.CSVParser.recordList : List"
call "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)" "org.apache.commons.csv.Token.Token()"
reference "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)" "org.apache.commons.csv.CSVParser.reusableToken : Token"
call "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)" "org.apache.commons.csv.Assertions.notNull(Object,String)"
reference "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)" "org.apache.commons.csv.CSVParser.format : CSVFormat"
call "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)" "org.apache.commons.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader)"
call "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)" "org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)"
reference "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)" "org.apache.commons.csv.CSVParser.lexer : Lexer"
call "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)" "org.apache.commons.csv.CSVParser.CSVRecordIterator.CSVRecordIterator()"
reference "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)" "org.apache.commons.csv.CSVParser.csvRecordIterator : CSVRecordIterator"
call "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)" "org.apache.commons.csv.CSVParser.createHeaders()"
reference "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)" "org.apache.commons.csv.CSVParser.Headers.headerMap : Map"
reference "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)" "org.apache.commons.csv.CSVParser.headerMap : Map"
reference "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)" "org.apache.commons.csv.CSVParser.Headers.headerNames : List"
reference "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)" "org.apache.commons.csv.CSVParser.headerNames : List"
reference "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)" "org.apache.commons.csv.CSVParser.characterOffset : long"
reference "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)" "org.apache.commons.csv.CSVParser.recordNumber : long"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)"
reference "org.apache.commons.csv.CSVParser.addRecordValue(boolean)" "org.apache.commons.csv.CSVParser.reusableToken : Token"
reference "org.apache.commons.csv.CSVParser.addRecordValue(boolean)" "org.apache.commons.csv.Token.content : StringBuilder"
reference "org.apache.commons.csv.CSVParser.addRecordValue(boolean)" "org.apache.commons.csv.CSVParser.format : CSVFormat"
call "org.apache.commons.csv.CSVParser.addRecordValue(boolean)" "org.apache.commons.csv.CSVFormat.getTrim()"
call "org.apache.commons.csv.CSVParser.addRecordValue(boolean)" "org.apache.commons.csv.CSVFormat.getTrailingDelimiter()"
call "org.apache.commons.csv.CSVParser.addRecordValue(boolean)" "org.apache.commons.csv.CSVFormat.getNullString()"
reference "org.apache.commons.csv.CSVParser.addRecordValue(boolean)" "org.apache.commons.csv.CSVParser.recordList : List"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.addRecordValue(boolean)"
reference "org.apache.commons.csv.CSVParser.close()" "org.apache.commons.csv.CSVParser.lexer : Lexer"
call "org.apache.commons.csv.CSVParser.close()" "org.apache.commons.csv.Lexer.close()"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.close()"
reference "org.apache.commons.csv.CSVParser.createEmptyHeaderMap()" "org.apache.commons.csv.CSVParser.format : CSVFormat"
call "org.apache.commons.csv.CSVParser.createEmptyHeaderMap()" "org.apache.commons.csv.CSVFormat.getIgnoreHeaderCase()"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.createEmptyHeaderMap()"
reference "org.apache.commons.csv.CSVParser.createHeaders()" "org.apache.commons.csv.CSVParser.format : CSVFormat"
call "org.apache.commons.csv.CSVParser.createHeaders()" "org.apache.commons.csv.CSVFormat.getHeader()"
call "org.apache.commons.csv.CSVParser.createHeaders()" "org.apache.commons.csv.CSVParser.createEmptyHeaderMap()"
call "org.apache.commons.csv.CSVParser.createHeaders()" "org.apache.commons.csv.CSVParser.nextRecord()"
call "org.apache.commons.csv.CSVParser.createHeaders()" "org.apache.commons.csv.CSVRecord.values()"
call "org.apache.commons.csv.CSVParser.createHeaders()" "org.apache.commons.csv.CSVFormat.getSkipHeaderRecord()"
call "org.apache.commons.csv.CSVParser.createHeaders()" "org.apache.commons.csv.CSVFormat.getAllowMissingColumnNames()"
call "org.apache.commons.csv.CSVParser.createHeaders()" "org.apache.commons.csv.CSVFormat.getAllowDuplicateHeaderNames()"
call "org.apache.commons.csv.CSVParser.createHeaders()" "org.apache.commons.csv.CSVParser.Headers.Headers(Map,List)"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.createHeaders()"
reference "org.apache.commons.csv.CSVParser.getCurrentLineNumber()" "org.apache.commons.csv.CSVParser.lexer : Lexer"
call "org.apache.commons.csv.CSVParser.getCurrentLineNumber()" "org.apache.commons.csv.Lexer.getCurrentLineNumber()"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.getCurrentLineNumber()"
reference "org.apache.commons.csv.CSVParser.getFirstEndOfLine()" "org.apache.commons.csv.CSVParser.lexer : Lexer"
call "org.apache.commons.csv.CSVParser.getFirstEndOfLine()" "org.apache.commons.csv.Lexer.getFirstEol()"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.getFirstEndOfLine()"
reference "org.apache.commons.csv.CSVParser.getHeaderMap()" "org.apache.commons.csv.CSVParser.headerMap : Map"
call "org.apache.commons.csv.CSVParser.getHeaderMap()" "org.apache.commons.csv.CSVParser.createEmptyHeaderMap()"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.getHeaderMap()"
reference "org.apache.commons.csv.CSVParser.getHeaderMapRaw()" "org.apache.commons.csv.CSVParser.headerMap : Map"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.getHeaderMapRaw()"
reference "org.apache.commons.csv.CSVParser.getHeaderNames()" "org.apache.commons.csv.CSVParser.headerNames : List"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.getHeaderNames()"
reference "org.apache.commons.csv.CSVParser.getRecordNumber()" "org.apache.commons.csv.CSVParser.recordNumber : long"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.getRecordNumber()"
call "org.apache.commons.csv.CSVParser.getRecords()" "org.apache.commons.csv.CSVParser.nextRecord()"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.getRecords()"
reference "org.apache.commons.csv.CSVParser.isClosed()" "org.apache.commons.csv.CSVParser.lexer : Lexer"
call "org.apache.commons.csv.CSVParser.isClosed()" "org.apache.commons.csv.Lexer.isClosed()"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.isClosed()"
reference "org.apache.commons.csv.CSVParser.iterator()" "org.apache.commons.csv.CSVParser.csvRecordIterator : CSVRecordIterator"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.iterator()"
reference "org.apache.commons.csv.CSVParser.nextRecord()" "org.apache.commons.csv.CSVParser.recordList : List"
reference "org.apache.commons.csv.CSVParser.nextRecord()" "org.apache.commons.csv.CSVParser.lexer : Lexer"
call "org.apache.commons.csv.CSVParser.nextRecord()" "org.apache.commons.csv.Lexer.getCharacterPosition()"
reference "org.apache.commons.csv.CSVParser.nextRecord()" "org.apache.commons.csv.CSVParser.characterOffset : long"
reference "org.apache.commons.csv.CSVParser.nextRecord()" "org.apache.commons.csv.CSVParser.reusableToken : Token"
call "org.apache.commons.csv.CSVParser.nextRecord()" "org.apache.commons.csv.Token.reset()"
call "org.apache.commons.csv.CSVParser.nextRecord()" "org.apache.commons.csv.Lexer.nextToken(Token)"
reference "org.apache.commons.csv.CSVParser.nextRecord()" "org.apache.commons.csv.CSVParser.1.$SwitchMap$org$apache$commons$csv$Token$Type : int[]"
reference "org.apache.commons.csv.CSVParser.nextRecord()" "org.apache.commons.csv.Token.type : Type"
call "org.apache.commons.csv.CSVParser.nextRecord()" "org.apache.commons.csv.Token.Type.ordinal()"
call "org.apache.commons.csv.CSVParser.nextRecord()" "org.apache.commons.csv.CSVParser.addRecordValue(boolean)"
reference "org.apache.commons.csv.CSVParser.nextRecord()" "org.apache.commons.csv.Token.isReady : boolean"
call "org.apache.commons.csv.CSVParser.nextRecord()" "org.apache.commons.csv.CSVParser.getCurrentLineNumber()"
reference "org.apache.commons.csv.CSVParser.nextRecord()" "org.apache.commons.csv.Token.content : StringBuilder"
reference "org.apache.commons.csv.CSVParser.nextRecord()" "org.apache.commons.csv.Token.Type.TOKEN : Type"
reference "org.apache.commons.csv.CSVParser.nextRecord()" "org.apache.commons.csv.CSVParser.recordNumber : long"
call "org.apache.commons.csv.CSVParser.nextRecord()" "org.apache.commons.csv.CSVRecord.CSVRecord(CSVParser,String[],String,long,long)"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.nextRecord()"
reference "org.apache.commons.csv.CSVParser.format : CSVFormat" "org.apache.commons.csv.CSVFormat"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.format : CSVFormat"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.headerMap : Map"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.headerNames : List"
reference "org.apache.commons.csv.CSVParser.lexer : Lexer" "org.apache.commons.csv.Lexer"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.lexer : Lexer"
reference "org.apache.commons.csv.CSVParser.csvRecordIterator : CSVRecordIterator" "org.apache.commons.csv.CSVParser.CSVRecordIterator"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.csvRecordIterator : CSVRecordIterator"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.recordList : List"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.recordNumber : long"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.characterOffset : long"
reference "org.apache.commons.csv.CSVParser.reusableToken : Token" "org.apache.commons.csv.Token"
contain "org.apache.commons.csv.CSVParser" "org.apache.commons.csv.CSVParser.reusableToken : Token"
reference "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.Constants"
reference "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormat"
reference "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.QuoteMode"
reference "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormat.Predefined"
reference "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.EmptyEnum"
reference "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.Header"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.CSVFormatTest()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.assertNotEquals(Object,Object)"
call "org.apache.commons.csv.CSVFormatTest.copy(CSVFormat)" "org.apache.commons.csv.CSVFormat.getDelimiter()"
call "org.apache.commons.csv.CSVFormatTest.copy(CSVFormat)" "org.apache.commons.csv.CSVFormat.withDelimiter(char)"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.copy(CSVFormat)"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.assertNotEquals(String,String,Object,Object)"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()"
reference "org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()" "org.apache.commons.csv.CSVFormat.getHeader()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsFalse()"
reference "org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsTrue()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsTrue()" "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames(boolean)"
call "org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsTrue()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsTrue()"
reference "org.apache.commons.csv.CSVFormatTest.testEquals()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testEquals()" "org.apache.commons.csv.CSVFormatTest.copy(CSVFormat)"
call "org.apache.commons.csv.CSVFormatTest.testEquals()" "org.apache.commons.csv.CSVFormat.equals(Object)"
call "org.apache.commons.csv.CSVFormatTest.testEquals()" "org.apache.commons.csv.CSVFormat.hashCode()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testEquals()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()" "org.apache.commons.csv.CSVFormat.newFormat(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()" "org.apache.commons.csv.CSVFormat.withCommentMarker(char)"
reference "org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()" "org.apache.commons.csv.QuoteMode.ALL : QuoteMode"
call "org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()" "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()" "org.apache.commons.csv.CSVFormatTest.assertNotEquals(Object,Object)"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()" "org.apache.commons.csv.CSVFormat.newFormat(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()" "org.apache.commons.csv.CSVFormatTest.assertNotEquals(Object,Object)"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsEscape()" "org.apache.commons.csv.CSVFormat.newFormat(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsEscape()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsEscape()" "org.apache.commons.csv.CSVFormat.withCommentMarker(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsEscape()" "org.apache.commons.csv.CSVFormat.withEscape(char)"
reference "org.apache.commons.csv.CSVFormatTest.testEqualsEscape()" "org.apache.commons.csv.QuoteMode.ALL : QuoteMode"
call "org.apache.commons.csv.CSVFormatTest.testEqualsEscape()" "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsEscape()" "org.apache.commons.csv.CSVFormatTest.assertNotEquals(Object,Object)"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testEqualsEscape()"
reference "org.apache.commons.csv.CSVFormatTest.testEqualsHash()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testEqualsHash()" "org.apache.commons.csv.CSVFormatTest.assertNotEquals(String,String,Object,Object)"
reference "org.apache.commons.csv.CSVFormatTest.testEqualsHash()" "org.apache.commons.csv.QuoteMode.MINIMAL : QuoteMode"
reference "org.apache.commons.csv.CSVFormatTest.testEqualsHash()" "org.apache.commons.csv.QuoteMode.ALL : QuoteMode"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testEqualsHash()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsHeader()" "org.apache.commons.csv.CSVFormat.newFormat(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsHeader()" "org.apache.commons.csv.CSVFormat.withRecordSeparator(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsHeader()" "org.apache.commons.csv.CSVFormat.withCommentMarker(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsHeader()" "org.apache.commons.csv.CSVFormat.withEscape(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsHeader()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVFormatTest.testEqualsHeader()" "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsHeader()" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsHeader()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
reference "org.apache.commons.csv.CSVFormatTest.testEqualsHeader()" "org.apache.commons.csv.QuoteMode.ALL : QuoteMode"
call "org.apache.commons.csv.CSVFormatTest.testEqualsHeader()" "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsHeader()" "org.apache.commons.csv.CSVFormatTest.assertNotEquals(Object,Object)"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testEqualsHeader()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()" "org.apache.commons.csv.CSVFormat.newFormat(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()" "org.apache.commons.csv.CSVFormat.withCommentMarker(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()" "org.apache.commons.csv.CSVFormat.withEscape(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()" "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
reference "org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()" "org.apache.commons.csv.QuoteMode.ALL : QuoteMode"
call "org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()" "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()" "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()" "org.apache.commons.csv.CSVFormatTest.assertNotEquals(Object,Object)"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()" "org.apache.commons.csv.CSVFormat.newFormat(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()" "org.apache.commons.csv.CSVFormat.withCommentMarker(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()" "org.apache.commons.csv.CSVFormat.withEscape(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
reference "org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()" "org.apache.commons.csv.QuoteMode.ALL : QuoteMode"
call "org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()" "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()" "org.apache.commons.csv.CSVFormatTest.assertNotEquals(Object,Object)"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()" "org.apache.commons.csv.CSVFormat.newFormat(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()" "org.apache.commons.csv.CSVFormat.withQuote(Character)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()" "org.apache.commons.csv.CSVFormatTest.assertNotEquals(Object,Object)"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()" "org.apache.commons.csv.CSVFormat.newFormat(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()" "org.apache.commons.csv.CSVFormat.withQuote(Character)"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsNullString()" "org.apache.commons.csv.CSVFormat.newFormat(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsNullString()" "org.apache.commons.csv.CSVFormat.withRecordSeparator(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsNullString()" "org.apache.commons.csv.CSVFormat.withCommentMarker(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsNullString()" "org.apache.commons.csv.CSVFormat.withEscape(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsNullString()" "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsNullString()" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsNullString()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
reference "org.apache.commons.csv.CSVFormatTest.testEqualsNullString()" "org.apache.commons.csv.QuoteMode.ALL : QuoteMode"
call "org.apache.commons.csv.CSVFormatTest.testEqualsNullString()" "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsNullString()" "org.apache.commons.csv.CSVFormat.withNullString(String)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsNullString()" "org.apache.commons.csv.CSVFormatTest.assertNotEquals(Object,Object)"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testEqualsNullString()"
reference "org.apache.commons.csv.CSVFormatTest.testEqualsOne()" "org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD : CSVFormat"
reference "org.apache.commons.csv.CSVFormatTest.testEqualsOne()" "org.apache.commons.csv.CSVFormat.MYSQL : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testEqualsOne()" "org.apache.commons.csv.CSVFormat.getEscapeCharacter()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsOne()" "org.apache.commons.csv.CSVFormat.getQuoteMode()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsOne()" "org.apache.commons.csv.CSVFormat.getIgnoreEmptyLines()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsOne()" "org.apache.commons.csv.CSVFormat.getSkipHeaderRecord()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsOne()" "org.apache.commons.csv.CSVFormat.getIgnoreHeaderCase()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsOne()" "org.apache.commons.csv.CSVFormat.getCommentMarker()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsOne()" "org.apache.commons.csv.CSVFormat.isCommentMarkerSet()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsOne()" "org.apache.commons.csv.CSVFormat.isQuoteCharacterSet()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsOne()" "org.apache.commons.csv.CSVFormat.getDelimiter()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsOne()" "org.apache.commons.csv.CSVFormat.getAllowMissingColumnNames()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsOne()" "org.apache.commons.csv.CSVFormat.isEscapeCharacterSet()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsOne()" "org.apache.commons.csv.CSVFormat.getRecordSeparator()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsOne()" "org.apache.commons.csv.CSVFormat.getQuoteCharacter()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsOne()" "org.apache.commons.csv.CSVFormat.getTrailingDelimiter()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsOne()" "org.apache.commons.csv.CSVFormat.getTrim()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsOne()" "org.apache.commons.csv.CSVFormat.isNullStringSet()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsOne()" "org.apache.commons.csv.CSVFormat.getNullString()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsOne()" "org.apache.commons.csv.CSVFormat.getIgnoreSurroundingSpaces()"
reference "org.apache.commons.csv.CSVFormatTest.testEqualsOne()" "org.apache.commons.csv.QuoteMode.ALL_NON_NULL : QuoteMode"
call "org.apache.commons.csv.CSVFormatTest.testEqualsOne()" "org.apache.commons.csv.CSVFormat.equals(Object)"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testEqualsOne()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()" "org.apache.commons.csv.CSVFormat.newFormat(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()" "org.apache.commons.csv.CSVFormatTest.assertNotEquals(Object,Object)"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()" "org.apache.commons.csv.CSVFormat.newFormat(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
reference "org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()" "org.apache.commons.csv.QuoteMode.ALL : QuoteMode"
call "org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()" "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)"
reference "org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()" "org.apache.commons.csv.QuoteMode.MINIMAL : QuoteMode"
call "org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()" "org.apache.commons.csv.CSVFormatTest.assertNotEquals(Object,Object)"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()" "org.apache.commons.csv.CSVFormat.newFormat(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()" "org.apache.commons.csv.CSVFormat.withRecordSeparator(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()" "org.apache.commons.csv.CSVFormat.withCommentMarker(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()" "org.apache.commons.csv.CSVFormat.withEscape(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()" "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
reference "org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()" "org.apache.commons.csv.QuoteMode.ALL : QuoteMode"
call "org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()" "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()" "org.apache.commons.csv.CSVFormatTest.assertNotEquals(Object,Object)"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()" "org.apache.commons.csv.CSVFormat.newFormat(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()" "org.apache.commons.csv.CSVFormat.withRecordSeparator(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()" "org.apache.commons.csv.CSVFormat.withCommentMarker(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()" "org.apache.commons.csv.CSVFormat.withEscape(char)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()" "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
reference "org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()" "org.apache.commons.csv.QuoteMode.ALL : QuoteMode"
call "org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()" "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()" "org.apache.commons.csv.CSVFormat.withNullString(String)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()" "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()" "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)"
call "org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()" "org.apache.commons.csv.CSVFormatTest.assertNotEquals(Object,Object)"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()"
reference "org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()" "org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()" "org.apache.commons.csv.CSVFormat.getEscapeCharacter()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()" "org.apache.commons.csv.CSVFormat.getIgnoreSurroundingSpaces()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()" "org.apache.commons.csv.CSVFormat.getTrailingDelimiter()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()" "org.apache.commons.csv.CSVFormat.getTrim()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()" "org.apache.commons.csv.CSVFormat.isQuoteCharacterSet()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()" "org.apache.commons.csv.CSVFormat.getNullString()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()" "org.apache.commons.csv.CSVFormat.getIgnoreHeaderCase()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()" "org.apache.commons.csv.CSVFormat.isEscapeCharacterSet()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()" "org.apache.commons.csv.CSVFormat.isCommentMarkerSet()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()" "org.apache.commons.csv.CSVFormat.getCommentMarker()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()" "org.apache.commons.csv.CSVFormat.getAllowMissingColumnNames()"
reference "org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()" "org.apache.commons.csv.QuoteMode.ALL_NON_NULL : QuoteMode"
call "org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()" "org.apache.commons.csv.CSVFormat.getQuoteMode()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()" "org.apache.commons.csv.CSVFormat.getDelimiter()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()" "org.apache.commons.csv.CSVFormat.getSkipHeaderRecord()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()" "org.apache.commons.csv.CSVFormat.getRecordSeparator()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()" "org.apache.commons.csv.CSVFormat.getIgnoreEmptyLines()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()" "org.apache.commons.csv.CSVFormat.getQuoteCharacter()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()" "org.apache.commons.csv.CSVFormat.isNullStringSet()"
call "org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()" "org.apache.commons.csv.CSVFormat.equals(Object)"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()"
reference "org.apache.commons.csv.CSVFormatTest.testFormat()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testFormat()" "org.apache.commons.csv.CSVFormat.format(Object[])"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testFormat()"
reference "org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()" "org.apache.commons.csv.CSVFormat.MYSQL : CSVFormat"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()"
reference "org.apache.commons.csv.CSVFormatTest.testGetHeader()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testGetHeader()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVFormatTest.testGetHeader()" "org.apache.commons.csv.CSVFormat.getHeader()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testGetHeader()"
reference "org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()" "org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()" "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase()"
call "org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()" "org.apache.commons.csv.CSVFormat.hashCode()"
call "org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()" "org.apache.commons.csv.CSVFormat.getIgnoreHeaderCase()"
call "org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()" "org.apache.commons.csv.CSVFormat.getTrailingDelimiter()"
call "org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()" "org.apache.commons.csv.CSVFormat.equals(Object)"
call "org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()" "org.apache.commons.csv.CSVFormat.getAllowMissingColumnNames()"
call "org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()" "org.apache.commons.csv.CSVFormat.getTrim()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()"
reference "org.apache.commons.csv.CSVFormatTest.testJiraCsv236()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testJiraCsv236()" "org.apache.commons.csv.CSVFormat.withAllowDuplicateHeaderNames()"
call "org.apache.commons.csv.CSVFormatTest.testJiraCsv236()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testJiraCsv236()"
call "org.apache.commons.csv.CSVFormatTest.testNewFormat()" "org.apache.commons.csv.CSVFormat.newFormat(char)"
call "org.apache.commons.csv.CSVFormatTest.testNewFormat()" "org.apache.commons.csv.CSVFormat.getSkipHeaderRecord()"
call "org.apache.commons.csv.CSVFormatTest.testNewFormat()" "org.apache.commons.csv.CSVFormat.isEscapeCharacterSet()"
call "org.apache.commons.csv.CSVFormatTest.testNewFormat()" "org.apache.commons.csv.CSVFormat.getRecordSeparator()"
call "org.apache.commons.csv.CSVFormatTest.testNewFormat()" "org.apache.commons.csv.CSVFormat.getQuoteMode()"
call "org.apache.commons.csv.CSVFormatTest.testNewFormat()" "org.apache.commons.csv.CSVFormat.getCommentMarker()"
call "org.apache.commons.csv.CSVFormatTest.testNewFormat()" "org.apache.commons.csv.CSVFormat.getIgnoreHeaderCase()"
call "org.apache.commons.csv.CSVFormatTest.testNewFormat()" "org.apache.commons.csv.CSVFormat.getAllowMissingColumnNames()"
call "org.apache.commons.csv.CSVFormatTest.testNewFormat()" "org.apache.commons.csv.CSVFormat.getTrim()"
call "org.apache.commons.csv.CSVFormatTest.testNewFormat()" "org.apache.commons.csv.CSVFormat.isNullStringSet()"
call "org.apache.commons.csv.CSVFormatTest.testNewFormat()" "org.apache.commons.csv.CSVFormat.getEscapeCharacter()"
call "org.apache.commons.csv.CSVFormatTest.testNewFormat()" "org.apache.commons.csv.CSVFormat.getIgnoreSurroundingSpaces()"
call "org.apache.commons.csv.CSVFormatTest.testNewFormat()" "org.apache.commons.csv.CSVFormat.getTrailingDelimiter()"
call "org.apache.commons.csv.CSVFormatTest.testNewFormat()" "org.apache.commons.csv.CSVFormat.getDelimiter()"
call "org.apache.commons.csv.CSVFormatTest.testNewFormat()" "org.apache.commons.csv.CSVFormat.getNullString()"
call "org.apache.commons.csv.CSVFormatTest.testNewFormat()" "org.apache.commons.csv.CSVFormat.isQuoteCharacterSet()"
call "org.apache.commons.csv.CSVFormatTest.testNewFormat()" "org.apache.commons.csv.CSVFormat.isCommentMarkerSet()"
call "org.apache.commons.csv.CSVFormatTest.testNewFormat()" "org.apache.commons.csv.CSVFormat.getQuoteCharacter()"
call "org.apache.commons.csv.CSVFormatTest.testNewFormat()" "org.apache.commons.csv.CSVFormat.getIgnoreEmptyLines()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testNewFormat()"
call "org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()" "org.apache.commons.csv.CSVFormat.newFormat(char)"
call "org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()" "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord()"
call "org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()" "org.apache.commons.csv.CSVFormat.format(Object[])"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()"
reference "org.apache.commons.csv.CSVFormatTest.testRFC4180()" "org.apache.commons.csv.CSVFormat.RFC4180 : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testRFC4180()" "org.apache.commons.csv.CSVFormat.getCommentMarker()"
call "org.apache.commons.csv.CSVFormatTest.testRFC4180()" "org.apache.commons.csv.CSVFormat.getDelimiter()"
call "org.apache.commons.csv.CSVFormatTest.testRFC4180()" "org.apache.commons.csv.CSVFormat.getEscapeCharacter()"
call "org.apache.commons.csv.CSVFormatTest.testRFC4180()" "org.apache.commons.csv.CSVFormat.getIgnoreEmptyLines()"
call "org.apache.commons.csv.CSVFormatTest.testRFC4180()" "org.apache.commons.csv.CSVFormat.getQuoteCharacter()"
call "org.apache.commons.csv.CSVFormatTest.testRFC4180()" "org.apache.commons.csv.CSVFormat.getQuoteMode()"
call "org.apache.commons.csv.CSVFormatTest.testRFC4180()" "org.apache.commons.csv.CSVFormat.getRecordSeparator()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testRFC4180()"
reference "org.apache.commons.csv.CSVFormatTest.testSerialization()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testSerialization()" "org.apache.commons.csv.CSVFormat.getDelimiter()"
call "org.apache.commons.csv.CSVFormatTest.testSerialization()" "org.apache.commons.csv.CSVFormat.getQuoteCharacter()"
call "org.apache.commons.csv.CSVFormatTest.testSerialization()" "org.apache.commons.csv.CSVFormat.getCommentMarker()"
call "org.apache.commons.csv.CSVFormatTest.testSerialization()" "org.apache.commons.csv.CSVFormat.getRecordSeparator()"
call "org.apache.commons.csv.CSVFormatTest.testSerialization()" "org.apache.commons.csv.CSVFormat.getEscapeCharacter()"
call "org.apache.commons.csv.CSVFormatTest.testSerialization()" "org.apache.commons.csv.CSVFormat.getIgnoreSurroundingSpaces()"
call "org.apache.commons.csv.CSVFormatTest.testSerialization()" "org.apache.commons.csv.CSVFormat.getIgnoreEmptyLines()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testSerialization()"
reference "org.apache.commons.csv.CSVFormatTest.testToString()" "org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testToString()" "org.apache.commons.csv.CSVFormat.toString()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testToString()"
reference "org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()" "org.apache.commons.csv.CSVFormat.Predefined.Default : Predefined"
call "org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()" "org.apache.commons.csv.CSVFormat.Predefined.getFormat()"
call "org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()" "org.apache.commons.csv.CSVFormat.getEscapeCharacter()"
call "org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()" "org.apache.commons.csv.CSVFormat.isQuoteCharacterSet()"
call "org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()" "org.apache.commons.csv.CSVFormat.getTrim()"
call "org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()" "org.apache.commons.csv.CSVFormat.getIgnoreSurroundingSpaces()"
call "org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()" "org.apache.commons.csv.CSVFormat.getTrailingDelimiter()"
call "org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()" "org.apache.commons.csv.CSVFormat.getDelimiter()"
call "org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()" "org.apache.commons.csv.CSVFormat.getIgnoreHeaderCase()"
call "org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()" "org.apache.commons.csv.CSVFormat.getRecordSeparator()"
call "org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()" "org.apache.commons.csv.CSVFormat.isCommentMarkerSet()"
call "org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()" "org.apache.commons.csv.CSVFormat.getCommentMarker()"
call "org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()" "org.apache.commons.csv.CSVFormat.isNullStringSet()"
call "org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()" "org.apache.commons.csv.CSVFormat.getAllowMissingColumnNames()"
call "org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()" "org.apache.commons.csv.CSVFormat.isEscapeCharacterSet()"
call "org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()" "org.apache.commons.csv.CSVFormat.getSkipHeaderRecord()"
call "org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()" "org.apache.commons.csv.CSVFormat.getNullString()"
call "org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()" "org.apache.commons.csv.CSVFormat.getQuoteMode()"
call "org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()" "org.apache.commons.csv.CSVFormat.getIgnoreEmptyLines()"
call "org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()" "org.apache.commons.csv.CSVFormat.getQuoteCharacter()"
call "org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()" "org.apache.commons.csv.CSVFormat.withCommentMarker(Character)"
call "org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()" "org.apache.commons.csv.CSVFormat.equals(Object)"
call "org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()" "org.apache.commons.csv.CSVFormat.toString()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()"
reference "org.apache.commons.csv.CSVFormatTest.testWithCommentStart()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testWithCommentStart()" "org.apache.commons.csv.CSVFormat.withCommentMarker(char)"
call "org.apache.commons.csv.CSVFormatTest.testWithCommentStart()" "org.apache.commons.csv.CSVFormat.getCommentMarker()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testWithCommentStart()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testWithCommentStartCRThrowsException()"
reference "org.apache.commons.csv.CSVFormatTest.testWithDelimiter()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testWithDelimiter()" "org.apache.commons.csv.CSVFormat.withDelimiter(char)"
call "org.apache.commons.csv.CSVFormatTest.testWithDelimiter()" "org.apache.commons.csv.CSVFormat.getDelimiter()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testWithDelimiter()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testWithDelimiterLFThrowsException()"
reference "org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()" "org.apache.commons.csv.CSVFormat.withHeader(Class)"
call "org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()" "org.apache.commons.csv.CSVFormat.getHeader()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()"
reference "org.apache.commons.csv.CSVFormatTest.testWithEscape()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testWithEscape()" "org.apache.commons.csv.CSVFormat.withEscape(char)"
call "org.apache.commons.csv.CSVFormatTest.testWithEscape()" "org.apache.commons.csv.CSVFormat.getEscapeCharacter()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testWithEscape()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testWithEscapeCRThrowsExceptions()"
reference "org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()" "org.apache.commons.csv.CSVFormat.withFirstRecordAsHeader()"
call "org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()" "org.apache.commons.csv.CSVFormat.getSkipHeaderRecord()"
call "org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()" "org.apache.commons.csv.CSVFormat.getHeader()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()"
reference "org.apache.commons.csv.CSVFormatTest.testWithHeader()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testWithHeader()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVFormatTest.testWithHeader()" "org.apache.commons.csv.CSVFormat.getHeader()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testWithHeader()"
reference "org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()" "org.apache.commons.csv.CSVFormat.getQuoteCharacter()"
call "org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()" "org.apache.commons.csv.CSVFormat.isCommentMarkerSet()"
call "org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()" "org.apache.commons.csv.CSVFormat.isEscapeCharacterSet()"
call "org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()" "org.apache.commons.csv.CSVFormat.isQuoteCharacterSet()"
call "org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()" "org.apache.commons.csv.CSVFormat.getSkipHeaderRecord()"
call "org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()" "org.apache.commons.csv.CSVFormat.getQuoteMode()"
call "org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()" "org.apache.commons.csv.CSVFormat.getDelimiter()"
call "org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()" "org.apache.commons.csv.CSVFormat.getIgnoreEmptyLines()"
call "org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()" "org.apache.commons.csv.CSVFormat.getIgnoreHeaderCase()"
call "org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()" "org.apache.commons.csv.CSVFormat.getCommentMarker()"
call "org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()" "org.apache.commons.csv.CSVFormat.getRecordSeparator()"
call "org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()" "org.apache.commons.csv.CSVFormat.getTrailingDelimiter()"
call "org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()" "org.apache.commons.csv.CSVFormat.getAllowMissingColumnNames()"
call "org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()" "org.apache.commons.csv.CSVFormat.getTrim()"
call "org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()" "org.apache.commons.csv.CSVFormat.isNullStringSet()"
call "org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()" "org.apache.commons.csv.CSVFormat.getNullString()"
call "org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()" "org.apache.commons.csv.CSVFormat.getIgnoreSurroundingSpaces()"
call "org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()" "org.apache.commons.csv.CSVFormat.getEscapeCharacter()"
call "org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()" "org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])"
call "org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()" "org.apache.commons.csv.CSVFormat.equals(Object)"
call "org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()" "org.apache.commons.csv.CSVFormat.format(Object[])"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()"
reference "org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()" "org.apache.commons.csv.CSVFormat.withHeader(Class)"
call "org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()" "org.apache.commons.csv.CSVFormat.getHeader()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()"
reference "org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()" "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)"
call "org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()" "org.apache.commons.csv.CSVFormat.getIgnoreEmptyLines()"
call "org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()" "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()"
reference "org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)"
call "org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()" "org.apache.commons.csv.CSVFormat.getIgnoreSurroundingSpaces()"
call "org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()"
reference "org.apache.commons.csv.CSVFormatTest.testWithNullString()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testWithNullString()" "org.apache.commons.csv.CSVFormat.withNullString(String)"
call "org.apache.commons.csv.CSVFormatTest.testWithNullString()" "org.apache.commons.csv.CSVFormat.getNullString()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testWithNullString()"
reference "org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
call "org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()" "org.apache.commons.csv.CSVFormat.getQuoteCharacter()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testWithQuoteLFThrowsException()"
reference "org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
reference "org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()" "org.apache.commons.csv.QuoteMode.ALL : QuoteMode"
call "org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()" "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)"
call "org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()" "org.apache.commons.csv.CSVFormat.getQuoteMode()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()"
reference "org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCR()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCR()" "org.apache.commons.csv.CSVFormat.withRecordSeparator(char)"
call "org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCR()" "org.apache.commons.csv.CSVFormat.getRecordSeparator()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCR()"
reference "org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()" "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)"
call "org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()" "org.apache.commons.csv.CSVFormat.getRecordSeparator()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()"
reference "org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorLF()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorLF()" "org.apache.commons.csv.CSVFormat.withRecordSeparator(char)"
call "org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorLF()" "org.apache.commons.csv.CSVFormat.getRecordSeparator()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorLF()"
reference "org.apache.commons.csv.CSVFormatTest.testWithSystemRecordSeparator()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVFormatTest.testWithSystemRecordSeparator()" "org.apache.commons.csv.CSVFormat.withSystemRecordSeparator()"
call "org.apache.commons.csv.CSVFormatTest.testWithSystemRecordSeparator()" "org.apache.commons.csv.CSVFormat.getRecordSeparator()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.testWithSystemRecordSeparator()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.lambda$testWithQuoteLFThrowsException$13()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.lambda$testWithEscapeCRThrowsExceptions$12()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.lambda$testWithDelimiterLFThrowsException$11()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.lambda$testWithCommentStartCRThrowsException$10()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.lambda$testQuotePolicyNoneWithoutEscapeThrowsException$9()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.lambda$testQuoteCharSameAsDelimiterThrowsException$8()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.lambda$testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType$7()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.lambda$testQuoteCharSameAsCommentStartThrowsException$6()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.lambda$testFormatThrowsNullPointerException$5(CSVFormat)"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.lambda$testEscapeSameAsCommentStartThrowsExceptionForWrapperType$4()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.lambda$testEscapeSameAsCommentStartThrowsException$3()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.lambda$testDuplicateHeaderElementsFalse$2()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.lambda$testDelimiterSameAsEscapeThrowsException$1()"
contain "org.apache.commons.csv.CSVFormatTest" "org.apache.commons.csv.CSVFormatTest.lambda$testDelimiterSameAsCommentStartThrowsException$0()"
reference "org.apache.commons.csv.issues.JiraCsv248Test" "org.apache.commons.csv.CSVRecord"
contain "org.apache.commons.csv.issues.JiraCsv248Test" "org.apache.commons.csv.issues.JiraCsv248Test.JiraCsv248Test()"
call "org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()" "org.apache.commons.csv.issues.JiraCsv248Test.getTestInput()"
call "org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()" "org.apache.commons.csv.CSVRecord.getRecordNumber()"
call "org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()" "org.apache.commons.csv.CSVRecord.get(int)"
call "org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()" "org.apache.commons.csv.CSVRecord.size()"
call "org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()" "org.apache.commons.csv.CSVRecord.getCharacterPosition()"
call "org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()" "org.apache.commons.csv.CSVRecord.getComment()"
call "org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()" "org.apache.commons.csv.CSVRecord.getParser()"
call "org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()" "org.apache.commons.csv.CSVRecord.isConsistent()"
call "org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()" "org.apache.commons.csv.CSVRecord.isMapped(String)"
call "org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()" "org.apache.commons.csv.CSVRecord.isSet(String)"
call "org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()" "org.apache.commons.csv.CSVRecord.toMap()"
call "org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()" "org.apache.commons.csv.CSVRecord.get(String)"
contain "org.apache.commons.csv.issues.JiraCsv248Test" "org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()"
contain "org.apache.commons.csv.issues.JiraCsv248Test" "org.apache.commons.csv.issues.JiraCsv248Test.getTestInput()"
reference "org.apache.commons.csv.PerformanceTest.1" "org.apache.commons.csv.Token.Type"
reference "org.apache.commons.csv.PerformanceTest.1" "org.apache.commons.csv.PerformanceTest"
reference "org.apache.commons.csv.PerformanceTest.1" "org.apache.commons.csv.Token"
call "org.apache.commons.csv.PerformanceTest.1.static {...}" "org.apache.commons.csv.Token.Type.values()"
reference "org.apache.commons.csv.PerformanceTest.1.static {...}" "org.apache.commons.csv.PerformanceTest.1.$SwitchMap$org$apache$commons$csv$Token$Type : int[]"
reference "org.apache.commons.csv.PerformanceTest.1.static {...}" "org.apache.commons.csv.Token.Type.EOF : Type"
call "org.apache.commons.csv.PerformanceTest.1.static {...}" "org.apache.commons.csv.Token.Type.ordinal()"
reference "org.apache.commons.csv.PerformanceTest.1.static {...}" "org.apache.commons.csv.Token.Type.EORECORD : Type"
reference "org.apache.commons.csv.PerformanceTest.1.static {...}" "org.apache.commons.csv.Token.Type.INVALID : Type"
reference "org.apache.commons.csv.PerformanceTest.1.static {...}" "org.apache.commons.csv.Token.Type.TOKEN : Type"
reference "org.apache.commons.csv.PerformanceTest.1.static {...}" "org.apache.commons.csv.Token.Type.COMMENT : Type"
contain "org.apache.commons.csv.PerformanceTest.1" "org.apache.commons.csv.PerformanceTest.1.static {...}"
reference "org.apache.commons.csv.PerformanceTest.1.$SwitchMap$org$apache$commons$csv$Token$Type : int[]" "int[]"
contain "org.apache.commons.csv.PerformanceTest.1" "org.apache.commons.csv.PerformanceTest.1.$SwitchMap$org$apache$commons$csv$Token$Type : int[]"
reference "org.apache.commons.csv.issues.JiraCsv213Test" "org.apache.commons.csv.CSVFormat"
reference "org.apache.commons.csv.issues.JiraCsv213Test" "org.apache.commons.csv.QuoteMode"
reference "org.apache.commons.csv.issues.JiraCsv213Test" "org.apache.commons.csv.CSVParser"
contain "org.apache.commons.csv.issues.JiraCsv213Test" "org.apache.commons.csv.issues.JiraCsv213Test.JiraCsv213Test()"
reference "org.apache.commons.csv.issues.JiraCsv213Test.createEndChannel(File)" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.issues.JiraCsv213Test.createEndChannel(File)" "org.apache.commons.csv.CSVFormat.withDelimiter(char)"
call "org.apache.commons.csv.issues.JiraCsv213Test.createEndChannel(File)" "org.apache.commons.csv.CSVFormat.withFirstRecordAsHeader()"
call "org.apache.commons.csv.issues.JiraCsv213Test.createEndChannel(File)" "org.apache.commons.csv.CSVFormat.withRecordSeparator(char)"
reference "org.apache.commons.csv.issues.JiraCsv213Test.createEndChannel(File)" "org.apache.commons.csv.QuoteMode.ALL : QuoteMode"
call "org.apache.commons.csv.issues.JiraCsv213Test.createEndChannel(File)" "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)"
call "org.apache.commons.csv.issues.JiraCsv213Test.createEndChannel(File)" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.issues.JiraCsv213Test.createEndChannel(File)" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.issues.JiraCsv213Test.createEndChannel(File)" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.issues.JiraCsv213Test" "org.apache.commons.csv.issues.JiraCsv213Test.createEndChannel(File)"
call "org.apache.commons.csv.issues.JiraCsv213Test.test()" "org.apache.commons.csv.issues.JiraCsv213Test.createEndChannel(File)"
contain "org.apache.commons.csv.issues.JiraCsv213Test" "org.apache.commons.csv.issues.JiraCsv213Test.test()"
reference "org.apache.commons.csv.CSVFileParserTest" "org.apache.commons.csv.CSVFormat"
reference "org.apache.commons.csv.CSVFileParserTest" "org.apache.commons.csv.CSVParser"
reference "org.apache.commons.csv.CSVFileParserTest" "org.apache.commons.csv.CSVRecord"
contain "org.apache.commons.csv.CSVFileParserTest" "org.apache.commons.csv.CSVFileParserTest.CSVFileParserTest()"
contain "org.apache.commons.csv.CSVFileParserTest" "org.apache.commons.csv.CSVFileParserTest.readTestData(BufferedReader)"
reference "org.apache.commons.csv.CSVFileParserTest.generateData()" "org.apache.commons.csv.CSVFileParserTest.BASE : File"
contain "org.apache.commons.csv.CSVFileParserTest" "org.apache.commons.csv.CSVFileParserTest.generateData()"
call "org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)" "org.apache.commons.csv.CSVFileParserTest.readTestData(BufferedReader)"
call "org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)" "org.apache.commons.csv.CSVFormat.newFormat(char)"
call "org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)" "org.apache.commons.csv.CSVFormat.withQuote(char)"
call "org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)" "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)"
call "org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)"
call "org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)" "org.apache.commons.csv.CSVFormat.withCommentMarker(char)"
call "org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)" "org.apache.commons.csv.CSVFormat.toString()"
reference "org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)" "org.apache.commons.csv.CSVFileParserTest.BASE : File"
call "org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)" "org.apache.commons.csv.CSVParser.parse(File,Charset,CSVFormat)"
call "org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)" "org.apache.commons.csv.CSVRecord.values()"
call "org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)" "org.apache.commons.csv.CSVRecord.getComment()"
call "org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)" "org.apache.commons.csv.CSVRecord.size()"
call "org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVFileParserTest" "org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)"
call "org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)" "org.apache.commons.csv.CSVFileParserTest.readTestData(BufferedReader)"
call "org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)" "org.apache.commons.csv.CSVFormat.newFormat(char)"
call "org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)" "org.apache.commons.csv.CSVFormat.withQuote(char)"
call "org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)" "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)"
call "org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)"
call "org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)" "org.apache.commons.csv.CSVFormat.withCommentMarker(char)"
call "org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)" "org.apache.commons.csv.CSVFormat.toString()"
call "org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)" "org.apache.commons.csv.CSVParser.parse(URL,Charset,CSVFormat)"
call "org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)" "org.apache.commons.csv.CSVRecord.values()"
call "org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)" "org.apache.commons.csv.CSVRecord.getComment()"
call "org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)" "org.apache.commons.csv.CSVRecord.size()"
call "org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVFileParserTest" "org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)"
contain "org.apache.commons.csv.CSVFileParserTest" "org.apache.commons.csv.CSVFileParserTest.lambda$generateData$0(File,String)"
reference "org.apache.commons.csv.CSVFileParserTest.static {...}" "org.apache.commons.csv.CSVFileParserTest.BASE : File"
contain "org.apache.commons.csv.CSVFileParserTest" "org.apache.commons.csv.CSVFileParserTest.static {...}"
contain "org.apache.commons.csv.CSVFileParserTest" "org.apache.commons.csv.CSVFileParserTest.BASE : File"
reference "org.apache.commons.csv.issues.JiraCsv249Test" "org.apache.commons.csv.CSVFormat"
reference "org.apache.commons.csv.issues.JiraCsv249Test" "org.apache.commons.csv.CSVPrinter"
reference "org.apache.commons.csv.issues.JiraCsv249Test" "org.apache.commons.csv.CSVParser"
reference "org.apache.commons.csv.issues.JiraCsv249Test" "org.apache.commons.csv.CSVRecord"
contain "org.apache.commons.csv.issues.JiraCsv249Test" "org.apache.commons.csv.issues.JiraCsv249Test.JiraCsv249Test()"
reference "org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()" "org.apache.commons.csv.CSVFormat.withEscape(char)"
call "org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
call "org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()" "org.apache.commons.csv.CSVPrinter.close()"
call "org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()" "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)"
call "org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()" "org.apache.commons.csv.CSVParser.getRecords()"
call "org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.issues.JiraCsv249Test" "org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()"
contain "org.apache.commons.csv.issues.JiraCsv249Test" "org.apache.commons.csv.issues.JiraCsv249Test.lambda$testJiraCsv249$0(CSVRecord)"
reference "org.apache.commons.csv.TokenMatchersTest" "org.apache.commons.csv.Token"
reference "org.apache.commons.csv.TokenMatchersTest" "org.apache.commons.csv.Token.Type"
reference "org.apache.commons.csv.TokenMatchersTest" "org.apache.commons.csv.TokenMatchers"
reference "org.apache.commons.csv.TokenMatchersTest" "org.hamcrest.Matcher"
contain "org.apache.commons.csv.TokenMatchersTest" "org.apache.commons.csv.TokenMatchersTest.TokenMatchersTest()"
call "org.apache.commons.csv.TokenMatchersTest.setUp()" "org.apache.commons.csv.Token.Token()"
reference "org.apache.commons.csv.TokenMatchersTest.setUp()" "org.apache.commons.csv.TokenMatchersTest.token : Token"
reference "org.apache.commons.csv.TokenMatchersTest.setUp()" "org.apache.commons.csv.Token.Type.TOKEN : Type"
reference "org.apache.commons.csv.TokenMatchersTest.setUp()" "org.apache.commons.csv.Token.type : Type"
reference "org.apache.commons.csv.TokenMatchersTest.setUp()" "org.apache.commons.csv.Token.isReady : boolean"
reference "org.apache.commons.csv.TokenMatchersTest.setUp()" "org.apache.commons.csv.Token.content : StringBuilder"
contain "org.apache.commons.csv.TokenMatchersTest" "org.apache.commons.csv.TokenMatchersTest.setUp()"
reference "org.apache.commons.csv.TokenMatchersTest.testHasType()" "org.apache.commons.csv.Token.Type.COMMENT : Type"
call "org.apache.commons.csv.TokenMatchersTest.testHasType()" "org.apache.commons.csv.TokenMatchers.hasType(Token.Type)"
reference "org.apache.commons.csv.TokenMatchersTest.testHasType()" "org.apache.commons.csv.TokenMatchersTest.token : Token"
call "org.apache.commons.csv.TokenMatchersTest.testHasType()" "org.hamcrest.Matcher.matches(Object)"
reference "org.apache.commons.csv.TokenMatchersTest.testHasType()" "org.apache.commons.csv.Token.Type.EOF : Type"
reference "org.apache.commons.csv.TokenMatchersTest.testHasType()" "org.apache.commons.csv.Token.Type.EORECORD : Type"
reference "org.apache.commons.csv.TokenMatchersTest.testHasType()" "org.apache.commons.csv.Token.Type.TOKEN : Type"
contain "org.apache.commons.csv.TokenMatchersTest" "org.apache.commons.csv.TokenMatchersTest.testHasType()"
call "org.apache.commons.csv.TokenMatchersTest.testHasContent()" "org.apache.commons.csv.TokenMatchers.hasContent(String)"
reference "org.apache.commons.csv.TokenMatchersTest.testHasContent()" "org.apache.commons.csv.TokenMatchersTest.token : Token"
call "org.apache.commons.csv.TokenMatchersTest.testHasContent()" "org.hamcrest.Matcher.matches(Object)"
contain "org.apache.commons.csv.TokenMatchersTest" "org.apache.commons.csv.TokenMatchersTest.testHasContent()"
call "org.apache.commons.csv.TokenMatchersTest.testIsReady()" "org.apache.commons.csv.TokenMatchers.isReady()"
reference "org.apache.commons.csv.TokenMatchersTest.testIsReady()" "org.apache.commons.csv.TokenMatchersTest.token : Token"
call "org.apache.commons.csv.TokenMatchersTest.testIsReady()" "org.hamcrest.Matcher.matches(Object)"
reference "org.apache.commons.csv.TokenMatchersTest.testIsReady()" "org.apache.commons.csv.Token.isReady : boolean"
contain "org.apache.commons.csv.TokenMatchersTest" "org.apache.commons.csv.TokenMatchersTest.testIsReady()"
reference "org.apache.commons.csv.TokenMatchersTest.testMatches()" "org.apache.commons.csv.Token.Type.TOKEN : Type"
call "org.apache.commons.csv.TokenMatchersTest.testMatches()" "org.apache.commons.csv.TokenMatchers.matches(Token.Type,String)"
reference "org.apache.commons.csv.TokenMatchersTest.testMatches()" "org.apache.commons.csv.TokenMatchersTest.token : Token"
call "org.apache.commons.csv.TokenMatchersTest.testMatches()" "org.hamcrest.Matcher.matches(Object)"
reference "org.apache.commons.csv.TokenMatchersTest.testMatches()" "org.apache.commons.csv.Token.Type.EOF : Type"
reference "org.apache.commons.csv.TokenMatchersTest.testMatches()" "org.apache.commons.csv.Token.Type.EORECORD : Type"
contain "org.apache.commons.csv.TokenMatchersTest" "org.apache.commons.csv.TokenMatchersTest.testMatches()"
reference "org.apache.commons.csv.TokenMatchersTest.token : Token" "org.apache.commons.csv.Token"
contain "org.apache.commons.csv.TokenMatchersTest" "org.apache.commons.csv.TokenMatchersTest.token : Token"
reference "org.apache.commons.csv.CSVParser.Headers" "org.apache.commons.csv.CSVParser"
reference "org.apache.commons.csv.CSVParser.Headers.Headers(Map,List)" "org.apache.commons.csv.CSVParser.Headers.headerMap : Map"
reference "org.apache.commons.csv.CSVParser.Headers.Headers(Map,List)" "org.apache.commons.csv.CSVParser.Headers.headerNames : List"
contain "org.apache.commons.csv.CSVParser.Headers" "org.apache.commons.csv.CSVParser.Headers.Headers(Map,List)"
contain "org.apache.commons.csv.CSVParser.Headers" "org.apache.commons.csv.CSVParser.Headers.headerMap : Map"
contain "org.apache.commons.csv.CSVParser.Headers" "org.apache.commons.csv.CSVParser.Headers.headerNames : List"
reference "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Constants"
reference "org.apache.commons.csv.Lexer" "org.apache.commons.csv.CSVFormat"
reference "org.apache.commons.csv.Lexer" "org.apache.commons.csv.ExtendedBufferedReader"
reference "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Token.Type"
reference "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Token"
reference "org.apache.commons.csv.Lexer.getFirstEol()" "org.apache.commons.csv.Lexer.firstEol : String"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.getFirstEol()"
reference "org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)" "org.apache.commons.csv.Lexer.reader : ExtendedBufferedReader"
call "org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)" "org.apache.commons.csv.CSVFormat.getDelimiter()"
reference "org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)" "org.apache.commons.csv.Lexer.delimiter : char"
call "org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)" "org.apache.commons.csv.CSVFormat.getEscapeCharacter()"
call "org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)" "org.apache.commons.csv.Lexer.mapNullToDisabled(Character)"
reference "org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)" "org.apache.commons.csv.Lexer.escape : char"
call "org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)" "org.apache.commons.csv.CSVFormat.getQuoteCharacter()"
reference "org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)" "org.apache.commons.csv.Lexer.quoteChar : char"
call "org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)" "org.apache.commons.csv.CSVFormat.getCommentMarker()"
reference "org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)" "org.apache.commons.csv.Lexer.commentStart : char"
call "org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)" "org.apache.commons.csv.CSVFormat.getIgnoreSurroundingSpaces()"
reference "org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)" "org.apache.commons.csv.Lexer.ignoreSurroundingSpaces : boolean"
call "org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)" "org.apache.commons.csv.CSVFormat.getIgnoreEmptyLines()"
reference "org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)" "org.apache.commons.csv.Lexer.ignoreEmptyLines : boolean"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)"
reference "org.apache.commons.csv.Lexer.nextToken(Token)" "org.apache.commons.csv.Lexer.reader : ExtendedBufferedReader"
call "org.apache.commons.csv.Lexer.nextToken(Token)" "org.apache.commons.csv.ExtendedBufferedReader.getLastChar()"
call "org.apache.commons.csv.Lexer.nextToken(Token)" "org.apache.commons.csv.ExtendedBufferedReader.read()"
call "org.apache.commons.csv.Lexer.nextToken(Token)" "org.apache.commons.csv.Lexer.readEndOfLine(int)"
reference "org.apache.commons.csv.Lexer.nextToken(Token)" "org.apache.commons.csv.Lexer.ignoreEmptyLines : boolean"
call "org.apache.commons.csv.Lexer.nextToken(Token)" "org.apache.commons.csv.Lexer.isStartOfLine(int)"
call "org.apache.commons.csv.Lexer.nextToken(Token)" "org.apache.commons.csv.Lexer.isEndOfFile(int)"
reference "org.apache.commons.csv.Lexer.nextToken(Token)" "org.apache.commons.csv.Token.Type.EOF : Type"
reference "org.apache.commons.csv.Lexer.nextToken(Token)" "org.apache.commons.csv.Token.type : Type"
call "org.apache.commons.csv.Lexer.nextToken(Token)" "org.apache.commons.csv.Lexer.isDelimiter(int)"
call "org.apache.commons.csv.Lexer.nextToken(Token)" "org.apache.commons.csv.Lexer.isCommentStart(int)"
call "org.apache.commons.csv.Lexer.nextToken(Token)" "org.apache.commons.csv.ExtendedBufferedReader.readLine()"
reference "org.apache.commons.csv.Lexer.nextToken(Token)" "org.apache.commons.csv.Token.content : StringBuilder"
reference "org.apache.commons.csv.Lexer.nextToken(Token)" "org.apache.commons.csv.Token.Type.COMMENT : Type"
reference "org.apache.commons.csv.Lexer.nextToken(Token)" "org.apache.commons.csv.Token.Type.INVALID : Type"
reference "org.apache.commons.csv.Lexer.nextToken(Token)" "org.apache.commons.csv.Lexer.ignoreSurroundingSpaces : boolean"
call "org.apache.commons.csv.Lexer.nextToken(Token)" "org.apache.commons.csv.Lexer.isWhitespace(int)"
reference "org.apache.commons.csv.Lexer.nextToken(Token)" "org.apache.commons.csv.Token.Type.TOKEN : Type"
reference "org.apache.commons.csv.Lexer.nextToken(Token)" "org.apache.commons.csv.Token.Type.EORECORD : Type"
call "org.apache.commons.csv.Lexer.nextToken(Token)" "org.apache.commons.csv.Lexer.isQuoteChar(int)"
call "org.apache.commons.csv.Lexer.nextToken(Token)" "org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)"
reference "org.apache.commons.csv.Lexer.nextToken(Token)" "org.apache.commons.csv.Token.isReady : boolean"
call "org.apache.commons.csv.Lexer.nextToken(Token)" "org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.nextToken(Token)"
call "org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)" "org.apache.commons.csv.Lexer.readEndOfLine(int)"
reference "org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)" "org.apache.commons.csv.Token.Type.EORECORD : Type"
reference "org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)" "org.apache.commons.csv.Token.type : Type"
call "org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)" "org.apache.commons.csv.Lexer.isEndOfFile(int)"
reference "org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)" "org.apache.commons.csv.Token.Type.EOF : Type"
reference "org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)" "org.apache.commons.csv.Token.isReady : boolean"
call "org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)" "org.apache.commons.csv.Lexer.isDelimiter(int)"
reference "org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)" "org.apache.commons.csv.Token.Type.TOKEN : Type"
call "org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)" "org.apache.commons.csv.Lexer.isEscape(int)"
call "org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)" "org.apache.commons.csv.Lexer.readEscape()"
reference "org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)" "org.apache.commons.csv.Token.content : StringBuilder"
reference "org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)" "org.apache.commons.csv.Lexer.reader : ExtendedBufferedReader"
call "org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)" "org.apache.commons.csv.ExtendedBufferedReader.getLastChar()"
call "org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)" "org.apache.commons.csv.ExtendedBufferedReader.read()"
reference "org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)" "org.apache.commons.csv.Lexer.ignoreSurroundingSpaces : boolean"
call "org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)" "org.apache.commons.csv.Lexer.trimTrailingSpaces(StringBuilder)"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.parseSimpleToken(Token,int)"
call "org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)" "org.apache.commons.csv.Lexer.getCurrentLineNumber()"
reference "org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)" "org.apache.commons.csv.Lexer.reader : ExtendedBufferedReader"
call "org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)" "org.apache.commons.csv.ExtendedBufferedReader.read()"
call "org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)" "org.apache.commons.csv.Lexer.isEscape(int)"
call "org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)" "org.apache.commons.csv.Lexer.readEscape()"
reference "org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)" "org.apache.commons.csv.Token.content : StringBuilder"
call "org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)" "org.apache.commons.csv.ExtendedBufferedReader.getLastChar()"
call "org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)" "org.apache.commons.csv.Lexer.isQuoteChar(int)"
call "org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)" "org.apache.commons.csv.ExtendedBufferedReader.lookAhead()"
call "org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)" "org.apache.commons.csv.Lexer.isDelimiter(int)"
reference "org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)" "org.apache.commons.csv.Token.Type.TOKEN : Type"
reference "org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)" "org.apache.commons.csv.Token.type : Type"
call "org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)" "org.apache.commons.csv.Lexer.isEndOfFile(int)"
reference "org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)" "org.apache.commons.csv.Token.Type.EOF : Type"
reference "org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)" "org.apache.commons.csv.Token.isReady : boolean"
call "org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)" "org.apache.commons.csv.Lexer.readEndOfLine(int)"
reference "org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)" "org.apache.commons.csv.Token.Type.EORECORD : Type"
call "org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)" "org.apache.commons.csv.Lexer.isWhitespace(int)"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.parseEncapsulatedToken(Token)"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.mapNullToDisabled(Character)"
reference "org.apache.commons.csv.Lexer.getCurrentLineNumber()" "org.apache.commons.csv.Lexer.reader : ExtendedBufferedReader"
call "org.apache.commons.csv.Lexer.getCurrentLineNumber()" "org.apache.commons.csv.ExtendedBufferedReader.getCurrentLineNumber()"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.getCurrentLineNumber()"
reference "org.apache.commons.csv.Lexer.getCharacterPosition()" "org.apache.commons.csv.Lexer.reader : ExtendedBufferedReader"
call "org.apache.commons.csv.Lexer.getCharacterPosition()" "org.apache.commons.csv.ExtendedBufferedReader.getPosition()"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.getCharacterPosition()"
reference "org.apache.commons.csv.Lexer.readEscape()" "org.apache.commons.csv.Lexer.reader : ExtendedBufferedReader"
call "org.apache.commons.csv.Lexer.readEscape()" "org.apache.commons.csv.ExtendedBufferedReader.read()"
call "org.apache.commons.csv.Lexer.readEscape()" "org.apache.commons.csv.Lexer.isMetaChar(int)"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.readEscape()"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.trimTrailingSpaces(StringBuilder)"
reference "org.apache.commons.csv.Lexer.readEndOfLine(int)" "org.apache.commons.csv.Lexer.reader : ExtendedBufferedReader"
call "org.apache.commons.csv.Lexer.readEndOfLine(int)" "org.apache.commons.csv.ExtendedBufferedReader.lookAhead()"
call "org.apache.commons.csv.Lexer.readEndOfLine(int)" "org.apache.commons.csv.ExtendedBufferedReader.read()"
reference "org.apache.commons.csv.Lexer.readEndOfLine(int)" "org.apache.commons.csv.Lexer.firstEol : String"
reference "org.apache.commons.csv.Lexer.readEndOfLine(int)" "org.apache.commons.csv.Lexer.LF_STRING : String"
reference "org.apache.commons.csv.Lexer.readEndOfLine(int)" "org.apache.commons.csv.Lexer.CR_STRING : String"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.readEndOfLine(int)"
reference "org.apache.commons.csv.Lexer.isClosed()" "org.apache.commons.csv.Lexer.reader : ExtendedBufferedReader"
call "org.apache.commons.csv.Lexer.isClosed()" "org.apache.commons.csv.ExtendedBufferedReader.isClosed()"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.isClosed()"
call "org.apache.commons.csv.Lexer.isWhitespace(int)" "org.apache.commons.csv.Lexer.isDelimiter(int)"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.isWhitespace(int)"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.isStartOfLine(int)"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.isEndOfFile(int)"
reference "org.apache.commons.csv.Lexer.isDelimiter(int)" "org.apache.commons.csv.Lexer.delimiter : char"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.isDelimiter(int)"
reference "org.apache.commons.csv.Lexer.isEscape(int)" "org.apache.commons.csv.Lexer.escape : char"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.isEscape(int)"
reference "org.apache.commons.csv.Lexer.isQuoteChar(int)" "org.apache.commons.csv.Lexer.quoteChar : char"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.isQuoteChar(int)"
reference "org.apache.commons.csv.Lexer.isCommentStart(int)" "org.apache.commons.csv.Lexer.commentStart : char"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.isCommentStart(int)"
reference "org.apache.commons.csv.Lexer.isMetaChar(int)" "org.apache.commons.csv.Lexer.delimiter : char"
reference "org.apache.commons.csv.Lexer.isMetaChar(int)" "org.apache.commons.csv.Lexer.escape : char"
reference "org.apache.commons.csv.Lexer.isMetaChar(int)" "org.apache.commons.csv.Lexer.quoteChar : char"
reference "org.apache.commons.csv.Lexer.isMetaChar(int)" "org.apache.commons.csv.Lexer.commentStart : char"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.isMetaChar(int)"
reference "org.apache.commons.csv.Lexer.close()" "org.apache.commons.csv.Lexer.reader : ExtendedBufferedReader"
call "org.apache.commons.csv.Lexer.close()" "org.apache.commons.csv.ExtendedBufferedReader.close()"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.close()"
reference "org.apache.commons.csv.Lexer.static {...}" "org.apache.commons.csv.Lexer.CR_STRING : String"
reference "org.apache.commons.csv.Lexer.static {...}" "org.apache.commons.csv.Lexer.LF_STRING : String"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.static {...}"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.CR_STRING : String"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.LF_STRING : String"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.DISABLED : char"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.delimiter : char"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.escape : char"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.quoteChar : char"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.commentStart : char"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.ignoreSurroundingSpaces : boolean"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.ignoreEmptyLines : boolean"
reference "org.apache.commons.csv.Lexer.reader : ExtendedBufferedReader" "org.apache.commons.csv.ExtendedBufferedReader"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.reader : ExtendedBufferedReader"
contain "org.apache.commons.csv.Lexer" "org.apache.commons.csv.Lexer.firstEol : String"
reference "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.lang3.StringUtils"
reference "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVFormat"
reference "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVParser"
reference "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecord"
reference "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVPrinter"
reference "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.EnumHeader"
reference "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.EnumFixture"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.CSVRecordTest()"
reference "org.apache.commons.csv.CSVRecordTest.setUp()" "org.apache.commons.csv.CSVRecordTest.values : String[]"
call "org.apache.commons.csv.CSVRecordTest.setUp()" "org.apache.commons.lang3.StringUtils.join(Object[],char)"
reference "org.apache.commons.csv.CSVRecordTest.setUp()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVRecordTest.setUp()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.CSVRecordTest.setUp()" "org.apache.commons.csv.CSVParser.iterator()"
reference "org.apache.commons.csv.CSVRecordTest.setUp()" "org.apache.commons.csv.CSVRecordTest.record : CSVRecord"
call "org.apache.commons.csv.CSVRecordTest.setUp()" "org.apache.commons.csv.CSVParser.close()"
call "org.apache.commons.csv.CSVRecordTest.setUp()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
reference "org.apache.commons.csv.CSVRecordTest.setUp()" "org.apache.commons.csv.CSVRecordTest.recordWithHeader : CSVRecord"
call "org.apache.commons.csv.CSVRecordTest.setUp()" "org.apache.commons.csv.CSVParser.getHeaderMap()"
reference "org.apache.commons.csv.CSVRecordTest.setUp()" "org.apache.commons.csv.CSVRecordTest.headerMap : Map"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.setUp()"
reference "org.apache.commons.csv.CSVRecordTest.testGetInt()" "org.apache.commons.csv.CSVRecordTest.values : String[]"
reference "org.apache.commons.csv.CSVRecordTest.testGetInt()" "org.apache.commons.csv.CSVRecordTest.record : CSVRecord"
call "org.apache.commons.csv.CSVRecordTest.testGetInt()" "org.apache.commons.csv.CSVRecord.get(int)"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.testGetInt()"
reference "org.apache.commons.csv.CSVRecordTest.testGetString()" "org.apache.commons.csv.CSVRecordTest.values : String[]"
reference "org.apache.commons.csv.CSVRecordTest.testGetString()" "org.apache.commons.csv.CSVRecordTest.recordWithHeader : CSVRecord"
call "org.apache.commons.csv.CSVRecordTest.testGetString()" "org.apache.commons.csv.CSVRecord.get(String)"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.testGetString()"
reference "org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()" "org.apache.commons.csv.CSVRecordTest.headerMap : Map"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.testGetNullEnum()"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()"
reference "org.apache.commons.csv.CSVRecordTest.testIsConsistent()" "org.apache.commons.csv.CSVRecordTest.record : CSVRecord"
call "org.apache.commons.csv.CSVRecordTest.testIsConsistent()" "org.apache.commons.csv.CSVRecord.isConsistent()"
reference "org.apache.commons.csv.CSVRecordTest.testIsConsistent()" "org.apache.commons.csv.CSVRecordTest.recordWithHeader : CSVRecord"
call "org.apache.commons.csv.CSVRecordTest.testIsConsistent()" "org.apache.commons.csv.CSVRecord.getParser()"
call "org.apache.commons.csv.CSVRecordTest.testIsConsistent()" "org.apache.commons.csv.CSVParser.getHeaderMap()"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.testIsConsistent()"
reference "org.apache.commons.csv.CSVRecordTest.testIsInconsistent()" "org.apache.commons.csv.CSVRecordTest.values : String[]"
call "org.apache.commons.csv.CSVRecordTest.testIsInconsistent()" "org.apache.commons.lang3.StringUtils.join(Object[],char)"
reference "org.apache.commons.csv.CSVRecordTest.testIsInconsistent()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVRecordTest.testIsInconsistent()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVRecordTest.testIsInconsistent()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.CSVRecordTest.testIsInconsistent()" "org.apache.commons.csv.CSVParser.getHeaderMapRaw()"
call "org.apache.commons.csv.CSVRecordTest.testIsInconsistent()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVRecordTest.testIsInconsistent()" "org.apache.commons.csv.CSVRecord.isConsistent()"
call "org.apache.commons.csv.CSVRecordTest.testIsInconsistent()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.testIsInconsistent()"
reference "org.apache.commons.csv.CSVRecordTest.testIsMapped()" "org.apache.commons.csv.CSVRecordTest.record : CSVRecord"
call "org.apache.commons.csv.CSVRecordTest.testIsMapped()" "org.apache.commons.csv.CSVRecord.isMapped(String)"
reference "org.apache.commons.csv.CSVRecordTest.testIsMapped()" "org.apache.commons.csv.CSVRecordTest.recordWithHeader : CSVRecord"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.testIsMapped()"
reference "org.apache.commons.csv.CSVRecordTest.testIsSetInt()" "org.apache.commons.csv.CSVRecordTest.record : CSVRecord"
call "org.apache.commons.csv.CSVRecordTest.testIsSetInt()" "org.apache.commons.csv.CSVRecord.isSet(int)"
reference "org.apache.commons.csv.CSVRecordTest.testIsSetInt()" "org.apache.commons.csv.CSVRecordTest.recordWithHeader : CSVRecord"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.testIsSetInt()"
reference "org.apache.commons.csv.CSVRecordTest.testIsSetString()" "org.apache.commons.csv.CSVRecordTest.record : CSVRecord"
call "org.apache.commons.csv.CSVRecordTest.testIsSetString()" "org.apache.commons.csv.CSVRecord.isSet(String)"
reference "org.apache.commons.csv.CSVRecordTest.testIsSetString()" "org.apache.commons.csv.CSVRecordTest.recordWithHeader : CSVRecord"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.testIsSetString()"
reference "org.apache.commons.csv.CSVRecordTest.testIterator()" "org.apache.commons.csv.CSVRecordTest.record : CSVRecord"
call "org.apache.commons.csv.CSVRecordTest.testIterator()" "org.apache.commons.csv.CSVRecord.iterator()"
reference "org.apache.commons.csv.CSVRecordTest.testIterator()" "org.apache.commons.csv.CSVRecordTest.values : String[]"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.testIterator()"
reference "org.apache.commons.csv.CSVRecordTest.testPutInMap()" "org.apache.commons.csv.CSVRecordTest.recordWithHeader : CSVRecord"
call "org.apache.commons.csv.CSVRecordTest.testPutInMap()" "org.apache.commons.csv.CSVRecord.putIn(Map)"
call "org.apache.commons.csv.CSVRecordTest.testPutInMap()" "org.apache.commons.csv.CSVRecordTest.validateMap(Map,boolean)"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.testPutInMap()"
reference "org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
reference "org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()" "org.apache.commons.csv.CSVRecordTest.recordWithHeader : CSVRecord"
call "org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()" "org.apache.commons.csv.CSVRecord.toMap()"
call "org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()" "org.apache.commons.csv.CSVPrinter.printRecord(Iterable)"
call "org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()" "org.apache.commons.csv.CSVFormat.getRecordSeparator()"
call "org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()" "org.apache.commons.csv.CSVPrinter.getOut()"
call "org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()"
reference "org.apache.commons.csv.CSVRecordTest.testSerialization()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVRecordTest.testSerialization()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVRecordTest.testSerialization()" "org.apache.commons.csv.CSVFormat.withCommentMarker(char)"
call "org.apache.commons.csv.CSVRecordTest.testSerialization()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVRecordTest.testSerialization()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVRecordTest.testSerialization()" "org.apache.commons.csv.CSVParser.close()"
call "org.apache.commons.csv.CSVRecordTest.testSerialization()" "org.apache.commons.csv.CSVRecord.getRecordNumber()"
call "org.apache.commons.csv.CSVRecordTest.testSerialization()" "org.apache.commons.csv.CSVRecord.get(int)"
call "org.apache.commons.csv.CSVRecordTest.testSerialization()" "org.apache.commons.csv.CSVRecord.size()"
call "org.apache.commons.csv.CSVRecordTest.testSerialization()" "org.apache.commons.csv.CSVRecord.getCharacterPosition()"
call "org.apache.commons.csv.CSVRecordTest.testSerialization()" "org.apache.commons.csv.CSVRecord.getComment()"
call "org.apache.commons.csv.CSVRecordTest.testSerialization()" "org.apache.commons.csv.CSVRecord.getParser()"
call "org.apache.commons.csv.CSVRecordTest.testSerialization()" "org.apache.commons.csv.CSVRecord.isConsistent()"
call "org.apache.commons.csv.CSVRecordTest.testSerialization()" "org.apache.commons.csv.CSVRecord.isMapped(String)"
call "org.apache.commons.csv.CSVRecordTest.testSerialization()" "org.apache.commons.csv.CSVRecord.isSet(String)"
call "org.apache.commons.csv.CSVRecordTest.testSerialization()" "org.apache.commons.csv.CSVRecord.toMap()"
call "org.apache.commons.csv.CSVRecordTest.testSerialization()" "org.apache.commons.csv.CSVRecord.get(String)"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.testSerialization()"
reference "org.apache.commons.csv.CSVRecordTest.testToMap()" "org.apache.commons.csv.CSVRecordTest.recordWithHeader : CSVRecord"
call "org.apache.commons.csv.CSVRecordTest.testToMap()" "org.apache.commons.csv.CSVRecord.toMap()"
call "org.apache.commons.csv.CSVRecordTest.testToMap()" "org.apache.commons.csv.CSVRecordTest.validateMap(Map,boolean)"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.testToMap()"
call "org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()" "org.apache.commons.csv.CSVFormat.newFormat(char)"
call "org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()" "org.apache.commons.csv.CSVRecord.toMap()"
call "org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()"
reference "org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()" "org.apache.commons.csv.CSVRecord.toMap()"
call "org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.validateMap(Map,boolean)"
reference "org.apache.commons.csv.CSVRecordTest.testToString()" "org.apache.commons.csv.CSVRecordTest.recordWithHeader : CSVRecord"
call "org.apache.commons.csv.CSVRecordTest.testToString()" "org.apache.commons.csv.CSVRecord.toString()"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.testToString()"
reference "org.apache.commons.csv.CSVRecordTest.testGetWithEnum()" "org.apache.commons.csv.CSVRecordTest.recordWithHeader : CSVRecord"
call "org.apache.commons.csv.CSVRecordTest.testGetWithEnum()" "org.apache.commons.csv.CSVRecord.get(String)"
reference "org.apache.commons.csv.CSVRecordTest.testGetWithEnum()" "org.apache.commons.csv.CSVRecordTest.EnumHeader.FIRST : EnumHeader"
call "org.apache.commons.csv.CSVRecordTest.testGetWithEnum()" "org.apache.commons.csv.CSVRecord.get(Enum)"
reference "org.apache.commons.csv.CSVRecordTest.testGetWithEnum()" "org.apache.commons.csv.CSVRecordTest.EnumHeader.SECOND : EnumHeader"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.testGetWithEnum()"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.lambda$testGetWithEnum$7()"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.lambda$testGetUnmappedPositiveInt$6()"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.lambda$testGetUnmappedNegativeInt$5()"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.lambda$testGetUnmappedName$4()"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.lambda$testGetNullEnum$3()"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.lambda$testGetUnmappedEnum$2()"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.lambda$testGetStringNoHeader$1()"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.lambda$testGetStringInconsistentRecord$0()"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.headerMap : Map"
reference "org.apache.commons.csv.CSVRecordTest.record : CSVRecord" "org.apache.commons.csv.CSVRecord"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.record : CSVRecord"
reference "org.apache.commons.csv.CSVRecordTest.recordWithHeader : CSVRecord" "org.apache.commons.csv.CSVRecord"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.recordWithHeader : CSVRecord"
contain "org.apache.commons.csv.CSVRecordTest" "org.apache.commons.csv.CSVRecordTest.values : String[]"
reference "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.Constants"
reference "org.apache.commons.csv.CSVParserTest" "org.apache.commons.io.input.BOMInputStream"
reference "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParser"
reference "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVRecord"
reference "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVFormat"
reference "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.Utils"
reference "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVPrinter"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.CSVParserTest()"
call "org.apache.commons.csv.CSVParserTest.createBOMInputStream(String)" "org.apache.commons.io.input.BOMInputStream.BOMInputStream(InputStream)"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.createBOMInputStream(String)"
call "org.apache.commons.csv.CSVParserTest.parseFully(CSVParser)" "org.apache.commons.csv.CSVParser.iterator()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.parseFully(CSVParser)"
call "org.apache.commons.csv.CSVParserTest.testBackslashEscaping()" "org.apache.commons.csv.CSVFormat.newFormat(char)"
call "org.apache.commons.csv.CSVParserTest.testBackslashEscaping()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
call "org.apache.commons.csv.CSVParserTest.testBackslashEscaping()" "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)"
call "org.apache.commons.csv.CSVParserTest.testBackslashEscaping()" "org.apache.commons.csv.CSVFormat.withEscape(char)"
call "org.apache.commons.csv.CSVParserTest.testBackslashEscaping()" "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines()"
call "org.apache.commons.csv.CSVParserTest.testBackslashEscaping()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testBackslashEscaping()" "org.apache.commons.csv.CSVParser.getRecords()"
call "org.apache.commons.csv.CSVParserTest.testBackslashEscaping()" "org.apache.commons.csv.Utils.compare(String,String[][],List)"
call "org.apache.commons.csv.CSVParserTest.testBackslashEscaping()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testBackslashEscaping()"
call "org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()" "org.apache.commons.csv.CSVFormat.newFormat(char)"
call "org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()" "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)"
call "org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()" "org.apache.commons.csv.CSVFormat.withEscape(char)"
call "org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()" "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines()"
call "org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()" "org.apache.commons.csv.CSVParser.getRecords()"
call "org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()" "org.apache.commons.csv.Utils.compare(String,String[][],List)"
call "org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()"
reference "org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()" "org.apache.commons.csv.CSVParser.getRecords()"
call "org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()" "org.apache.commons.csv.CSVRecord.values()"
call "org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld()"
reference "org.apache.commons.csv.CSVParserTest.testBOM()" "org.apache.commons.csv.CSVParserTest.UTF_8_NAME : String"
reference "org.apache.commons.csv.CSVParserTest.testBOM()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testBOM()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVParserTest.testBOM()" "org.apache.commons.csv.CSVParser.parse(URL,Charset,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testBOM()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testBOM()" "org.apache.commons.csv.CSVRecord.get(String)"
call "org.apache.commons.csv.CSVParserTest.testBOM()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testBOM()"
call "org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()" "org.apache.commons.csv.CSVParserTest.createBOMInputStream(String)"
reference "org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()" "org.apache.commons.csv.CSVParserTest.UTF_8 : Charset"
reference "org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()" "org.apache.commons.csv.CSVParser.parse(InputStream,Charset,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()" "org.apache.commons.csv.CSVRecord.get(String)"
call "org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()" "org.apache.commons.csv.CSVParser.close()"
call "org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()" "org.apache.commons.io.input.BOMInputStream.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()"
call "org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()" "org.apache.commons.csv.CSVParserTest.createBOMInputStream(String)"
reference "org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()" "org.apache.commons.csv.CSVParserTest.UTF_8_NAME : String"
reference "org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()" "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()" "org.apache.commons.csv.CSVRecord.get(String)"
call "org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()"
call "org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()" "org.apache.commons.csv.CSVParserTest.createBOMInputStream(String)"
reference "org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()" "org.apache.commons.csv.CSVParserTest.UTF_8_NAME : String"
reference "org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()" "org.apache.commons.csv.CSVParser.parse(Reader,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()" "org.apache.commons.csv.CSVRecord.get(String)"
call "org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()"
reference "org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()" "org.apache.commons.csv.CSVParser.getRecords()"
call "org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()"
reference "org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()" "org.apache.commons.csv.CSVParser.getRecords()"
call "org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()"
reference "org.apache.commons.csv.CSVParserTest.testClose()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testClose()" "org.apache.commons.csv.CSVFormat.withCommentMarker(char)"
call "org.apache.commons.csv.CSVParserTest.testClose()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVParserTest.testClose()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.CSVParserTest.testClose()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testClose()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testClose()"
reference "org.apache.commons.csv.CSVParserTest.testCSV57()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testCSV57()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testCSV57()" "org.apache.commons.csv.CSVParser.getRecords()"
call "org.apache.commons.csv.CSVParserTest.testCSV57()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testCSV57()"
reference "org.apache.commons.csv.CSVParserTest.testDefaultFormat()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testDefaultFormat()" "org.apache.commons.csv.CSVFormat.isCommentMarkerSet()"
call "org.apache.commons.csv.CSVParserTest.testDefaultFormat()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testDefaultFormat()" "org.apache.commons.csv.CSVParser.getRecords()"
call "org.apache.commons.csv.CSVParserTest.testDefaultFormat()" "org.apache.commons.csv.Utils.compare(String,String[][],List)"
call "org.apache.commons.csv.CSVParserTest.testDefaultFormat()" "org.apache.commons.csv.CSVFormat.withCommentMarker(char)"
call "org.apache.commons.csv.CSVParserTest.testDefaultFormat()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testDefaultFormat()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()"
reference "org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()"
reference "org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()" "org.apache.commons.csv.CSVFormat.withFirstRecordAsHeader()"
call "org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()" "org.apache.commons.csv.CSVParser.nextRecord()"
call "org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()" "org.apache.commons.csv.CSVParser.getHeaderNames()"
call "org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()"
reference "org.apache.commons.csv.CSVParserTest.testEmptyFile()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testEmptyFile()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testEmptyFile()" "org.apache.commons.csv.CSVParser.nextRecord()"
call "org.apache.commons.csv.CSVParserTest.testEmptyFile()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testEmptyFile()"
reference "org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()" "org.apache.commons.csv.CSVParser.getRecords()"
call "org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()" "org.apache.commons.csv.CSVRecord.values()"
call "org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()"
reference "org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()" "org.apache.commons.csv.CSVParser.getRecords()"
call "org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()" "org.apache.commons.csv.CSVRecord.values()"
call "org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()"
reference "org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()" "org.apache.commons.csv.CSVParser.getRecords()"
call "org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()" "org.apache.commons.csv.CSVRecord.values()"
call "org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()"
reference "org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()" "org.apache.commons.csv.CSVParser.getRecords()"
call "org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()" "org.apache.commons.csv.CSVRecord.values()"
call "org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()"
reference "org.apache.commons.csv.CSVParserTest.testExcelFormat1()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testExcelFormat1()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testExcelFormat1()" "org.apache.commons.csv.CSVParser.getRecords()"
call "org.apache.commons.csv.CSVParserTest.testExcelFormat1()" "org.apache.commons.csv.CSVRecord.values()"
call "org.apache.commons.csv.CSVParserTest.testExcelFormat1()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testExcelFormat1()"
reference "org.apache.commons.csv.CSVParserTest.testExcelFormat2()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testExcelFormat2()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testExcelFormat2()" "org.apache.commons.csv.CSVParser.getRecords()"
call "org.apache.commons.csv.CSVParserTest.testExcelFormat2()" "org.apache.commons.csv.CSVRecord.values()"
call "org.apache.commons.csv.CSVParserTest.testExcelFormat2()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testExcelFormat2()"
reference "org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()" "org.apache.commons.csv.CSVParser.getRecords()"
call "org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()" "org.apache.commons.csv.CSVRecord.get(String)"
call "org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()"
reference "org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()" "org.apache.commons.csv.CSVParser.getRecords()"
call "org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()" "org.apache.commons.csv.CSVParser.getFirstEndOfLine()"
call "org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()"
reference "org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()" "org.apache.commons.csv.CSVParser.getRecords()"
call "org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()" "org.apache.commons.csv.CSVParser.getFirstEndOfLine()"
call "org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()"
reference "org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()" "org.apache.commons.csv.CSVParser.getRecords()"
call "org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()" "org.apache.commons.csv.CSVParser.getFirstEndOfLine()"
call "org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()"
reference "org.apache.commons.csv.CSVParserTest.testForEach()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testForEach()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.CSVParserTest.testForEach()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testForEach()" "org.apache.commons.csv.CSVRecord.values()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testForEach()"
reference "org.apache.commons.csv.CSVParserTest.testGetHeaderMap()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testGetHeaderMap()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVParserTest.testGetHeaderMap()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testGetHeaderMap()" "org.apache.commons.csv.CSVParser.getHeaderMap()"
call "org.apache.commons.csv.CSVParserTest.testGetHeaderMap()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testGetHeaderMap()" "org.apache.commons.csv.CSVRecord.get(int)"
call "org.apache.commons.csv.CSVParserTest.testGetHeaderMap()" "org.apache.commons.csv.CSVRecord.get(String)"
call "org.apache.commons.csv.CSVParserTest.testGetHeaderMap()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testGetHeaderMap()"
reference "org.apache.commons.csv.CSVParserTest.testGetHeaderNames()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testGetHeaderNames()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVParserTest.testGetHeaderNames()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testGetHeaderNames()" "org.apache.commons.csv.CSVParser.getHeaderMap()"
call "org.apache.commons.csv.CSVParserTest.testGetHeaderNames()" "org.apache.commons.csv.CSVParser.getHeaderNames()"
call "org.apache.commons.csv.CSVParserTest.testGetHeaderNames()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testGetHeaderNames()"
reference "org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()" "org.apache.commons.csv.CSVParser.getHeaderNames()"
call "org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()"
reference "org.apache.commons.csv.CSVParserTest.testGetLine()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testGetLine()" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces()"
call "org.apache.commons.csv.CSVParserTest.testGetLine()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
reference "org.apache.commons.csv.CSVParserTest.testGetLine()" "org.apache.commons.csv.CSVParserTest.RESULT : String[][]"
call "org.apache.commons.csv.CSVParserTest.testGetLine()" "org.apache.commons.csv.CSVParser.nextRecord()"
call "org.apache.commons.csv.CSVParserTest.testGetLine()" "org.apache.commons.csv.CSVRecord.values()"
call "org.apache.commons.csv.CSVParserTest.testGetLine()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testGetLine()"
call "org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()" "org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()"
call "org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()" "org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()"
call "org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()" "org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()"
reference "org.apache.commons.csv.CSVParserTest.testGetOneLine()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testGetOneLine()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testGetOneLine()" "org.apache.commons.csv.CSVParser.getRecords()"
reference "org.apache.commons.csv.CSVParserTest.testGetOneLine()" "org.apache.commons.csv.CSVParserTest.RESULT : String[][]"
call "org.apache.commons.csv.CSVParserTest.testGetOneLine()" "org.apache.commons.csv.CSVRecord.values()"
call "org.apache.commons.csv.CSVParserTest.testGetOneLine()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testGetOneLine()"
reference "org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()" "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()" "org.apache.commons.csv.CSVFormat.getRecordSeparator()"
call "org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()" "org.apache.commons.csv.CSVParser.nextRecord()"
reference "org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()" "org.apache.commons.csv.CSVParserTest.RESULT : String[][]"
call "org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()" "org.apache.commons.csv.CSVRecord.values()"
call "org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()"
call "org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()" "org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()"
call "org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()" "org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()"
call "org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()" "org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()"
call "org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()" "org.apache.commons.csv.CSVParserTest.validateRecordPosition(String)"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()"
call "org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()" "org.apache.commons.csv.CSVParserTest.validateRecordPosition(String)"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()"
reference "org.apache.commons.csv.CSVParserTest.testGetRecords()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testGetRecords()" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces()"
call "org.apache.commons.csv.CSVParserTest.testGetRecords()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testGetRecords()" "org.apache.commons.csv.CSVParser.getRecords()"
reference "org.apache.commons.csv.CSVParserTest.testGetRecords()" "org.apache.commons.csv.CSVParserTest.RESULT : String[][]"
call "org.apache.commons.csv.CSVParserTest.testGetRecords()" "org.apache.commons.csv.CSVRecord.values()"
call "org.apache.commons.csv.CSVParserTest.testGetRecords()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testGetRecords()"
reference "org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()" "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)"
call "org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()" "org.apache.commons.csv.CSVParser.getRecordNumber()"
call "org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()" "org.apache.commons.csv.CSVParser.getCurrentLineNumber()"
call "org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()" "org.apache.commons.csv.CSVParser.nextRecord()"
call "org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()" "org.apache.commons.csv.CSVRecord.getRecordNumber()"
call "org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()"
reference "org.apache.commons.csv.CSVParserTest.testHeader()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testHeader()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVParserTest.testHeader()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.CSVParserTest.testHeader()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testHeader()" "org.apache.commons.csv.CSVRecord.get(int)"
call "org.apache.commons.csv.CSVParserTest.testHeader()" "org.apache.commons.csv.CSVRecord.get(String)"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testHeader()"
reference "org.apache.commons.csv.CSVParserTest.testHeaderComment()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testHeaderComment()" "org.apache.commons.csv.CSVFormat.withCommentMarker(char)"
call "org.apache.commons.csv.CSVParserTest.testHeaderComment()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVParserTest.testHeaderComment()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.CSVParserTest.testHeaderComment()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testHeaderComment()" "org.apache.commons.csv.CSVRecord.get(int)"
call "org.apache.commons.csv.CSVParserTest.testHeaderComment()" "org.apache.commons.csv.CSVRecord.get(String)"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testHeaderComment()"
reference "org.apache.commons.csv.CSVParserTest.testHeaderMissing()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testHeaderMissing()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVParserTest.testHeaderMissing()" "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames()"
call "org.apache.commons.csv.CSVParserTest.testHeaderMissing()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.CSVParserTest.testHeaderMissing()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testHeaderMissing()" "org.apache.commons.csv.CSVRecord.get(int)"
call "org.apache.commons.csv.CSVParserTest.testHeaderMissing()" "org.apache.commons.csv.CSVRecord.get(String)"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testHeaderMissing()"
reference "org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()" "org.apache.commons.csv.CSVFormat.withNullString(String)"
call "org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()" "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames()"
call "org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()" "org.apache.commons.csv.CSVParser.iterator()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()"
reference "org.apache.commons.csv.CSVParserTest.testHeadersMissing()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testHeadersMissing()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVParserTest.testHeadersMissing()" "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames()"
call "org.apache.commons.csv.CSVParserTest.testHeadersMissing()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.CSVParserTest.testHeadersMissing()" "org.apache.commons.csv.CSVParser.iterator()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testHeadersMissing()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testHeadersMissingException()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()"
reference "org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()" "org.apache.commons.csv.CSVFormat.withNullString(String)"
call "org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()" "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames()"
call "org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()" "org.apache.commons.csv.CSVRecord.getParser()"
call "org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()" "org.apache.commons.csv.CSVParser.getHeaderNames()"
call "org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()" "org.apache.commons.csv.CSVParser.getHeaderMap()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()"
reference "org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()" "org.apache.commons.csv.CSVFormat.withIgnoreHeaderCase()"
call "org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()" "org.apache.commons.csv.CSVRecord.get(String)"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()"
reference "org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()" "org.apache.commons.csv.CSVParser.getRecords()"
call "org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testInvalidFormat()"
reference "org.apache.commons.csv.CSVParserTest.testIterator()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testIterator()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.CSVParserTest.testIterator()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testIterator()" "org.apache.commons.csv.CSVRecord.values()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testIterator()"
reference "org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()" "org.apache.commons.csv.CSVRecord.get(int)"
call "org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()"
reference "org.apache.commons.csv.CSVParserTest.testLineFeedEndings()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testLineFeedEndings()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testLineFeedEndings()" "org.apache.commons.csv.CSVParser.getRecords()"
call "org.apache.commons.csv.CSVParserTest.testLineFeedEndings()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testLineFeedEndings()"
reference "org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()" "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord()"
call "org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()" "org.apache.commons.csv.CSVRecord.isMapped(String)"
call "org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()" "org.apache.commons.csv.CSVRecord.isSet(String)"
call "org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()" "org.apache.commons.csv.CSVRecord.get(String)"
call "org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()" "org.apache.commons.csv.CSVRecord.isConsistent()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()"
reference "org.apache.commons.csv.CSVParserTest.testMongoDbCsv()" "org.apache.commons.csv.CSVFormat.MONGODB_CSV : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testMongoDbCsv()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testMongoDbCsv()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testMongoDbCsv()" "org.apache.commons.csv.CSVRecord.get(int)"
call "org.apache.commons.csv.CSVParserTest.testMongoDbCsv()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testMongoDbCsv()"
reference "org.apache.commons.csv.CSVParserTest.testMultipleIterators()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testMultipleIterators()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testMultipleIterators()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testMultipleIterators()" "org.apache.commons.csv.CSVRecord.get(int)"
call "org.apache.commons.csv.CSVParserTest.testMultipleIterators()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testMultipleIterators()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testNewCSVParserNullReaderFormat()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testNewCSVParserReaderNullFormat()"
reference "org.apache.commons.csv.CSVParserTest.testNoHeaderMap()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testNoHeaderMap()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testNoHeaderMap()" "org.apache.commons.csv.CSVParser.getHeaderMap()"
call "org.apache.commons.csv.CSVParserTest.testNoHeaderMap()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testNoHeaderMap()"
reference "org.apache.commons.csv.CSVParserTest.testParse()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testParse()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVParserTest.testParse()" "org.apache.commons.csv.CSVParser.parse(Reader,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testParse()" "org.apache.commons.csv.CSVParserTest.parseFully(CSVParser)"
call "org.apache.commons.csv.CSVParserTest.testParse()" "org.apache.commons.csv.CSVParser.close()"
call "org.apache.commons.csv.CSVParserTest.testParse()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testParse()" "org.apache.commons.csv.CSVParser.parse(File,Charset,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testParse()" "org.apache.commons.csv.CSVParser.parse(InputStream,Charset,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testParse()" "org.apache.commons.csv.CSVParser.parse(Path,Charset,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testParse()" "org.apache.commons.csv.CSVParser.parse(URL,Charset,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testParse()" "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testParse()" "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testParse()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testParseFileNullFormat()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testParseNullFileFormat()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testParseNullPathFormat()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testParseNullStringFormat()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testParseNullUrlCharsetFormat()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testParserUrlNullCharsetFormat()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testParseStringNullFormat()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testParseUrlCharsetNullFormat()"
reference "org.apache.commons.csv.CSVParserTest.testProvidedHeader()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testProvidedHeader()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVParserTest.testProvidedHeader()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.CSVParserTest.testProvidedHeader()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testProvidedHeader()" "org.apache.commons.csv.CSVRecord.isMapped(String)"
call "org.apache.commons.csv.CSVParserTest.testProvidedHeader()" "org.apache.commons.csv.CSVRecord.get(int)"
call "org.apache.commons.csv.CSVParserTest.testProvidedHeader()" "org.apache.commons.csv.CSVRecord.get(String)"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testProvidedHeader()"
reference "org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()" "org.apache.commons.csv.CSVRecord.isMapped(String)"
call "org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()" "org.apache.commons.csv.CSVRecord.get(int)"
call "org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()" "org.apache.commons.csv.CSVRecord.get(String)"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()"
reference "org.apache.commons.csv.CSVParserTest.testRoundtrip()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testRoundtrip()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testRoundtrip()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testRoundtrip()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testRoundtrip()" "org.apache.commons.csv.CSVPrinter.printRecord(Iterable)"
call "org.apache.commons.csv.CSVParserTest.testRoundtrip()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testRoundtrip()"
reference "org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()" "org.apache.commons.csv.CSVRecord.get(String)"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()"
reference "org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()" "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord()"
call "org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()" "org.apache.commons.csv.CSVRecord.get(String)"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()"
reference "org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()" "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord()"
call "org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()" "org.apache.commons.csv.CSVRecord.get(String)"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()"
reference "org.apache.commons.csv.CSVParserTest.testSkipSetHeader()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testSkipSetHeader()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVParserTest.testSkipSetHeader()" "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord()"
call "org.apache.commons.csv.CSVParserTest.testSkipSetHeader()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.CSVParserTest.testSkipSetHeader()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testSkipSetHeader()" "org.apache.commons.csv.CSVRecord.get(String)"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testSkipSetHeader()"
reference "org.apache.commons.csv.CSVParserTest.testStartWithEmptyLinesThenHeaders()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testStartWithEmptyLinesThenHeaders()" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.testStartWithEmptyLinesThenHeaders()" "org.apache.commons.csv.CSVParser.getRecords()"
call "org.apache.commons.csv.CSVParserTest.testStartWithEmptyLinesThenHeaders()" "org.apache.commons.csv.CSVRecord.values()"
call "org.apache.commons.csv.CSVParserTest.testStartWithEmptyLinesThenHeaders()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testStartWithEmptyLinesThenHeaders()"
reference "org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()" "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord()"
call "org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()" "org.apache.commons.csv.CSVFormat.withTrailingDelimiter()"
call "org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()" "org.apache.commons.csv.CSVRecord.get(String)"
call "org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()" "org.apache.commons.csv.CSVRecord.size()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()"
reference "org.apache.commons.csv.CSVParserTest.testTrim()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testTrim()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVParserTest.testTrim()" "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord()"
call "org.apache.commons.csv.CSVParserTest.testTrim()" "org.apache.commons.csv.CSVFormat.withTrim()"
call "org.apache.commons.csv.CSVParserTest.testTrim()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.CSVParserTest.testTrim()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testTrim()" "org.apache.commons.csv.CSVRecord.get(String)"
call "org.apache.commons.csv.CSVParserTest.testTrim()" "org.apache.commons.csv.CSVRecord.size()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testTrim()"
reference "org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()" "org.apache.commons.csv.CSVFormat.withFirstRecordAsHeader()"
call "org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()" "org.apache.commons.csv.CSVFormat.withTrim()"
call "org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()" "org.apache.commons.csv.CSVRecord.getParser()"
call "org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()" "org.apache.commons.csv.CSVParser.getHeaderNames()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()"
reference "org.apache.commons.csv.CSVParserTest.testCSV235()" "org.apache.commons.csv.CSVFormat.RFC4180 : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.testCSV235()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.CSVParserTest.testCSV235()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVParserTest.testCSV235()" "org.apache.commons.csv.CSVRecord.size()"
call "org.apache.commons.csv.CSVParserTest.testCSV235()" "org.apache.commons.csv.CSVRecord.get(int)"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.testCSV235()"
reference "org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)" "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)"
call "org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)" "org.apache.commons.csv.CSVParser.getCurrentLineNumber()"
call "org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)" "org.apache.commons.csv.CSVParser.nextRecord()"
call "org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.validateLineNumbers(String)"
reference "org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)" "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)"
call "org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)" "org.apache.commons.csv.CSVParser.getRecordNumber()"
call "org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)" "org.apache.commons.csv.CSVParser.nextRecord()"
call "org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)" "org.apache.commons.csv.CSVRecord.getRecordNumber()"
call "org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.validateRecordNumbers(String)"
call "org.apache.commons.csv.CSVParserTest.validateRecordPosition(String)" "org.apache.commons.csv.CSVFormat.newFormat(char)"
call "org.apache.commons.csv.CSVParserTest.validateRecordPosition(String)" "org.apache.commons.csv.CSVFormat.withQuote(char)"
call "org.apache.commons.csv.CSVParserTest.validateRecordPosition(String)" "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)"
call "org.apache.commons.csv.CSVParserTest.validateRecordPosition(String)" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVParserTest.validateRecordPosition(String)" "org.apache.commons.csv.CSVParser.getRecordNumber()"
call "org.apache.commons.csv.CSVParserTest.validateRecordPosition(String)" "org.apache.commons.csv.CSVParser.nextRecord()"
call "org.apache.commons.csv.CSVParserTest.validateRecordPosition(String)" "org.apache.commons.csv.CSVRecord.getRecordNumber()"
call "org.apache.commons.csv.CSVParserTest.validateRecordPosition(String)" "org.apache.commons.csv.CSVRecord.getCharacterPosition()"
call "org.apache.commons.csv.CSVParserTest.validateRecordPosition(String)" "org.apache.commons.csv.CSVRecord.get(int)"
call "org.apache.commons.csv.CSVParserTest.validateRecordPosition(String)" "org.apache.commons.csv.CSVParser.close()"
call "org.apache.commons.csv.CSVParserTest.validateRecordPosition(String)" "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.validateRecordPosition(String)"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.lambda$testParseUrlCharsetNullFormat$14()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.lambda$testParseStringNullFormat$13()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.lambda$testParserUrlNullCharsetFormat$12()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.lambda$testParseNullUrlCharsetFormat$11()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.lambda$testParseNullStringFormat$10()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.lambda$testParseNullPathFormat$9()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.lambda$testParseNullFileFormat$8()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.lambda$testParseFileNullFormat$7()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.lambda$testNewCSVParserReaderNullFormat$6()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.lambda$testNewCSVParserNullReaderFormat$5()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.lambda$testInvalidFormat$4()"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.lambda$testHeadersMissingOneColumnException$3(Reader)"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.lambda$testHeadersMissingException$2(Reader)"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.lambda$testGetHeaderNamesReadOnly$1(List)"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.lambda$testDuplicateHeadersNotAllowed$0()"
reference "org.apache.commons.csv.CSVParserTest.static {...}" "org.apache.commons.csv.CSVParserTest.UTF_8 : Charset"
reference "org.apache.commons.csv.CSVParserTest.static {...}" "org.apache.commons.csv.CSVParserTest.UTF_8_NAME : String"
reference "org.apache.commons.csv.CSVParserTest.static {...}" "org.apache.commons.csv.CSVParserTest.RESULT : String[][]"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.static {...}"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.UTF_8 : Charset"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.UTF_8_NAME : String"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.CSV_INPUT : String"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.CSV_INPUT_1 : String"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.CSV_INPUT_2 : String"
contain "org.apache.commons.csv.CSVParserTest" "org.apache.commons.csv.CSVParserTest.RESULT : String[][]"
reference "org.apache.commons.csv.CSVPrinter" "org.apache.commons.csv.Constants"
reference "org.apache.commons.csv.CSVPrinter" "org.apache.commons.csv.Assertions"
reference "org.apache.commons.csv.CSVPrinter" "org.apache.commons.csv.CSVFormat"
reference "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)" "org.apache.commons.csv.CSVPrinter.newRecord : boolean"
call "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)" "org.apache.commons.csv.Assertions.notNull(Object,String)"
reference "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)" "org.apache.commons.csv.CSVPrinter.out : Appendable"
reference "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)" "org.apache.commons.csv.CSVPrinter.format : CSVFormat"
call "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)" "org.apache.commons.csv.CSVFormat.getHeaderComments()"
call "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)" "org.apache.commons.csv.CSVPrinter.printComment(String)"
call "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)" "org.apache.commons.csv.CSVFormat.getHeader()"
call "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)" "org.apache.commons.csv.CSVFormat.getSkipHeaderRecord()"
call "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
contain "org.apache.commons.csv.CSVPrinter" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinter.close()" "org.apache.commons.csv.CSVPrinter.close(boolean)"
contain "org.apache.commons.csv.CSVPrinter" "org.apache.commons.csv.CSVPrinter.close()"
reference "org.apache.commons.csv.CSVPrinter.close(boolean)" "org.apache.commons.csv.CSVPrinter.format : CSVFormat"
call "org.apache.commons.csv.CSVPrinter.close(boolean)" "org.apache.commons.csv.CSVFormat.getAutoFlush()"
call "org.apache.commons.csv.CSVPrinter.close(boolean)" "org.apache.commons.csv.CSVPrinter.flush()"
reference "org.apache.commons.csv.CSVPrinter.close(boolean)" "org.apache.commons.csv.CSVPrinter.out : Appendable"
contain "org.apache.commons.csv.CSVPrinter" "org.apache.commons.csv.CSVPrinter.close(boolean)"
reference "org.apache.commons.csv.CSVPrinter.flush()" "org.apache.commons.csv.CSVPrinter.out : Appendable"
contain "org.apache.commons.csv.CSVPrinter" "org.apache.commons.csv.CSVPrinter.flush()"
reference "org.apache.commons.csv.CSVPrinter.getOut()" "org.apache.commons.csv.CSVPrinter.out : Appendable"
contain "org.apache.commons.csv.CSVPrinter" "org.apache.commons.csv.CSVPrinter.getOut()"
reference "org.apache.commons.csv.CSVPrinter.print(Object)" "org.apache.commons.csv.CSVPrinter.format : CSVFormat"
reference "org.apache.commons.csv.CSVPrinter.print(Object)" "org.apache.commons.csv.CSVPrinter.out : Appendable"
reference "org.apache.commons.csv.CSVPrinter.print(Object)" "org.apache.commons.csv.CSVPrinter.newRecord : boolean"
call "org.apache.commons.csv.CSVPrinter.print(Object)" "org.apache.commons.csv.CSVFormat.print(Object,Appendable,boolean)"
contain "org.apache.commons.csv.CSVPrinter" "org.apache.commons.csv.CSVPrinter.print(Object)"
reference "org.apache.commons.csv.CSVPrinter.printComment(String)" "org.apache.commons.csv.CSVPrinter.format : CSVFormat"
call "org.apache.commons.csv.CSVPrinter.printComment(String)" "org.apache.commons.csv.CSVFormat.isCommentMarkerSet()"
reference "org.apache.commons.csv.CSVPrinter.printComment(String)" "org.apache.commons.csv.CSVPrinter.newRecord : boolean"
call "org.apache.commons.csv.CSVPrinter.printComment(String)" "org.apache.commons.csv.CSVPrinter.println()"
reference "org.apache.commons.csv.CSVPrinter.printComment(String)" "org.apache.commons.csv.CSVPrinter.out : Appendable"
call "org.apache.commons.csv.CSVPrinter.printComment(String)" "org.apache.commons.csv.CSVFormat.getCommentMarker()"
contain "org.apache.commons.csv.CSVPrinter" "org.apache.commons.csv.CSVPrinter.printComment(String)"
reference "org.apache.commons.csv.CSVPrinter.println()" "org.apache.commons.csv.CSVPrinter.format : CSVFormat"
reference "org.apache.commons.csv.CSVPrinter.println()" "org.apache.commons.csv.CSVPrinter.out : Appendable"
call "org.apache.commons.csv.CSVPrinter.println()" "org.apache.commons.csv.CSVFormat.println(Appendable)"
reference "org.apache.commons.csv.CSVPrinter.println()" "org.apache.commons.csv.CSVPrinter.newRecord : boolean"
contain "org.apache.commons.csv.CSVPrinter" "org.apache.commons.csv.CSVPrinter.println()"
call "org.apache.commons.csv.CSVPrinter.printRecord(Iterable)" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinter.printRecord(Iterable)" "org.apache.commons.csv.CSVPrinter.println()"
contain "org.apache.commons.csv.CSVPrinter" "org.apache.commons.csv.CSVPrinter.printRecord(Iterable)"
reference "org.apache.commons.csv.CSVPrinter.printRecord(Object[])" "org.apache.commons.csv.CSVPrinter.format : CSVFormat"
reference "org.apache.commons.csv.CSVPrinter.printRecord(Object[])" "org.apache.commons.csv.CSVPrinter.out : Appendable"
call "org.apache.commons.csv.CSVPrinter.printRecord(Object[])" "org.apache.commons.csv.CSVFormat.printRecord(Appendable,Object[])"
reference "org.apache.commons.csv.CSVPrinter.printRecord(Object[])" "org.apache.commons.csv.CSVPrinter.newRecord : boolean"
contain "org.apache.commons.csv.CSVPrinter" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
call "org.apache.commons.csv.CSVPrinter.printRecords(Iterable)" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
call "org.apache.commons.csv.CSVPrinter.printRecords(Iterable)" "org.apache.commons.csv.CSVPrinter.printRecord(Iterable)"
contain "org.apache.commons.csv.CSVPrinter" "org.apache.commons.csv.CSVPrinter.printRecords(Iterable)"
call "org.apache.commons.csv.CSVPrinter.printRecords(Object[])" "org.apache.commons.csv.CSVPrinter.printRecords(Iterable)"
contain "org.apache.commons.csv.CSVPrinter" "org.apache.commons.csv.CSVPrinter.printRecords(Object[])"
call "org.apache.commons.csv.CSVPrinter.printRecords(ResultSet)" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinter.printRecords(ResultSet)" "org.apache.commons.csv.CSVPrinter.println()"
contain "org.apache.commons.csv.CSVPrinter" "org.apache.commons.csv.CSVPrinter.printRecords(ResultSet)"
contain "org.apache.commons.csv.CSVPrinter" "org.apache.commons.csv.CSVPrinter.out : Appendable"
reference "org.apache.commons.csv.CSVPrinter.format : CSVFormat" "org.apache.commons.csv.CSVFormat"
contain "org.apache.commons.csv.CSVPrinter" "org.apache.commons.csv.CSVPrinter.format : CSVFormat"
contain "org.apache.commons.csv.CSVPrinter" "org.apache.commons.csv.CSVPrinter.newRecord : boolean"
reference "org.apache.commons.csv.ExtendedBufferedReaderTest" "org.apache.commons.csv.Constants"
reference "org.apache.commons.csv.ExtendedBufferedReaderTest" "org.apache.commons.csv.ExtendedBufferedReader"
reference "org.apache.commons.csv.ExtendedBufferedReaderTest" "char[]"
contain "org.apache.commons.csv.ExtendedBufferedReaderTest" "org.apache.commons.csv.ExtendedBufferedReaderTest.ExtendedBufferedReaderTest()"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()" "org.apache.commons.csv.ExtendedBufferedReaderTest.createBufferedReader(String)"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()" "org.apache.commons.csv.ExtendedBufferedReader.read()"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()" "org.apache.commons.csv.ExtendedBufferedReader.lookAhead()"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()" "org.apache.commons.csv.ExtendedBufferedReader.getLastChar()"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()" "org.apache.commons.csv.ExtendedBufferedReader.readLine()"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()" "org.apache.commons.csv.ExtendedBufferedReader.read(char[],int,int)"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()" "org.apache.commons.csv.ExtendedBufferedReader.close()"
contain "org.apache.commons.csv.ExtendedBufferedReaderTest" "org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()" "org.apache.commons.csv.ExtendedBufferedReaderTest.createBufferedReader(String)"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()" "org.apache.commons.csv.ExtendedBufferedReader.getCurrentLineNumber()"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()" "org.apache.commons.csv.ExtendedBufferedReader.lookAhead()"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()" "org.apache.commons.csv.ExtendedBufferedReader.getLastChar()"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()" "org.apache.commons.csv.ExtendedBufferedReader.read()"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()" "org.apache.commons.csv.ExtendedBufferedReader.close()"
contain "org.apache.commons.csv.ExtendedBufferedReaderTest" "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()" "org.apache.commons.csv.ExtendedBufferedReaderTest.createBufferedReader(String)"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()" "org.apache.commons.csv.ExtendedBufferedReader.read(char[],int,int)"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()" "org.apache.commons.csv.ExtendedBufferedReader.getLastChar()"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()" "org.apache.commons.csv.ExtendedBufferedReader.lookAhead()"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()" "org.apache.commons.csv.ExtendedBufferedReader.close()"
contain "org.apache.commons.csv.ExtendedBufferedReaderTest" "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()" "org.apache.commons.csv.ExtendedBufferedReaderTest.createBufferedReader(String)"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()" "org.apache.commons.csv.ExtendedBufferedReader.readLine()"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()" "org.apache.commons.csv.ExtendedBufferedReader.close()"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()" "org.apache.commons.csv.ExtendedBufferedReader.getCurrentLineNumber()"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()" "org.apache.commons.csv.ExtendedBufferedReader.read()"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()" "org.apache.commons.csv.ExtendedBufferedReader.lookAhead()"
contain "org.apache.commons.csv.ExtendedBufferedReaderTest" "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()" "org.apache.commons.csv.ExtendedBufferedReaderTest.createBufferedReader(String)"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()" "org.apache.commons.csv.ExtendedBufferedReader.getCurrentLineNumber()"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()" "org.apache.commons.csv.ExtendedBufferedReader.readLine()"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()" "org.apache.commons.csv.ExtendedBufferedReader.close()"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()" "org.apache.commons.csv.ExtendedBufferedReader.read()"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()" "org.apache.commons.csv.ExtendedBufferedReader.read(char[],int,int)"
contain "org.apache.commons.csv.ExtendedBufferedReaderTest" "org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()"
call "org.apache.commons.csv.ExtendedBufferedReaderTest.createBufferedReader(String)" "org.apache.commons.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader)"
contain "org.apache.commons.csv.ExtendedBufferedReaderTest" "org.apache.commons.csv.ExtendedBufferedReaderTest.createBufferedReader(String)"
reference "org.apache.commons.csv.CSVRecordTest.EnumFixture" "org.apache.commons.csv.CSVRecordTest.EnumFixture[]"
reference "org.apache.commons.csv.CSVRecordTest.EnumFixture" "org.apache.commons.csv.CSVRecordTest"
reference "org.apache.commons.csv.CSVRecordTest.EnumFixture.values()" "org.apache.commons.csv.CSVRecordTest.EnumFixture.$VALUES : EnumFixture[]"
call "org.apache.commons.csv.CSVRecordTest.EnumFixture.values()" "org.apache.commons.csv.CSVRecordTest.EnumFixture[].clone()"
contain "org.apache.commons.csv.CSVRecordTest.EnumFixture" "org.apache.commons.csv.CSVRecordTest.EnumFixture.values()"
contain "org.apache.commons.csv.CSVRecordTest.EnumFixture" "org.apache.commons.csv.CSVRecordTest.EnumFixture.valueOf(String)"
contain "org.apache.commons.csv.CSVRecordTest.EnumFixture" "org.apache.commons.csv.CSVRecordTest.EnumFixture.EnumFixture(String,int)"
call "org.apache.commons.csv.CSVRecordTest.EnumFixture.static {...}" "org.apache.commons.csv.CSVRecordTest.EnumFixture.EnumFixture(String,int)"
reference "org.apache.commons.csv.CSVRecordTest.EnumFixture.static {...}" "org.apache.commons.csv.CSVRecordTest.EnumFixture.UNKNOWN_COLUMN : EnumFixture"
reference "org.apache.commons.csv.CSVRecordTest.EnumFixture.static {...}" "org.apache.commons.csv.CSVRecordTest.EnumFixture.$VALUES : EnumFixture[]"
contain "org.apache.commons.csv.CSVRecordTest.EnumFixture" "org.apache.commons.csv.CSVRecordTest.EnumFixture.static {...}"
reference "org.apache.commons.csv.CSVRecordTest.EnumFixture.UNKNOWN_COLUMN : EnumFixture" "org.apache.commons.csv.CSVRecordTest.EnumFixture"
contain "org.apache.commons.csv.CSVRecordTest.EnumFixture" "org.apache.commons.csv.CSVRecordTest.EnumFixture.UNKNOWN_COLUMN : EnumFixture"
reference "org.apache.commons.csv.CSVRecordTest.EnumFixture.$VALUES : EnumFixture[]" "org.apache.commons.csv.CSVRecordTest.EnumFixture[]"
contain "org.apache.commons.csv.CSVRecordTest.EnumFixture" "org.apache.commons.csv.CSVRecordTest.EnumFixture.$VALUES : EnumFixture[]"
reference "org.apache.commons.csv.CSVFormat.1" "org.apache.commons.csv.QuoteMode"
reference "org.apache.commons.csv.CSVFormat.1" "org.apache.commons.csv.CSVFormat"
call "org.apache.commons.csv.CSVFormat.1.static {...}" "org.apache.commons.csv.QuoteMode.values()"
reference "org.apache.commons.csv.CSVFormat.1.static {...}" "org.apache.commons.csv.CSVFormat.1.$SwitchMap$org$apache$commons$csv$QuoteMode : int[]"
reference "org.apache.commons.csv.CSVFormat.1.static {...}" "org.apache.commons.csv.QuoteMode.ALL : QuoteMode"
call "org.apache.commons.csv.CSVFormat.1.static {...}" "org.apache.commons.csv.QuoteMode.ordinal()"
reference "org.apache.commons.csv.CSVFormat.1.static {...}" "org.apache.commons.csv.QuoteMode.ALL_NON_NULL : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.1.static {...}" "org.apache.commons.csv.QuoteMode.NON_NUMERIC : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.1.static {...}" "org.apache.commons.csv.QuoteMode.NONE : QuoteMode"
reference "org.apache.commons.csv.CSVFormat.1.static {...}" "org.apache.commons.csv.QuoteMode.MINIMAL : QuoteMode"
contain "org.apache.commons.csv.CSVFormat.1" "org.apache.commons.csv.CSVFormat.1.static {...}"
reference "org.apache.commons.csv.CSVFormat.1.$SwitchMap$org$apache$commons$csv$QuoteMode : int[]" "int[]"
contain "org.apache.commons.csv.CSVFormat.1" "org.apache.commons.csv.CSVFormat.1.$SwitchMap$org$apache$commons$csv$QuoteMode : int[]"
reference "org.apache.commons.csv.CSVFormatPredefinedTest" "org.apache.commons.csv.CSVFormat.Predefined"
reference "org.apache.commons.csv.CSVFormatPredefinedTest" "org.apache.commons.csv.CSVFormat"
contain "org.apache.commons.csv.CSVFormatPredefinedTest" "org.apache.commons.csv.CSVFormatPredefinedTest.CSVFormatPredefinedTest()"
call "org.apache.commons.csv.CSVFormatPredefinedTest.test(CSVFormat,String)" "org.apache.commons.csv.CSVFormat.Predefined.valueOf(String)"
call "org.apache.commons.csv.CSVFormatPredefinedTest.test(CSVFormat,String)" "org.apache.commons.csv.CSVFormat.Predefined.getFormat()"
call "org.apache.commons.csv.CSVFormatPredefinedTest.test(CSVFormat,String)" "org.apache.commons.csv.CSVFormat.valueOf(String)"
contain "org.apache.commons.csv.CSVFormatPredefinedTest" "org.apache.commons.csv.CSVFormatPredefinedTest.test(CSVFormat,String)"
reference "org.apache.commons.csv.CSVFormatPredefinedTest.testDefault()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVFormatPredefinedTest.testDefault()" "org.apache.commons.csv.CSVFormatPredefinedTest.test(CSVFormat,String)"
contain "org.apache.commons.csv.CSVFormatPredefinedTest" "org.apache.commons.csv.CSVFormatPredefinedTest.testDefault()"
reference "org.apache.commons.csv.CSVFormatPredefinedTest.testExcel()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.CSVFormatPredefinedTest.testExcel()" "org.apache.commons.csv.CSVFormatPredefinedTest.test(CSVFormat,String)"
contain "org.apache.commons.csv.CSVFormatPredefinedTest" "org.apache.commons.csv.CSVFormatPredefinedTest.testExcel()"
reference "org.apache.commons.csv.CSVFormatPredefinedTest.testMySQL()" "org.apache.commons.csv.CSVFormat.MYSQL : CSVFormat"
call "org.apache.commons.csv.CSVFormatPredefinedTest.testMySQL()" "org.apache.commons.csv.CSVFormatPredefinedTest.test(CSVFormat,String)"
contain "org.apache.commons.csv.CSVFormatPredefinedTest" "org.apache.commons.csv.CSVFormatPredefinedTest.testMySQL()"
reference "org.apache.commons.csv.CSVFormatPredefinedTest.testOracle()" "org.apache.commons.csv.CSVFormat.ORACLE : CSVFormat"
call "org.apache.commons.csv.CSVFormatPredefinedTest.testOracle()" "org.apache.commons.csv.CSVFormatPredefinedTest.test(CSVFormat,String)"
contain "org.apache.commons.csv.CSVFormatPredefinedTest" "org.apache.commons.csv.CSVFormatPredefinedTest.testOracle()"
reference "org.apache.commons.csv.CSVFormatPredefinedTest.testPostgreSqlCsv()" "org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV : CSVFormat"
call "org.apache.commons.csv.CSVFormatPredefinedTest.testPostgreSqlCsv()" "org.apache.commons.csv.CSVFormatPredefinedTest.test(CSVFormat,String)"
contain "org.apache.commons.csv.CSVFormatPredefinedTest" "org.apache.commons.csv.CSVFormatPredefinedTest.testPostgreSqlCsv()"
reference "org.apache.commons.csv.CSVFormatPredefinedTest.testMongoDbCsv()" "org.apache.commons.csv.CSVFormat.MONGODB_CSV : CSVFormat"
call "org.apache.commons.csv.CSVFormatPredefinedTest.testMongoDbCsv()" "org.apache.commons.csv.CSVFormatPredefinedTest.test(CSVFormat,String)"
contain "org.apache.commons.csv.CSVFormatPredefinedTest" "org.apache.commons.csv.CSVFormatPredefinedTest.testMongoDbCsv()"
reference "org.apache.commons.csv.CSVFormatPredefinedTest.testMongoDbTsv()" "org.apache.commons.csv.CSVFormat.MONGODB_TSV : CSVFormat"
call "org.apache.commons.csv.CSVFormatPredefinedTest.testMongoDbTsv()" "org.apache.commons.csv.CSVFormatPredefinedTest.test(CSVFormat,String)"
contain "org.apache.commons.csv.CSVFormatPredefinedTest" "org.apache.commons.csv.CSVFormatPredefinedTest.testMongoDbTsv()"
reference "org.apache.commons.csv.CSVFormatPredefinedTest.testPostgreSqlText()" "org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT : CSVFormat"
call "org.apache.commons.csv.CSVFormatPredefinedTest.testPostgreSqlText()" "org.apache.commons.csv.CSVFormatPredefinedTest.test(CSVFormat,String)"
contain "org.apache.commons.csv.CSVFormatPredefinedTest" "org.apache.commons.csv.CSVFormatPredefinedTest.testPostgreSqlText()"
reference "org.apache.commons.csv.CSVFormatPredefinedTest.testRFC4180()" "org.apache.commons.csv.CSVFormat.RFC4180 : CSVFormat"
call "org.apache.commons.csv.CSVFormatPredefinedTest.testRFC4180()" "org.apache.commons.csv.CSVFormatPredefinedTest.test(CSVFormat,String)"
contain "org.apache.commons.csv.CSVFormatPredefinedTest" "org.apache.commons.csv.CSVFormatPredefinedTest.testRFC4180()"
reference "org.apache.commons.csv.CSVFormatPredefinedTest.testTDF()" "org.apache.commons.csv.CSVFormat.TDF : CSVFormat"
call "org.apache.commons.csv.CSVFormatPredefinedTest.testTDF()" "org.apache.commons.csv.CSVFormatPredefinedTest.test(CSVFormat,String)"
contain "org.apache.commons.csv.CSVFormatPredefinedTest" "org.apache.commons.csv.CSVFormatPredefinedTest.testTDF()"
reference "org.apache.commons.csv.PerformanceTest.CSVParserFactory" "org.apache.commons.csv.PerformanceTest"
contain "org.apache.commons.csv.PerformanceTest.CSVParserFactory" "org.apache.commons.csv.PerformanceTest.CSVParserFactory.createParser()"
reference "org.apache.commons.csv.Token.Type" "org.apache.commons.csv.Token.Type[]"
reference "org.apache.commons.csv.Token.Type" "org.apache.commons.csv.Token"
reference "org.apache.commons.csv.Token.Type.values()" "org.apache.commons.csv.Token.Type.$VALUES : Type[]"
call "org.apache.commons.csv.Token.Type.values()" "org.apache.commons.csv.Token.Type[].clone()"
contain "org.apache.commons.csv.Token.Type" "org.apache.commons.csv.Token.Type.values()"
contain "org.apache.commons.csv.Token.Type" "org.apache.commons.csv.Token.Type.valueOf(String)"
contain "org.apache.commons.csv.Token.Type" "org.apache.commons.csv.Token.Type.Type(String,int)"
call "org.apache.commons.csv.Token.Type.static {...}" "org.apache.commons.csv.Token.Type.Type(String,int)"
reference "org.apache.commons.csv.Token.Type.static {...}" "org.apache.commons.csv.Token.Type.INVALID : Type"
reference "org.apache.commons.csv.Token.Type.static {...}" "org.apache.commons.csv.Token.Type.TOKEN : Type"
reference "org.apache.commons.csv.Token.Type.static {...}" "org.apache.commons.csv.Token.Type.EOF : Type"
reference "org.apache.commons.csv.Token.Type.static {...}" "org.apache.commons.csv.Token.Type.EORECORD : Type"
reference "org.apache.commons.csv.Token.Type.static {...}" "org.apache.commons.csv.Token.Type.COMMENT : Type"
reference "org.apache.commons.csv.Token.Type.static {...}" "org.apache.commons.csv.Token.Type.$VALUES : Type[]"
contain "org.apache.commons.csv.Token.Type" "org.apache.commons.csv.Token.Type.static {...}"
reference "org.apache.commons.csv.Token.Type.INVALID : Type" "org.apache.commons.csv.Token.Type"
contain "org.apache.commons.csv.Token.Type" "org.apache.commons.csv.Token.Type.INVALID : Type"
reference "org.apache.commons.csv.Token.Type.TOKEN : Type" "org.apache.commons.csv.Token.Type"
contain "org.apache.commons.csv.Token.Type" "org.apache.commons.csv.Token.Type.TOKEN : Type"
reference "org.apache.commons.csv.Token.Type.EOF : Type" "org.apache.commons.csv.Token.Type"
contain "org.apache.commons.csv.Token.Type" "org.apache.commons.csv.Token.Type.EOF : Type"
reference "org.apache.commons.csv.Token.Type.EORECORD : Type" "org.apache.commons.csv.Token.Type"
contain "org.apache.commons.csv.Token.Type" "org.apache.commons.csv.Token.Type.EORECORD : Type"
reference "org.apache.commons.csv.Token.Type.COMMENT : Type" "org.apache.commons.csv.Token.Type"
contain "org.apache.commons.csv.Token.Type" "org.apache.commons.csv.Token.Type.COMMENT : Type"
reference "org.apache.commons.csv.Token.Type.$VALUES : Type[]" "org.apache.commons.csv.Token.Type[]"
contain "org.apache.commons.csv.Token.Type" "org.apache.commons.csv.Token.Type.$VALUES : Type[]"
contain "org.apache.commons.csv.IOUtils" "org.apache.commons.csv.IOUtils.IOUtils()"
call "org.apache.commons.csv.IOUtils.copy(Reader,Appendable)" "org.apache.commons.csv.IOUtils.copy(Reader,Appendable,CharBuffer)"
contain "org.apache.commons.csv.IOUtils" "org.apache.commons.csv.IOUtils.copy(Reader,Appendable)"
contain "org.apache.commons.csv.IOUtils" "org.apache.commons.csv.IOUtils.copy(Reader,Appendable,CharBuffer)"
call "org.apache.commons.csv.IOUtils.copyLarge(Reader,Writer)" "org.apache.commons.csv.IOUtils.copyLarge(Reader,Writer,char[])"
contain "org.apache.commons.csv.IOUtils" "org.apache.commons.csv.IOUtils.copyLarge(Reader,Writer)"
contain "org.apache.commons.csv.IOUtils" "org.apache.commons.csv.IOUtils.copyLarge(Reader,Writer,char[])"
contain "org.apache.commons.csv.IOUtils" "org.apache.commons.csv.IOUtils.DEFAULT_BUFFER_SIZE : int"
contain "org.apache.commons.csv.IOUtils" "org.apache.commons.csv.IOUtils.EOF : int"
reference "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.Constants"
reference "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.CSVFormat"
reference "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.Lexer"
reference "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.ExtendedBufferedReader"
reference "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.Token"
reference "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.Token.Type"
reference "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.TokenMatchers"
reference "org.apache.commons.csv.LexerTest" "org.hamcrest.MatcherAssert"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.LexerTest()"
reference "org.apache.commons.csv.LexerTest.setUp()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.LexerTest.setUp()" "org.apache.commons.csv.CSVFormat.withEscape(char)"
reference "org.apache.commons.csv.LexerTest.setUp()" "org.apache.commons.csv.LexerTest.formatWithEscaping : CSVFormat"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.setUp()"
call "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)" "org.apache.commons.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader)"
call "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)" "org.apache.commons.csv.Lexer.Lexer(CSVFormat,ExtendedBufferedReader)"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)"
reference "org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces()"
call "org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()" "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)"
call "org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()" "org.apache.commons.csv.Token.Token()"
call "org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()" "org.apache.commons.csv.Lexer.nextToken(Token)"
reference "org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()" "org.apache.commons.csv.Token.Type.TOKEN : Type"
call "org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()" "org.apache.commons.csv.TokenMatchers.matches(Token.Type,String)"
call "org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()" "org.hamcrest.MatcherAssert.assertThat(Object,Matcher)"
reference "org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()" "org.apache.commons.csv.Token.Type.EOF : Type"
call "org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()" "org.apache.commons.csv.Lexer.close()"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()"
reference "org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces()"
call "org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()" "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)"
call "org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()" "org.apache.commons.csv.Token.Token()"
call "org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()" "org.apache.commons.csv.Lexer.nextToken(Token)"
reference "org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()" "org.apache.commons.csv.Token.Type.TOKEN : Type"
call "org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()" "org.apache.commons.csv.TokenMatchers.matches(Token.Type,String)"
call "org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()" "org.hamcrest.MatcherAssert.assertThat(Object,Matcher)"
reference "org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()" "org.apache.commons.csv.Token.Type.EOF : Type"
call "org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()" "org.apache.commons.csv.Lexer.close()"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()"
reference "org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()" "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines()"
call "org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()" "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)"
call "org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()" "org.apache.commons.csv.Token.Token()"
call "org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()" "org.apache.commons.csv.Lexer.nextToken(Token)"
reference "org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()" "org.apache.commons.csv.Token.Type.TOKEN : Type"
call "org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()" "org.apache.commons.csv.TokenMatchers.matches(Token.Type,String)"
call "org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()" "org.hamcrest.MatcherAssert.assertThat(Object,Matcher)"
reference "org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()" "org.apache.commons.csv.Token.Type.EORECORD : Type"
reference "org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()" "org.apache.commons.csv.Token.Type.EOF : Type"
call "org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()" "org.apache.commons.csv.Lexer.close()"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()"
reference "org.apache.commons.csv.LexerTest.testComments()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.LexerTest.testComments()" "org.apache.commons.csv.CSVFormat.withCommentMarker(char)"
call "org.apache.commons.csv.LexerTest.testComments()" "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)"
call "org.apache.commons.csv.LexerTest.testComments()" "org.apache.commons.csv.Token.Token()"
call "org.apache.commons.csv.LexerTest.testComments()" "org.apache.commons.csv.Lexer.nextToken(Token)"
reference "org.apache.commons.csv.LexerTest.testComments()" "org.apache.commons.csv.Token.Type.TOKEN : Type"
call "org.apache.commons.csv.LexerTest.testComments()" "org.apache.commons.csv.TokenMatchers.matches(Token.Type,String)"
call "org.apache.commons.csv.LexerTest.testComments()" "org.hamcrest.MatcherAssert.assertThat(Object,Matcher)"
reference "org.apache.commons.csv.LexerTest.testComments()" "org.apache.commons.csv.Token.Type.EORECORD : Type"
reference "org.apache.commons.csv.LexerTest.testComments()" "org.apache.commons.csv.Token.Type.COMMENT : Type"
reference "org.apache.commons.csv.LexerTest.testComments()" "org.apache.commons.csv.Token.Type.EOF : Type"
call "org.apache.commons.csv.LexerTest.testComments()" "org.apache.commons.csv.Lexer.close()"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.testComments()"
reference "org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()" "org.apache.commons.csv.CSVFormat.withCommentMarker(char)"
call "org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()" "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)"
call "org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()" "org.apache.commons.csv.CSVFormat.getIgnoreEmptyLines()"
call "org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()" "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)"
call "org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()" "org.apache.commons.csv.Token.Token()"
call "org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()" "org.apache.commons.csv.Lexer.nextToken(Token)"
reference "org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()" "org.apache.commons.csv.Token.Type.TOKEN : Type"
call "org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()" "org.apache.commons.csv.TokenMatchers.matches(Token.Type,String)"
call "org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()" "org.hamcrest.MatcherAssert.assertThat(Object,Matcher)"
reference "org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()" "org.apache.commons.csv.Token.Type.EORECORD : Type"
reference "org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()" "org.apache.commons.csv.Token.Type.COMMENT : Type"
reference "org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()" "org.apache.commons.csv.Token.Type.EOF : Type"
call "org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()" "org.apache.commons.csv.Lexer.close()"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()"
reference "org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()" "org.apache.commons.csv.CSVFormat.isEscapeCharacterSet()"
call "org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()" "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)"
call "org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()" "org.apache.commons.csv.Token.Token()"
call "org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()" "org.apache.commons.csv.Lexer.nextToken(Token)"
reference "org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()" "org.apache.commons.csv.Token.Type.TOKEN : Type"
call "org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()" "org.apache.commons.csv.TokenMatchers.matches(Token.Type,String)"
call "org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()" "org.hamcrest.MatcherAssert.assertThat(Object,Matcher)"
reference "org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()" "org.apache.commons.csv.Token.Type.EORECORD : Type"
reference "org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()" "org.apache.commons.csv.Token.Type.EOF : Type"
call "org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()" "org.apache.commons.csv.Lexer.close()"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()"
reference "org.apache.commons.csv.LexerTest.testBackslashWithEscaping()" "org.apache.commons.csv.LexerTest.formatWithEscaping : CSVFormat"
call "org.apache.commons.csv.LexerTest.testBackslashWithEscaping()" "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)"
call "org.apache.commons.csv.LexerTest.testBackslashWithEscaping()" "org.apache.commons.csv.CSVFormat.isEscapeCharacterSet()"
call "org.apache.commons.csv.LexerTest.testBackslashWithEscaping()" "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)"
call "org.apache.commons.csv.LexerTest.testBackslashWithEscaping()" "org.apache.commons.csv.Token.Token()"
call "org.apache.commons.csv.LexerTest.testBackslashWithEscaping()" "org.apache.commons.csv.Lexer.nextToken(Token)"
reference "org.apache.commons.csv.LexerTest.testBackslashWithEscaping()" "org.apache.commons.csv.Token.Type.TOKEN : Type"
call "org.apache.commons.csv.LexerTest.testBackslashWithEscaping()" "org.apache.commons.csv.TokenMatchers.matches(Token.Type,String)"
call "org.apache.commons.csv.LexerTest.testBackslashWithEscaping()" "org.hamcrest.MatcherAssert.assertThat(Object,Matcher)"
reference "org.apache.commons.csv.LexerTest.testBackslashWithEscaping()" "org.apache.commons.csv.Token.Type.EORECORD : Type"
reference "org.apache.commons.csv.LexerTest.testBackslashWithEscaping()" "org.apache.commons.csv.Token.Type.EOF : Type"
call "org.apache.commons.csv.LexerTest.testBackslashWithEscaping()" "org.apache.commons.csv.Lexer.close()"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.testBackslashWithEscaping()"
reference "org.apache.commons.csv.LexerTest.testNextToken4()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.LexerTest.testNextToken4()" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces()"
call "org.apache.commons.csv.LexerTest.testNextToken4()" "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)"
call "org.apache.commons.csv.LexerTest.testNextToken4()" "org.apache.commons.csv.Token.Token()"
call "org.apache.commons.csv.LexerTest.testNextToken4()" "org.apache.commons.csv.Lexer.nextToken(Token)"
reference "org.apache.commons.csv.LexerTest.testNextToken4()" "org.apache.commons.csv.Token.Type.TOKEN : Type"
call "org.apache.commons.csv.LexerTest.testNextToken4()" "org.apache.commons.csv.TokenMatchers.matches(Token.Type,String)"
call "org.apache.commons.csv.LexerTest.testNextToken4()" "org.hamcrest.MatcherAssert.assertThat(Object,Matcher)"
reference "org.apache.commons.csv.LexerTest.testNextToken4()" "org.apache.commons.csv.Token.Type.EORECORD : Type"
reference "org.apache.commons.csv.LexerTest.testNextToken4()" "org.apache.commons.csv.Token.Type.EOF : Type"
call "org.apache.commons.csv.LexerTest.testNextToken4()" "org.apache.commons.csv.Lexer.close()"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.testNextToken4()"
reference "org.apache.commons.csv.LexerTest.testNextToken5()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.LexerTest.testNextToken5()" "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)"
call "org.apache.commons.csv.LexerTest.testNextToken5()" "org.apache.commons.csv.Token.Token()"
call "org.apache.commons.csv.LexerTest.testNextToken5()" "org.apache.commons.csv.Lexer.nextToken(Token)"
reference "org.apache.commons.csv.LexerTest.testNextToken5()" "org.apache.commons.csv.Token.Type.TOKEN : Type"
call "org.apache.commons.csv.LexerTest.testNextToken5()" "org.apache.commons.csv.TokenMatchers.matches(Token.Type,String)"
call "org.apache.commons.csv.LexerTest.testNextToken5()" "org.hamcrest.MatcherAssert.assertThat(Object,Matcher)"
reference "org.apache.commons.csv.LexerTest.testNextToken5()" "org.apache.commons.csv.Token.Type.EORECORD : Type"
reference "org.apache.commons.csv.LexerTest.testNextToken5()" "org.apache.commons.csv.Token.Type.EOF : Type"
call "org.apache.commons.csv.LexerTest.testNextToken5()" "org.apache.commons.csv.Lexer.close()"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.testNextToken5()"
reference "org.apache.commons.csv.LexerTest.testNextToken6()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.LexerTest.testNextToken6()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
call "org.apache.commons.csv.LexerTest.testNextToken6()" "org.apache.commons.csv.CSVFormat.withCommentMarker(char)"
call "org.apache.commons.csv.LexerTest.testNextToken6()" "org.apache.commons.csv.CSVFormat.withDelimiter(char)"
call "org.apache.commons.csv.LexerTest.testNextToken6()" "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)"
call "org.apache.commons.csv.LexerTest.testNextToken6()" "org.apache.commons.csv.Token.Token()"
call "org.apache.commons.csv.LexerTest.testNextToken6()" "org.apache.commons.csv.Lexer.nextToken(Token)"
reference "org.apache.commons.csv.LexerTest.testNextToken6()" "org.apache.commons.csv.Token.Type.TOKEN : Type"
call "org.apache.commons.csv.LexerTest.testNextToken6()" "org.apache.commons.csv.TokenMatchers.matches(Token.Type,String)"
call "org.apache.commons.csv.LexerTest.testNextToken6()" "org.hamcrest.MatcherAssert.assertThat(Object,Matcher)"
reference "org.apache.commons.csv.LexerTest.testNextToken6()" "org.apache.commons.csv.Token.Type.EORECORD : Type"
call "org.apache.commons.csv.LexerTest.testNextToken6()" "org.apache.commons.csv.Lexer.close()"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.testNextToken6()"
reference "org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()" "org.apache.commons.csv.CSVFormat.TDF : CSVFormat"
call "org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()" "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)"
call "org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()" "org.apache.commons.csv.Token.Token()"
call "org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()" "org.apache.commons.csv.Lexer.nextToken(Token)"
reference "org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()" "org.apache.commons.csv.Token.Type.TOKEN : Type"
call "org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()" "org.apache.commons.csv.TokenMatchers.matches(Token.Type,String)"
call "org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()" "org.hamcrest.MatcherAssert.assertThat(Object,Matcher)"
reference "org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()" "org.apache.commons.csv.Token.Type.EOF : Type"
call "org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()" "org.apache.commons.csv.Lexer.close()"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()"
reference "org.apache.commons.csv.LexerTest.testEscapedCR()" "org.apache.commons.csv.LexerTest.formatWithEscaping : CSVFormat"
call "org.apache.commons.csv.LexerTest.testEscapedCR()" "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)"
call "org.apache.commons.csv.LexerTest.testEscapedCR()" "org.apache.commons.csv.Token.Token()"
call "org.apache.commons.csv.LexerTest.testEscapedCR()" "org.apache.commons.csv.Lexer.nextToken(Token)"
call "org.apache.commons.csv.LexerTest.testEscapedCR()" "org.apache.commons.csv.TokenMatchers.hasContent(String)"
call "org.apache.commons.csv.LexerTest.testEscapedCR()" "org.hamcrest.MatcherAssert.assertThat(Object,Matcher)"
call "org.apache.commons.csv.LexerTest.testEscapedCR()" "org.apache.commons.csv.Lexer.close()"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.testEscapedCR()"
reference "org.apache.commons.csv.LexerTest.testCR()" "org.apache.commons.csv.LexerTest.formatWithEscaping : CSVFormat"
call "org.apache.commons.csv.LexerTest.testCR()" "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)"
call "org.apache.commons.csv.LexerTest.testCR()" "org.apache.commons.csv.Token.Token()"
call "org.apache.commons.csv.LexerTest.testCR()" "org.apache.commons.csv.Lexer.nextToken(Token)"
call "org.apache.commons.csv.LexerTest.testCR()" "org.apache.commons.csv.TokenMatchers.hasContent(String)"
call "org.apache.commons.csv.LexerTest.testCR()" "org.hamcrest.MatcherAssert.assertThat(Object,Matcher)"
call "org.apache.commons.csv.LexerTest.testCR()" "org.apache.commons.csv.Lexer.close()"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.testCR()"
reference "org.apache.commons.csv.LexerTest.testEscapedLF()" "org.apache.commons.csv.LexerTest.formatWithEscaping : CSVFormat"
call "org.apache.commons.csv.LexerTest.testEscapedLF()" "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)"
call "org.apache.commons.csv.LexerTest.testEscapedLF()" "org.apache.commons.csv.Token.Token()"
call "org.apache.commons.csv.LexerTest.testEscapedLF()" "org.apache.commons.csv.Lexer.nextToken(Token)"
call "org.apache.commons.csv.LexerTest.testEscapedLF()" "org.apache.commons.csv.TokenMatchers.hasContent(String)"
call "org.apache.commons.csv.LexerTest.testEscapedLF()" "org.hamcrest.MatcherAssert.assertThat(Object,Matcher)"
call "org.apache.commons.csv.LexerTest.testEscapedLF()" "org.apache.commons.csv.Lexer.close()"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.testEscapedLF()"
reference "org.apache.commons.csv.LexerTest.testLF()" "org.apache.commons.csv.LexerTest.formatWithEscaping : CSVFormat"
call "org.apache.commons.csv.LexerTest.testLF()" "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)"
call "org.apache.commons.csv.LexerTest.testLF()" "org.apache.commons.csv.Token.Token()"
call "org.apache.commons.csv.LexerTest.testLF()" "org.apache.commons.csv.Lexer.nextToken(Token)"
call "org.apache.commons.csv.LexerTest.testLF()" "org.apache.commons.csv.TokenMatchers.hasContent(String)"
call "org.apache.commons.csv.LexerTest.testLF()" "org.hamcrest.MatcherAssert.assertThat(Object,Matcher)"
call "org.apache.commons.csv.LexerTest.testLF()" "org.apache.commons.csv.Lexer.close()"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.testLF()"
reference "org.apache.commons.csv.LexerTest.testEscapedTab()" "org.apache.commons.csv.LexerTest.formatWithEscaping : CSVFormat"
call "org.apache.commons.csv.LexerTest.testEscapedTab()" "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)"
call "org.apache.commons.csv.LexerTest.testEscapedTab()" "org.apache.commons.csv.Token.Token()"
call "org.apache.commons.csv.LexerTest.testEscapedTab()" "org.apache.commons.csv.Lexer.nextToken(Token)"
call "org.apache.commons.csv.LexerTest.testEscapedTab()" "org.apache.commons.csv.TokenMatchers.hasContent(String)"
call "org.apache.commons.csv.LexerTest.testEscapedTab()" "org.hamcrest.MatcherAssert.assertThat(Object,Matcher)"
call "org.apache.commons.csv.LexerTest.testEscapedTab()" "org.apache.commons.csv.Lexer.close()"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.testEscapedTab()"
reference "org.apache.commons.csv.LexerTest.testTab()" "org.apache.commons.csv.LexerTest.formatWithEscaping : CSVFormat"
call "org.apache.commons.csv.LexerTest.testTab()" "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)"
call "org.apache.commons.csv.LexerTest.testTab()" "org.apache.commons.csv.Token.Token()"
call "org.apache.commons.csv.LexerTest.testTab()" "org.apache.commons.csv.Lexer.nextToken(Token)"
call "org.apache.commons.csv.LexerTest.testTab()" "org.apache.commons.csv.TokenMatchers.hasContent(String)"
call "org.apache.commons.csv.LexerTest.testTab()" "org.hamcrest.MatcherAssert.assertThat(Object,Matcher)"
call "org.apache.commons.csv.LexerTest.testTab()" "org.apache.commons.csv.Lexer.close()"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.testTab()"
reference "org.apache.commons.csv.LexerTest.testEscapedBackspace()" "org.apache.commons.csv.LexerTest.formatWithEscaping : CSVFormat"
call "org.apache.commons.csv.LexerTest.testEscapedBackspace()" "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)"
call "org.apache.commons.csv.LexerTest.testEscapedBackspace()" "org.apache.commons.csv.Token.Token()"
call "org.apache.commons.csv.LexerTest.testEscapedBackspace()" "org.apache.commons.csv.Lexer.nextToken(Token)"
call "org.apache.commons.csv.LexerTest.testEscapedBackspace()" "org.apache.commons.csv.TokenMatchers.hasContent(String)"
call "org.apache.commons.csv.LexerTest.testEscapedBackspace()" "org.hamcrest.MatcherAssert.assertThat(Object,Matcher)"
call "org.apache.commons.csv.LexerTest.testEscapedBackspace()" "org.apache.commons.csv.Lexer.close()"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.testEscapedBackspace()"
reference "org.apache.commons.csv.LexerTest.testBackspace()" "org.apache.commons.csv.LexerTest.formatWithEscaping : CSVFormat"
call "org.apache.commons.csv.LexerTest.testBackspace()" "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)"
call "org.apache.commons.csv.LexerTest.testBackspace()" "org.apache.commons.csv.Token.Token()"
call "org.apache.commons.csv.LexerTest.testBackspace()" "org.apache.commons.csv.Lexer.nextToken(Token)"
call "org.apache.commons.csv.LexerTest.testBackspace()" "org.apache.commons.csv.TokenMatchers.hasContent(String)"
call "org.apache.commons.csv.LexerTest.testBackspace()" "org.hamcrest.MatcherAssert.assertThat(Object,Matcher)"
call "org.apache.commons.csv.LexerTest.testBackspace()" "org.apache.commons.csv.Lexer.close()"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.testBackspace()"
reference "org.apache.commons.csv.LexerTest.testEscapedFF()" "org.apache.commons.csv.LexerTest.formatWithEscaping : CSVFormat"
call "org.apache.commons.csv.LexerTest.testEscapedFF()" "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)"
call "org.apache.commons.csv.LexerTest.testEscapedFF()" "org.apache.commons.csv.Token.Token()"
call "org.apache.commons.csv.LexerTest.testEscapedFF()" "org.apache.commons.csv.Lexer.nextToken(Token)"
call "org.apache.commons.csv.LexerTest.testEscapedFF()" "org.apache.commons.csv.TokenMatchers.hasContent(String)"
call "org.apache.commons.csv.LexerTest.testEscapedFF()" "org.hamcrest.MatcherAssert.assertThat(Object,Matcher)"
call "org.apache.commons.csv.LexerTest.testEscapedFF()" "org.apache.commons.csv.Lexer.close()"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.testEscapedFF()"
reference "org.apache.commons.csv.LexerTest.testFF()" "org.apache.commons.csv.LexerTest.formatWithEscaping : CSVFormat"
call "org.apache.commons.csv.LexerTest.testFF()" "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)"
call "org.apache.commons.csv.LexerTest.testFF()" "org.apache.commons.csv.Token.Token()"
call "org.apache.commons.csv.LexerTest.testFF()" "org.apache.commons.csv.Lexer.nextToken(Token)"
call "org.apache.commons.csv.LexerTest.testFF()" "org.apache.commons.csv.TokenMatchers.hasContent(String)"
call "org.apache.commons.csv.LexerTest.testFF()" "org.hamcrest.MatcherAssert.assertThat(Object,Matcher)"
call "org.apache.commons.csv.LexerTest.testFF()" "org.apache.commons.csv.Lexer.close()"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.testFF()"
reference "org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()" "org.apache.commons.csv.LexerTest.formatWithEscaping : CSVFormat"
call "org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()" "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)"
call "org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()" "org.apache.commons.csv.Token.Token()"
call "org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()" "org.apache.commons.csv.Lexer.nextToken(Token)"
call "org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()" "org.apache.commons.csv.TokenMatchers.hasContent(String)"
call "org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()" "org.hamcrest.MatcherAssert.assertThat(Object,Matcher)"
call "org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()" "org.apache.commons.csv.Lexer.close()"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()"
reference "org.apache.commons.csv.LexerTest.testEscapedCharacter()" "org.apache.commons.csv.LexerTest.formatWithEscaping : CSVFormat"
call "org.apache.commons.csv.LexerTest.testEscapedCharacter()" "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)"
call "org.apache.commons.csv.LexerTest.testEscapedCharacter()" "org.apache.commons.csv.Token.Token()"
call "org.apache.commons.csv.LexerTest.testEscapedCharacter()" "org.apache.commons.csv.Lexer.nextToken(Token)"
call "org.apache.commons.csv.LexerTest.testEscapedCharacter()" "org.apache.commons.csv.TokenMatchers.hasContent(String)"
call "org.apache.commons.csv.LexerTest.testEscapedCharacter()" "org.hamcrest.MatcherAssert.assertThat(Object,Matcher)"
call "org.apache.commons.csv.LexerTest.testEscapedCharacter()" "org.apache.commons.csv.Lexer.close()"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.testEscapedCharacter()"
reference "org.apache.commons.csv.LexerTest.testEscapedControlCharacter()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.LexerTest.testEscapedControlCharacter()" "org.apache.commons.csv.CSVFormat.withEscape(char)"
call "org.apache.commons.csv.LexerTest.testEscapedControlCharacter()" "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)"
call "org.apache.commons.csv.LexerTest.testEscapedControlCharacter()" "org.apache.commons.csv.Token.Token()"
call "org.apache.commons.csv.LexerTest.testEscapedControlCharacter()" "org.apache.commons.csv.Lexer.nextToken(Token)"
call "org.apache.commons.csv.LexerTest.testEscapedControlCharacter()" "org.apache.commons.csv.TokenMatchers.hasContent(String)"
call "org.apache.commons.csv.LexerTest.testEscapedControlCharacter()" "org.hamcrest.MatcherAssert.assertThat(Object,Matcher)"
call "org.apache.commons.csv.LexerTest.testEscapedControlCharacter()" "org.apache.commons.csv.Lexer.close()"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.testEscapedControlCharacter()"
reference "org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()" "org.apache.commons.csv.CSVFormat.withEscape(char)"
call "org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()" "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)"
call "org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()" "org.apache.commons.csv.Token.Token()"
call "org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()" "org.apache.commons.csv.Lexer.nextToken(Token)"
call "org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()" "org.apache.commons.csv.TokenMatchers.hasContent(String)"
call "org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()" "org.hamcrest.MatcherAssert.assertThat(Object,Matcher)"
call "org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()" "org.apache.commons.csv.Lexer.close()"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()"
reference "org.apache.commons.csv.LexerTest.testEscapingAtEOF()" "org.apache.commons.csv.LexerTest.formatWithEscaping : CSVFormat"
call "org.apache.commons.csv.LexerTest.testEscapingAtEOF()" "org.apache.commons.csv.LexerTest.createLexer(String,CSVFormat)"
call "org.apache.commons.csv.LexerTest.testEscapingAtEOF()" "org.apache.commons.csv.Lexer.close()"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.testEscapingAtEOF()"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.lambda$testEscapingAtEOF$0(Lexer)"
reference "org.apache.commons.csv.LexerTest.formatWithEscaping : CSVFormat" "org.apache.commons.csv.CSVFormat"
contain "org.apache.commons.csv.LexerTest" "org.apache.commons.csv.LexerTest.formatWithEscaping : CSVFormat"
reference "org.apache.commons.csv.ExtendedBufferedReader" "org.apache.commons.csv.Constants"
reference "org.apache.commons.csv.ExtendedBufferedReader" "char[]"
reference "org.apache.commons.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader)" "org.apache.commons.csv.ExtendedBufferedReader.lastChar : int"
contain "org.apache.commons.csv.ExtendedBufferedReader" "org.apache.commons.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader)"
reference "org.apache.commons.csv.ExtendedBufferedReader.read()" "org.apache.commons.csv.ExtendedBufferedReader.lastChar : int"
reference "org.apache.commons.csv.ExtendedBufferedReader.read()" "org.apache.commons.csv.ExtendedBufferedReader.eolCounter : long"
reference "org.apache.commons.csv.ExtendedBufferedReader.read()" "org.apache.commons.csv.ExtendedBufferedReader.position : long"
contain "org.apache.commons.csv.ExtendedBufferedReader" "org.apache.commons.csv.ExtendedBufferedReader.read()"
reference "org.apache.commons.csv.ExtendedBufferedReader.getLastChar()" "org.apache.commons.csv.ExtendedBufferedReader.lastChar : int"
contain "org.apache.commons.csv.ExtendedBufferedReader" "org.apache.commons.csv.ExtendedBufferedReader.getLastChar()"
reference "org.apache.commons.csv.ExtendedBufferedReader.read(char[],int,int)" "org.apache.commons.csv.ExtendedBufferedReader.lastChar : int"
reference "org.apache.commons.csv.ExtendedBufferedReader.read(char[],int,int)" "org.apache.commons.csv.ExtendedBufferedReader.eolCounter : long"
reference "org.apache.commons.csv.ExtendedBufferedReader.read(char[],int,int)" "org.apache.commons.csv.ExtendedBufferedReader.position : long"
contain "org.apache.commons.csv.ExtendedBufferedReader" "org.apache.commons.csv.ExtendedBufferedReader.read(char[],int,int)"
reference "org.apache.commons.csv.ExtendedBufferedReader.readLine()" "org.apache.commons.csv.ExtendedBufferedReader.lastChar : int"
reference "org.apache.commons.csv.ExtendedBufferedReader.readLine()" "org.apache.commons.csv.ExtendedBufferedReader.eolCounter : long"
contain "org.apache.commons.csv.ExtendedBufferedReader" "org.apache.commons.csv.ExtendedBufferedReader.readLine()"
contain "org.apache.commons.csv.ExtendedBufferedReader" "org.apache.commons.csv.ExtendedBufferedReader.lookAhead()"
reference "org.apache.commons.csv.ExtendedBufferedReader.getCurrentLineNumber()" "org.apache.commons.csv.ExtendedBufferedReader.lastChar : int"
reference "org.apache.commons.csv.ExtendedBufferedReader.getCurrentLineNumber()" "org.apache.commons.csv.ExtendedBufferedReader.eolCounter : long"
contain "org.apache.commons.csv.ExtendedBufferedReader" "org.apache.commons.csv.ExtendedBufferedReader.getCurrentLineNumber()"
reference "org.apache.commons.csv.ExtendedBufferedReader.getPosition()" "org.apache.commons.csv.ExtendedBufferedReader.position : long"
contain "org.apache.commons.csv.ExtendedBufferedReader" "org.apache.commons.csv.ExtendedBufferedReader.getPosition()"
reference "org.apache.commons.csv.ExtendedBufferedReader.isClosed()" "org.apache.commons.csv.ExtendedBufferedReader.closed : boolean"
contain "org.apache.commons.csv.ExtendedBufferedReader" "org.apache.commons.csv.ExtendedBufferedReader.isClosed()"
reference "org.apache.commons.csv.ExtendedBufferedReader.close()" "org.apache.commons.csv.ExtendedBufferedReader.closed : boolean"
reference "org.apache.commons.csv.ExtendedBufferedReader.close()" "org.apache.commons.csv.ExtendedBufferedReader.lastChar : int"
contain "org.apache.commons.csv.ExtendedBufferedReader" "org.apache.commons.csv.ExtendedBufferedReader.close()"
contain "org.apache.commons.csv.ExtendedBufferedReader" "org.apache.commons.csv.ExtendedBufferedReader.lastChar : int"
contain "org.apache.commons.csv.ExtendedBufferedReader" "org.apache.commons.csv.ExtendedBufferedReader.eolCounter : long"
contain "org.apache.commons.csv.ExtendedBufferedReader" "org.apache.commons.csv.ExtendedBufferedReader.position : long"
contain "org.apache.commons.csv.ExtendedBufferedReader" "org.apache.commons.csv.ExtendedBufferedReader.closed : boolean"
reference "org.apache.commons.csv.CSVParser.1" "org.apache.commons.csv.Token.Type"
reference "org.apache.commons.csv.CSVParser.1" "org.apache.commons.csv.CSVParser"
reference "org.apache.commons.csv.CSVParser.1" "org.apache.commons.csv.Token"
call "org.apache.commons.csv.CSVParser.1.static {...}" "org.apache.commons.csv.Token.Type.values()"
reference "org.apache.commons.csv.CSVParser.1.static {...}" "org.apache.commons.csv.CSVParser.1.$SwitchMap$org$apache$commons$csv$Token$Type : int[]"
reference "org.apache.commons.csv.CSVParser.1.static {...}" "org.apache.commons.csv.Token.Type.TOKEN : Type"
call "org.apache.commons.csv.CSVParser.1.static {...}" "org.apache.commons.csv.Token.Type.ordinal()"
reference "org.apache.commons.csv.CSVParser.1.static {...}" "org.apache.commons.csv.Token.Type.EORECORD : Type"
reference "org.apache.commons.csv.CSVParser.1.static {...}" "org.apache.commons.csv.Token.Type.EOF : Type"
reference "org.apache.commons.csv.CSVParser.1.static {...}" "org.apache.commons.csv.Token.Type.INVALID : Type"
reference "org.apache.commons.csv.CSVParser.1.static {...}" "org.apache.commons.csv.Token.Type.COMMENT : Type"
contain "org.apache.commons.csv.CSVParser.1" "org.apache.commons.csv.CSVParser.1.static {...}"
reference "org.apache.commons.csv.CSVParser.1.$SwitchMap$org$apache$commons$csv$Token$Type : int[]" "int[]"
contain "org.apache.commons.csv.CSVParser.1" "org.apache.commons.csv.CSVParser.1.$SwitchMap$org$apache$commons$csv$Token$Type : int[]"
reference "org.apache.commons.csv.CSVFormat.Predefined" "org.apache.commons.csv.CSVFormat.Predefined[]"
reference "org.apache.commons.csv.CSVFormat.Predefined" "org.apache.commons.csv.CSVFormat"
reference "org.apache.commons.csv.CSVFormat.Predefined.values()" "org.apache.commons.csv.CSVFormat.Predefined.$VALUES : Predefined[]"
call "org.apache.commons.csv.CSVFormat.Predefined.values()" "org.apache.commons.csv.CSVFormat.Predefined[].clone()"
contain "org.apache.commons.csv.CSVFormat.Predefined" "org.apache.commons.csv.CSVFormat.Predefined.values()"
contain "org.apache.commons.csv.CSVFormat.Predefined" "org.apache.commons.csv.CSVFormat.Predefined.valueOf(String)"
reference "org.apache.commons.csv.CSVFormat.Predefined.Predefined(String,int)" "org.apache.commons.csv.CSVFormat.Predefined.format : CSVFormat"
contain "org.apache.commons.csv.CSVFormat.Predefined" "org.apache.commons.csv.CSVFormat.Predefined.Predefined(String,int)"
reference "org.apache.commons.csv.CSVFormat.Predefined.getFormat()" "org.apache.commons.csv.CSVFormat.Predefined.format : CSVFormat"
contain "org.apache.commons.csv.CSVFormat.Predefined" "org.apache.commons.csv.CSVFormat.Predefined.getFormat()"
reference "org.apache.commons.csv.CSVFormat.Predefined.static {...}" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVFormat.Predefined.static {...}" "org.apache.commons.csv.CSVFormat.Predefined.Predefined(String,int)"
reference "org.apache.commons.csv.CSVFormat.Predefined.static {...}" "org.apache.commons.csv.CSVFormat.Predefined.Default : Predefined"
reference "org.apache.commons.csv.CSVFormat.Predefined.static {...}" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
reference "org.apache.commons.csv.CSVFormat.Predefined.static {...}" "org.apache.commons.csv.CSVFormat.Predefined.Excel : Predefined"
reference "org.apache.commons.csv.CSVFormat.Predefined.static {...}" "org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD : CSVFormat"
reference "org.apache.commons.csv.CSVFormat.Predefined.static {...}" "org.apache.commons.csv.CSVFormat.Predefined.InformixUnload : Predefined"
reference "org.apache.commons.csv.CSVFormat.Predefined.static {...}" "org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV : CSVFormat"
reference "org.apache.commons.csv.CSVFormat.Predefined.static {...}" "org.apache.commons.csv.CSVFormat.Predefined.InformixUnloadCsv : Predefined"
reference "org.apache.commons.csv.CSVFormat.Predefined.static {...}" "org.apache.commons.csv.CSVFormat.MONGODB_CSV : CSVFormat"
reference "org.apache.commons.csv.CSVFormat.Predefined.static {...}" "org.apache.commons.csv.CSVFormat.Predefined.MongoDBCsv : Predefined"
reference "org.apache.commons.csv.CSVFormat.Predefined.static {...}" "org.apache.commons.csv.CSVFormat.MONGODB_TSV : CSVFormat"
reference "org.apache.commons.csv.CSVFormat.Predefined.static {...}" "org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv : Predefined"
reference "org.apache.commons.csv.CSVFormat.Predefined.static {...}" "org.apache.commons.csv.CSVFormat.MYSQL : CSVFormat"
reference "org.apache.commons.csv.CSVFormat.Predefined.static {...}" "org.apache.commons.csv.CSVFormat.Predefined.MySQL : Predefined"
reference "org.apache.commons.csv.CSVFormat.Predefined.static {...}" "org.apache.commons.csv.CSVFormat.ORACLE : CSVFormat"
reference "org.apache.commons.csv.CSVFormat.Predefined.static {...}" "org.apache.commons.csv.CSVFormat.Predefined.Oracle : Predefined"
reference "org.apache.commons.csv.CSVFormat.Predefined.static {...}" "org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV : CSVFormat"
reference "org.apache.commons.csv.CSVFormat.Predefined.static {...}" "org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv : Predefined"
reference "org.apache.commons.csv.CSVFormat.Predefined.static {...}" "org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT : CSVFormat"
reference "org.apache.commons.csv.CSVFormat.Predefined.static {...}" "org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLText : Predefined"
reference "org.apache.commons.csv.CSVFormat.Predefined.static {...}" "org.apache.commons.csv.CSVFormat.RFC4180 : CSVFormat"
reference "org.apache.commons.csv.CSVFormat.Predefined.static {...}" "org.apache.commons.csv.CSVFormat.Predefined.RFC4180 : Predefined"
reference "org.apache.commons.csv.CSVFormat.Predefined.static {...}" "org.apache.commons.csv.CSVFormat.TDF : CSVFormat"
reference "org.apache.commons.csv.CSVFormat.Predefined.static {...}" "org.apache.commons.csv.CSVFormat.Predefined.TDF : Predefined"
reference "org.apache.commons.csv.CSVFormat.Predefined.static {...}" "org.apache.commons.csv.CSVFormat.Predefined.$VALUES : Predefined[]"
contain "org.apache.commons.csv.CSVFormat.Predefined" "org.apache.commons.csv.CSVFormat.Predefined.static {...}"
reference "org.apache.commons.csv.CSVFormat.Predefined.Default : Predefined" "org.apache.commons.csv.CSVFormat.Predefined"
contain "org.apache.commons.csv.CSVFormat.Predefined" "org.apache.commons.csv.CSVFormat.Predefined.Default : Predefined"
reference "org.apache.commons.csv.CSVFormat.Predefined.Excel : Predefined" "org.apache.commons.csv.CSVFormat.Predefined"
contain "org.apache.commons.csv.CSVFormat.Predefined" "org.apache.commons.csv.CSVFormat.Predefined.Excel : Predefined"
reference "org.apache.commons.csv.CSVFormat.Predefined.InformixUnload : Predefined" "org.apache.commons.csv.CSVFormat.Predefined"
contain "org.apache.commons.csv.CSVFormat.Predefined" "org.apache.commons.csv.CSVFormat.Predefined.InformixUnload : Predefined"
reference "org.apache.commons.csv.CSVFormat.Predefined.InformixUnloadCsv : Predefined" "org.apache.commons.csv.CSVFormat.Predefined"
contain "org.apache.commons.csv.CSVFormat.Predefined" "org.apache.commons.csv.CSVFormat.Predefined.InformixUnloadCsv : Predefined"
reference "org.apache.commons.csv.CSVFormat.Predefined.MongoDBCsv : Predefined" "org.apache.commons.csv.CSVFormat.Predefined"
contain "org.apache.commons.csv.CSVFormat.Predefined" "org.apache.commons.csv.CSVFormat.Predefined.MongoDBCsv : Predefined"
reference "org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv : Predefined" "org.apache.commons.csv.CSVFormat.Predefined"
contain "org.apache.commons.csv.CSVFormat.Predefined" "org.apache.commons.csv.CSVFormat.Predefined.MongoDBTsv : Predefined"
reference "org.apache.commons.csv.CSVFormat.Predefined.MySQL : Predefined" "org.apache.commons.csv.CSVFormat.Predefined"
contain "org.apache.commons.csv.CSVFormat.Predefined" "org.apache.commons.csv.CSVFormat.Predefined.MySQL : Predefined"
reference "org.apache.commons.csv.CSVFormat.Predefined.Oracle : Predefined" "org.apache.commons.csv.CSVFormat.Predefined"
contain "org.apache.commons.csv.CSVFormat.Predefined" "org.apache.commons.csv.CSVFormat.Predefined.Oracle : Predefined"
reference "org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv : Predefined" "org.apache.commons.csv.CSVFormat.Predefined"
contain "org.apache.commons.csv.CSVFormat.Predefined" "org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLCsv : Predefined"
reference "org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLText : Predefined" "org.apache.commons.csv.CSVFormat.Predefined"
contain "org.apache.commons.csv.CSVFormat.Predefined" "org.apache.commons.csv.CSVFormat.Predefined.PostgreSQLText : Predefined"
reference "org.apache.commons.csv.CSVFormat.Predefined.RFC4180 : Predefined" "org.apache.commons.csv.CSVFormat.Predefined"
contain "org.apache.commons.csv.CSVFormat.Predefined" "org.apache.commons.csv.CSVFormat.Predefined.RFC4180 : Predefined"
reference "org.apache.commons.csv.CSVFormat.Predefined.TDF : Predefined" "org.apache.commons.csv.CSVFormat.Predefined"
contain "org.apache.commons.csv.CSVFormat.Predefined" "org.apache.commons.csv.CSVFormat.Predefined.TDF : Predefined"
reference "org.apache.commons.csv.CSVFormat.Predefined.format : CSVFormat" "org.apache.commons.csv.CSVFormat"
contain "org.apache.commons.csv.CSVFormat.Predefined" "org.apache.commons.csv.CSVFormat.Predefined.format : CSVFormat"
reference "org.apache.commons.csv.CSVFormat.Predefined.$VALUES : Predefined[]" "org.apache.commons.csv.CSVFormat.Predefined[]"
contain "org.apache.commons.csv.CSVFormat.Predefined" "org.apache.commons.csv.CSVFormat.Predefined.$VALUES : Predefined[]"
reference "org.apache.commons.csv.CSVParser.CSVRecordIterator" "org.apache.commons.csv.CSVParser"
reference "org.apache.commons.csv.CSVParser.CSVRecordIterator" "org.apache.commons.csv.CSVRecord"
reference "org.apache.commons.csv.CSVParser.CSVRecordIterator.CSVRecordIterator()" "org.apache.commons.csv.CSVParser.CSVRecordIterator.this$0 : CSVParser"
contain "org.apache.commons.csv.CSVParser.CSVRecordIterator" "org.apache.commons.csv.CSVParser.CSVRecordIterator.CSVRecordIterator()"
reference "org.apache.commons.csv.CSVParser.CSVRecordIterator.getNextRecord()" "org.apache.commons.csv.CSVParser.CSVRecordIterator.this$0 : CSVParser"
call "org.apache.commons.csv.CSVParser.CSVRecordIterator.getNextRecord()" "org.apache.commons.csv.CSVParser.nextRecord()"
contain "org.apache.commons.csv.CSVParser.CSVRecordIterator" "org.apache.commons.csv.CSVParser.CSVRecordIterator.getNextRecord()"
reference "org.apache.commons.csv.CSVParser.CSVRecordIterator.hasNext()" "org.apache.commons.csv.CSVParser.CSVRecordIterator.this$0 : CSVParser"
call "org.apache.commons.csv.CSVParser.CSVRecordIterator.hasNext()" "org.apache.commons.csv.CSVParser.isClosed()"
reference "org.apache.commons.csv.CSVParser.CSVRecordIterator.hasNext()" "org.apache.commons.csv.CSVParser.CSVRecordIterator.current : CSVRecord"
call "org.apache.commons.csv.CSVParser.CSVRecordIterator.hasNext()" "org.apache.commons.csv.CSVParser.CSVRecordIterator.getNextRecord()"
contain "org.apache.commons.csv.CSVParser.CSVRecordIterator" "org.apache.commons.csv.CSVParser.CSVRecordIterator.hasNext()"
reference "org.apache.commons.csv.CSVParser.CSVRecordIterator.next()" "org.apache.commons.csv.CSVParser.CSVRecordIterator.this$0 : CSVParser"
call "org.apache.commons.csv.CSVParser.CSVRecordIterator.next()" "org.apache.commons.csv.CSVParser.isClosed()"
reference "org.apache.commons.csv.CSVParser.CSVRecordIterator.next()" "org.apache.commons.csv.CSVParser.CSVRecordIterator.current : CSVRecord"
call "org.apache.commons.csv.CSVParser.CSVRecordIterator.next()" "org.apache.commons.csv.CSVParser.CSVRecordIterator.getNextRecord()"
contain "org.apache.commons.csv.CSVParser.CSVRecordIterator" "org.apache.commons.csv.CSVParser.CSVRecordIterator.next()"
contain "org.apache.commons.csv.CSVParser.CSVRecordIterator" "org.apache.commons.csv.CSVParser.CSVRecordIterator.remove()"
reference "org.apache.commons.csv.CSVParser.CSVRecordIterator.current : CSVRecord" "org.apache.commons.csv.CSVRecord"
contain "org.apache.commons.csv.CSVParser.CSVRecordIterator" "org.apache.commons.csv.CSVParser.CSVRecordIterator.current : CSVRecord"
reference "org.apache.commons.csv.CSVParser.CSVRecordIterator.this$0 : CSVParser" "org.apache.commons.csv.CSVParser"
contain "org.apache.commons.csv.CSVParser.CSVRecordIterator" "org.apache.commons.csv.CSVParser.CSVRecordIterator.this$0 : CSVParser"
reference "org.apache.commons.csv.AssertionsTest" "org.apache.commons.csv.Assertions"
contain "org.apache.commons.csv.AssertionsTest" "org.apache.commons.csv.AssertionsTest.AssertionsTest()"
call "org.apache.commons.csv.AssertionsTest.testNotNull()" "org.apache.commons.csv.Assertions.notNull(Object,String)"
contain "org.apache.commons.csv.AssertionsTest" "org.apache.commons.csv.AssertionsTest.testNotNull()"
contain "org.apache.commons.csv.AssertionsTest" "org.apache.commons.csv.AssertionsTest.testNotNullNull()"
contain "org.apache.commons.csv.AssertionsTest" "org.apache.commons.csv.AssertionsTest.lambda$testNotNullNull$0()"
reference "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.Constants"
reference "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVFormat"
reference "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinter"
reference "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVParser"
reference "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.Utils"
reference "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.IOUtils"
reference "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.lang3.StringUtils"
reference "org.apache.commons.csv.CSVPrinterTest" "org.mockito.Mockito"
reference "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.QuoteMode"
reference "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVRecord"
reference "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.io.output.NullOutputStream"
reference "org.apache.commons.csv.CSVPrinterTest" "org.h2.tools.SimpleResultSet"
reference "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.io.FileUtils"
reference "org.apache.commons.csv.CSVPrinterTest" "char[]"
reference "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVFormatTest.EmptyEnum"
reference "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVFormatTest"
reference "org.apache.commons.csv.CSVPrinterTest.CSVPrinterTest()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.CSVPrinterTest()" "org.apache.commons.csv.CSVFormat.getRecordSeparator()"
reference "org.apache.commons.csv.CSVPrinterTest.CSVPrinterTest()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.CSVPrinterTest()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.printable(String)"
call "org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)" "org.apache.commons.csv.CSVPrinterTest.generateLines(int,int)"
call "org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
call "org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)" "org.apache.commons.csv.CSVPrinter.flush()"
call "org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)" "org.apache.commons.csv.CSVPrinter.close()"
call "org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)" "org.apache.commons.csv.CSVParser.getRecords()"
call "org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)" "org.apache.commons.csv.CSVPrinterTest.expectNulls(Object[],CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)" "org.apache.commons.csv.CSVPrinterTest.printable(String)"
call "org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)" "org.apache.commons.csv.Utils.compare(String,String[][],List)"
call "org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.doRandom(CSVFormat,int)" "org.apache.commons.csv.CSVPrinterTest.doOneRandom(CSVFormat)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.doRandom(CSVFormat,int)"
call "org.apache.commons.csv.CSVPrinterTest.expectNulls(Object[],CSVFormat)" "org.apache.commons.csv.CSVFormat.getNullString()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.expectNulls(Object[],CSVFormat)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.geH2Connection()"
call "org.apache.commons.csv.CSVPrinterTest.generateLines(int,int)" "org.apache.commons.csv.CSVPrinterTest.randStr()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.generateLines(int,int)"
call "org.apache.commons.csv.CSVPrinterTest.printWithHeaderComments(StringWriter,Date,CSVFormat)" "org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])"
call "org.apache.commons.csv.CSVPrinterTest.printWithHeaderComments(StringWriter,Date,CSVFormat)" "org.apache.commons.csv.CSVFormat.withCommentMarker(char)"
call "org.apache.commons.csv.CSVPrinterTest.printWithHeaderComments(StringWriter,Date,CSVFormat)" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVPrinterTest.printWithHeaderComments(StringWriter,Date,CSVFormat)" "org.apache.commons.csv.CSVFormat.print(Appendable)"
call "org.apache.commons.csv.CSVPrinterTest.printWithHeaderComments(StringWriter,Date,CSVFormat)" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
call "org.apache.commons.csv.CSVPrinterTest.printWithHeaderComments(StringWriter,Date,CSVFormat)" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.printWithHeaderComments(StringWriter,Date,CSVFormat)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.randStr()"
call "org.apache.commons.csv.CSVPrinterTest.setUpTable(Connection)" "org.apache.commons.lang3.StringUtils.repeat(char,int)"
reference "org.apache.commons.csv.CSVPrinterTest.setUpTable(Connection)" "org.apache.commons.csv.CSVPrinterTest.longText2 : String"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.setUpTable(Connection)"
call "org.apache.commons.csv.CSVPrinterTest.testCloseBackwardCompatibility()" "org.mockito.Mockito.mock(Class)"
reference "org.apache.commons.csv.CSVPrinterTest.testCloseBackwardCompatibility()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testCloseBackwardCompatibility()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testCloseBackwardCompatibility()" "org.apache.commons.csv.CSVPrinter.close()"
call "org.apache.commons.csv.CSVPrinterTest.testCloseBackwardCompatibility()" "org.mockito.Mockito.never()"
call "org.apache.commons.csv.CSVPrinterTest.testCloseBackwardCompatibility()" "org.mockito.Mockito.verify(Object,VerificationMode)"
call "org.apache.commons.csv.CSVPrinterTest.testCloseBackwardCompatibility()" "org.mockito.Mockito.times(int)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testCloseBackwardCompatibility()"
call "org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()" "org.mockito.Mockito.mock(Class)"
reference "org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()" "org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)"
call "org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()" "org.apache.commons.csv.CSVPrinter.close()"
call "org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()" "org.mockito.Mockito.never()"
call "org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()" "org.mockito.Mockito.verify(Object,VerificationMode)"
call "org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()" "org.mockito.Mockito.times(int)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()"
call "org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()" "org.mockito.Mockito.mock(Class)"
reference "org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()" "org.apache.commons.csv.CSVFormat.withAutoFlush(boolean)"
call "org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()" "org.apache.commons.csv.CSVPrinter.close()"
call "org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()" "org.mockito.Mockito.times(int)"
call "org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()" "org.mockito.Mockito.verify(Object,VerificationMode)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()"
call "org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOff()" "org.mockito.Mockito.mock(Class)"
reference "org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOff()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOff()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOff()" "org.apache.commons.csv.CSVPrinter.close(boolean)"
call "org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOff()" "org.mockito.Mockito.never()"
call "org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOff()" "org.mockito.Mockito.verify(Object,VerificationMode)"
call "org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOff()" "org.mockito.Mockito.times(int)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOff()"
call "org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOn()" "org.mockito.Mockito.mock(Class)"
reference "org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOn()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOn()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOn()" "org.apache.commons.csv.CSVPrinter.close(boolean)"
call "org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOn()" "org.mockito.Mockito.times(int)"
call "org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOn()" "org.mockito.Mockito.verify(Object,VerificationMode)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOn()"
call "org.apache.commons.csv.CSVPrinterTest.testCSV135()" "org.apache.commons.csv.CSVPrinterTest.tryFormat(List,Character,Character,String)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testCSV135()"
reference "org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
call "org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()"
reference "org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()" "org.apache.commons.csv.CSVFormat.withEscape(char)"
reference "org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()" "org.apache.commons.csv.QuoteMode.NONE : QuoteMode"
call "org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()" "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)"
call "org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()"
reference "org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()" "org.apache.commons.csv.CSVFormat.withEscape(char)"
call "org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()" "org.apache.commons.csv.CSVFormat.withQuote(Character)"
call "org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()"
reference "org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()" "org.apache.commons.csv.CSVFormat.withQuote(Character)"
call "org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()"
reference "org.apache.commons.csv.CSVPrinterTest.testDisabledComment()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testDisabledComment()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testDisabledComment()" "org.apache.commons.csv.CSVPrinter.printComment(String)"
call "org.apache.commons.csv.CSVPrinterTest.testDisabledComment()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testDisabledComment()"
reference "org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()" "org.apache.commons.csv.CSVFormat.RFC4180 : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
reference "org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()"
reference "org.apache.commons.csv.CSVPrinterTest.testEolEscaped()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testEolEscaped()" "org.apache.commons.csv.CSVFormat.withQuote(Character)"
call "org.apache.commons.csv.CSVPrinterTest.testEolEscaped()" "org.apache.commons.csv.CSVFormat.withEscape(char)"
call "org.apache.commons.csv.CSVPrinterTest.testEolEscaped()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testEolEscaped()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinterTest.testEolEscaped()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testEolEscaped()"
reference "org.apache.commons.csv.CSVPrinterTest.testEolPlain()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testEolPlain()" "org.apache.commons.csv.CSVFormat.withQuote(Character)"
call "org.apache.commons.csv.CSVPrinterTest.testEolPlain()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testEolPlain()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinterTest.testEolPlain()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testEolPlain()"
reference "org.apache.commons.csv.CSVPrinterTest.testEolQuoted()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testEolQuoted()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
call "org.apache.commons.csv.CSVPrinterTest.testEolQuoted()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testEolQuoted()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinterTest.testEolQuoted()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testEolQuoted()"
reference "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()"
reference "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()"
reference "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()"
reference "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()"
reference "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()"
reference "org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()" "org.apache.commons.csv.CSVFormat.withEscape(Character)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()"
reference "org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()" "org.apache.commons.csv.CSVFormat.withEscape(Character)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()"
reference "org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()" "org.apache.commons.csv.CSVFormat.withEscape(Character)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()"
reference "org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()" "org.apache.commons.csv.CSVFormat.withEscape(Character)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()"
reference "org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()" "org.apache.commons.csv.CSVFormat.withEscape(Character)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()"
reference "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()" "org.apache.commons.csv.CSVPrinter.printRecords(Object[])"
reference "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()"
reference "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()" "org.apache.commons.csv.CSVPrinter.printRecords(Object[])"
reference "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()"
reference "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()" "org.apache.commons.csv.CSVPrinter.printRecords(Iterable)"
reference "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()"
reference "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()" "org.apache.commons.csv.CSVPrinter.printRecords(Iterable)"
reference "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()"
reference "org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
reference "org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()"
reference "org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
reference "org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()"
reference "org.apache.commons.csv.CSVPrinterTest.testHeader()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testHeader()" "org.apache.commons.csv.CSVFormat.withQuote(Character)"
call "org.apache.commons.csv.CSVPrinterTest.testHeader()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVPrinterTest.testHeader()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testHeader()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
call "org.apache.commons.csv.CSVPrinterTest.testHeader()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testHeader()"
reference "org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()" "org.apache.commons.csv.CSVPrinterTest.printWithHeaderComments(StringWriter,Date,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()"
reference "org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()" "org.apache.commons.csv.CSVFormat.TDF : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()" "org.apache.commons.csv.CSVPrinterTest.printWithHeaderComments(StringWriter,Date,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()"
reference "org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()" "org.apache.commons.csv.CSVFormat.withQuote(Character)"
call "org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
call "org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testInvalidFormat()"
call "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()" "org.apache.commons.csv.CSVPrinterTest.geH2Connection()"
call "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()" "org.apache.commons.csv.CSVPrinterTest.setUpTable(Connection)"
reference "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()" "org.apache.commons.csv.CSVPrinter.printRecords(ResultSet)"
call "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()" "org.apache.commons.csv.CSVPrinter.close()"
reference "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
reference "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()" "org.apache.commons.csv.CSVPrinterTest.longText2 : String"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()"
call "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()" "org.apache.commons.csv.CSVPrinterTest.geH2Connection()"
call "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()" "org.apache.commons.csv.CSVPrinterTest.setUpTable(Connection)"
reference "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()" "org.apache.commons.csv.CSVFormat.withHeader(ResultSet)"
call "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()" "org.apache.commons.csv.CSVFormat.print(Appendable)"
call "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()" "org.apache.commons.csv.CSVPrinter.printRecords(ResultSet)"
call "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()" "org.apache.commons.csv.CSVPrinter.close()"
reference "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
reference "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()" "org.apache.commons.csv.CSVPrinterTest.longText2 : String"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()"
call "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()" "org.apache.commons.csv.CSVPrinterTest.geH2Connection()"
call "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()" "org.apache.commons.csv.CSVPrinterTest.setUpTable(Connection)"
reference "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()" "org.apache.commons.csv.CSVFormat.withHeader(ResultSetMetaData)"
call "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()" "org.apache.commons.csv.CSVFormat.print(Appendable)"
call "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()" "org.apache.commons.csv.CSVPrinter.printRecords(ResultSet)"
reference "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
reference "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()" "org.apache.commons.csv.CSVPrinterTest.longText2 : String"
call "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()"
reference "org.apache.commons.csv.CSVPrinterTest.testJira135_part1()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testJira135_part1()" "org.apache.commons.csv.CSVFormat.withRecordSeparator(char)"
call "org.apache.commons.csv.CSVPrinterTest.testJira135_part1()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
call "org.apache.commons.csv.CSVPrinterTest.testJira135_part1()" "org.apache.commons.csv.CSVFormat.withEscape(char)"
call "org.apache.commons.csv.CSVPrinterTest.testJira135_part1()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testJira135_part1()" "org.apache.commons.csv.CSVPrinter.printRecord(Iterable)"
call "org.apache.commons.csv.CSVPrinterTest.testJira135_part1()" "org.apache.commons.csv.CSVPrinter.close()"
call "org.apache.commons.csv.CSVPrinterTest.testJira135_part1()" "org.apache.commons.csv.CSVFormat.getRecordSeparator()"
call "org.apache.commons.csv.CSVPrinterTest.testJira135_part1()" "org.apache.commons.csv.CSVPrinterTest.toFirstRecordValues(String,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testJira135_part1()" "org.apache.commons.csv.CSVPrinterTest.expectNulls(Object[],CSVFormat)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testJira135_part1()"
reference "org.apache.commons.csv.CSVPrinterTest.testJira135_part2()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testJira135_part2()" "org.apache.commons.csv.CSVFormat.withRecordSeparator(char)"
call "org.apache.commons.csv.CSVPrinterTest.testJira135_part2()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
call "org.apache.commons.csv.CSVPrinterTest.testJira135_part2()" "org.apache.commons.csv.CSVFormat.withEscape(char)"
call "org.apache.commons.csv.CSVPrinterTest.testJira135_part2()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testJira135_part2()" "org.apache.commons.csv.CSVPrinter.printRecord(Iterable)"
call "org.apache.commons.csv.CSVPrinterTest.testJira135_part2()" "org.apache.commons.csv.CSVPrinter.close()"
call "org.apache.commons.csv.CSVPrinterTest.testJira135_part2()" "org.apache.commons.csv.CSVFormat.getRecordSeparator()"
call "org.apache.commons.csv.CSVPrinterTest.testJira135_part2()" "org.apache.commons.csv.CSVPrinterTest.toFirstRecordValues(String,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testJira135_part2()" "org.apache.commons.csv.CSVPrinterTest.expectNulls(Object[],CSVFormat)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testJira135_part2()"
reference "org.apache.commons.csv.CSVPrinterTest.testJira135_part3()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testJira135_part3()" "org.apache.commons.csv.CSVFormat.withRecordSeparator(char)"
call "org.apache.commons.csv.CSVPrinterTest.testJira135_part3()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
call "org.apache.commons.csv.CSVPrinterTest.testJira135_part3()" "org.apache.commons.csv.CSVFormat.withEscape(char)"
call "org.apache.commons.csv.CSVPrinterTest.testJira135_part3()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testJira135_part3()" "org.apache.commons.csv.CSVPrinter.printRecord(Iterable)"
call "org.apache.commons.csv.CSVPrinterTest.testJira135_part3()" "org.apache.commons.csv.CSVPrinter.close()"
call "org.apache.commons.csv.CSVPrinterTest.testJira135_part3()" "org.apache.commons.csv.CSVFormat.getRecordSeparator()"
call "org.apache.commons.csv.CSVPrinterTest.testJira135_part3()" "org.apache.commons.csv.CSVPrinterTest.toFirstRecordValues(String,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testJira135_part3()" "org.apache.commons.csv.CSVPrinterTest.expectNulls(Object[],CSVFormat)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testJira135_part3()"
reference "org.apache.commons.csv.CSVPrinterTest.testJira135All()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testJira135All()" "org.apache.commons.csv.CSVFormat.withRecordSeparator(char)"
call "org.apache.commons.csv.CSVPrinterTest.testJira135All()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
call "org.apache.commons.csv.CSVPrinterTest.testJira135All()" "org.apache.commons.csv.CSVFormat.withEscape(char)"
call "org.apache.commons.csv.CSVPrinterTest.testJira135All()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testJira135All()" "org.apache.commons.csv.CSVPrinter.printRecord(Iterable)"
call "org.apache.commons.csv.CSVPrinterTest.testJira135All()" "org.apache.commons.csv.CSVPrinter.close()"
call "org.apache.commons.csv.CSVPrinterTest.testJira135All()" "org.apache.commons.csv.CSVFormat.getRecordSeparator()"
call "org.apache.commons.csv.CSVPrinterTest.testJira135All()" "org.apache.commons.csv.CSVPrinterTest.toFirstRecordValues(String,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testJira135All()" "org.apache.commons.csv.CSVPrinterTest.expectNulls(Object[],CSVFormat)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testJira135All()"
reference "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()" "org.apache.commons.csv.CSVFormat.MONGODB_CSV : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
reference "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()"
reference "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()" "org.apache.commons.csv.CSVFormat.MONGODB_CSV : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
reference "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()"
reference "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()" "org.apache.commons.csv.CSVFormat.MONGODB_CSV : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
reference "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()"
reference "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()" "org.apache.commons.csv.CSVFormat.MONGODB_CSV : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
reference "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()"
reference "org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()" "org.apache.commons.csv.CSVFormat.MONGODB_TSV : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
reference "org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()"
reference "org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()" "org.apache.commons.csv.CSVFormat.MONGODB_TSV : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
reference "org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()"
reference "org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()" "org.apache.commons.csv.CSVFormat.MONGODB_TSV : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
reference "org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()"
reference "org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()" "org.apache.commons.csv.CSVFormat.withCommentMarker(char)"
call "org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()" "org.apache.commons.csv.CSVPrinter.printComment(String)"
reference "org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()"
reference "org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()" "org.apache.commons.csv.CSVFormat.MYSQL : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
call "org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()" "org.apache.commons.csv.CSVFormat.withNullString(String)"
reference "org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()" "org.apache.commons.csv.QuoteMode.NON_NUMERIC : QuoteMode"
call "org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()" "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)"
call "org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
call "org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()" "org.apache.commons.csv.CSVPrinter.close()"
call "org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()" "org.apache.commons.csv.CSVPrinterTest.toFirstRecordValues(String,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()" "org.apache.commons.csv.CSVPrinterTest.expectNulls(Object[],CSVFormat)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()"
reference "org.apache.commons.csv.CSVPrinterTest.testMySqlNullStringDefault()" "org.apache.commons.csv.CSVFormat.MYSQL : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testMySqlNullStringDefault()" "org.apache.commons.csv.CSVFormat.getNullString()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testMySqlNullStringDefault()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testNewCsvPrinterAppendableNullFormat()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testNewCsvPrinterNullAppendableFormat()"
reference "org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()" "org.apache.commons.csv.CSVFormat.withNullString(String)"
call "org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
call "org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()" "org.apache.commons.csv.CSVPrinter.close()"
reference "org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()" "org.apache.commons.csv.CSVRecord.get(int)"
call "org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()"
reference "org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()" "org.apache.commons.csv.CSVFormat.withQuote(Character)"
call "org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()" "org.apache.commons.csv.CSVFormat.withEscape(char)"
call "org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()"
reference "org.apache.commons.csv.CSVPrinterTest.testPlainPlain()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testPlainPlain()" "org.apache.commons.csv.CSVFormat.withQuote(Character)"
call "org.apache.commons.csv.CSVPrinterTest.testPlainPlain()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testPlainPlain()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinterTest.testPlainPlain()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testPlainPlain()"
reference "org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
call "org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()"
reference "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvNullOutput()" "org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvNullOutput()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
call "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvNullOutput()" "org.apache.commons.csv.CSVFormat.withNullString(String)"
reference "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvNullOutput()" "org.apache.commons.csv.QuoteMode.ALL_NON_NULL : QuoteMode"
call "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvNullOutput()" "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)"
call "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvNullOutput()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvNullOutput()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
call "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvNullOutput()" "org.apache.commons.csv.CSVPrinter.close()"
call "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvNullOutput()" "org.apache.commons.csv.CSVPrinterTest.toFirstRecordValues(String,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvNullOutput()" "org.apache.commons.csv.CSVPrinterTest.expectNulls(Object[],CSVFormat)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvNullOutput()"
reference "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvTextOutput()" "org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvTextOutput()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
call "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvTextOutput()" "org.apache.commons.csv.CSVFormat.withNullString(String)"
reference "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvTextOutput()" "org.apache.commons.csv.QuoteMode.ALL_NON_NULL : QuoteMode"
call "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvTextOutput()" "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)"
call "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvTextOutput()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvTextOutput()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
call "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvTextOutput()" "org.apache.commons.csv.CSVPrinter.close()"
call "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvTextOutput()" "org.apache.commons.csv.CSVPrinterTest.toFirstRecordValues(String,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvTextOutput()" "org.apache.commons.csv.CSVPrinterTest.expectNulls(Object[],CSVFormat)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlCsvTextOutput()"
reference "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlNullStringDefaultCsv()" "org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlNullStringDefaultCsv()" "org.apache.commons.csv.CSVFormat.getNullString()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlNullStringDefaultCsv()"
reference "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlNullStringDefaultText()" "org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlNullStringDefaultText()" "org.apache.commons.csv.CSVFormat.getNullString()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testPostgreSqlNullStringDefaultText()"
reference "org.apache.commons.csv.CSVPrinterTest.testPrint()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testPrint()" "org.apache.commons.csv.CSVFormat.print(Appendable)"
call "org.apache.commons.csv.CSVPrinterTest.testPrint()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
reference "org.apache.commons.csv.CSVPrinterTest.testPrint()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testPrint()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testPrint()"
reference "org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()" "org.apache.commons.csv.CSVFormat.withNullString(String)"
call "org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
reference "org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()"
reference "org.apache.commons.csv.CSVPrinterTest.testPrinter1()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testPrinter1()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testPrinter1()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
reference "org.apache.commons.csv.CSVPrinterTest.testPrinter1()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testPrinter1()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testPrinter1()"
reference "org.apache.commons.csv.CSVPrinterTest.testPrinter2()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testPrinter2()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testPrinter2()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
reference "org.apache.commons.csv.CSVPrinterTest.testPrinter2()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testPrinter2()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testPrinter2()"
reference "org.apache.commons.csv.CSVPrinterTest.testPrinter3()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testPrinter3()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testPrinter3()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
reference "org.apache.commons.csv.CSVPrinterTest.testPrinter3()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testPrinter3()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testPrinter3()"
reference "org.apache.commons.csv.CSVPrinterTest.testPrinter4()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testPrinter4()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testPrinter4()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
reference "org.apache.commons.csv.CSVPrinterTest.testPrinter4()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testPrinter4()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testPrinter4()"
reference "org.apache.commons.csv.CSVPrinterTest.testPrinter5()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testPrinter5()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testPrinter5()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
reference "org.apache.commons.csv.CSVPrinterTest.testPrinter5()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testPrinter5()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testPrinter5()"
reference "org.apache.commons.csv.CSVPrinterTest.testPrinter6()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testPrinter6()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testPrinter6()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
reference "org.apache.commons.csv.CSVPrinterTest.testPrinter6()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testPrinter6()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testPrinter6()"
reference "org.apache.commons.csv.CSVPrinterTest.testPrinter7()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testPrinter7()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testPrinter7()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
reference "org.apache.commons.csv.CSVPrinterTest.testPrinter7()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testPrinter7()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testPrinter7()"
reference "org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
reference "org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()"
reference "org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
reference "org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()" "org.apache.commons.csv.QuoteMode.MINIMAL : QuoteMode"
call "org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()" "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)"
call "org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()"
reference "org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToAppendable()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToAppendable()" "org.apache.commons.csv.CSVFormat.withQuote(Character)"
call "org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToAppendable()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToAppendable()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToAppendable()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToAppendable()"
reference "org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()" "org.apache.commons.csv.CSVFormat.withQuote(Character)"
call "org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()"
reference "org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()" "org.apache.commons.io.output.NullOutputStream.NULL_OUTPUT_STREAM : NullOutputStream"
reference "org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()" "org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()" "org.apache.commons.csv.CSVFormat.printer()"
call "org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()" "org.apache.commons.csv.CSVPrinter.printRecords(Iterable)"
call "org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()"
reference "org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()" "org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()" "org.apache.commons.csv.CSVFormat.print(Appendable)"
call "org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()" "org.apache.commons.csv.CSVPrinter.printRecords(Object[])"
call "org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()"
reference "org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithResultSetOneRow()" "org.apache.commons.csv.CSVFormat.MYSQL : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithResultSetOneRow()" "org.apache.commons.csv.CSVFormat.printer()"
call "org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithResultSetOneRow()" "org.h2.tools.SimpleResultSet.SimpleResultSet()"
call "org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithResultSetOneRow()" "org.apache.commons.csv.CSVPrinter.printRecords(ResultSet)"
call "org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithResultSetOneRow()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithResultSetOneRow()"
reference "org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()" "org.apache.commons.csv.CSVFormat.print(File,Charset)"
call "org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
call "org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()" "org.apache.commons.csv.CSVPrinter.close()"
reference "org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()" "org.apache.commons.io.FileUtils.readFileToString(File,Charset)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()"
reference "org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()" "org.apache.commons.csv.CSVFormat.print(File,Charset)"
call "org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
call "org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()" "org.apache.commons.csv.CSVPrinter.close()"
reference "org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()" "org.apache.commons.io.FileUtils.readFileToString(File,Charset)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()"
reference "org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()" "org.apache.commons.csv.CSVFormat.print(Path,Charset)"
call "org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
call "org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()" "org.apache.commons.csv.CSVPrinter.close()"
reference "org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()" "org.apache.commons.io.FileUtils.readFileToString(File,Charset)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()"
reference "org.apache.commons.csv.CSVPrinterTest.testQuoteAll()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
reference "org.apache.commons.csv.CSVPrinterTest.testQuoteAll()" "org.apache.commons.csv.QuoteMode.ALL : QuoteMode"
call "org.apache.commons.csv.CSVPrinterTest.testQuoteAll()" "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)"
call "org.apache.commons.csv.CSVPrinterTest.testQuoteAll()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testQuoteAll()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
reference "org.apache.commons.csv.CSVPrinterTest.testQuoteAll()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testQuoteAll()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testQuoteAll()"
reference "org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()" "org.apache.commons.csv.CSVFormat.RFC4180 : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
reference "org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()"
reference "org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
reference "org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()" "org.apache.commons.csv.QuoteMode.NON_NUMERIC : QuoteMode"
call "org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()" "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)"
call "org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
reference "org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()"
reference "org.apache.commons.csv.CSVPrinterTest.testRandomDefault()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testRandomDefault()" "org.apache.commons.csv.CSVPrinterTest.doRandom(CSVFormat,int)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testRandomDefault()"
reference "org.apache.commons.csv.CSVPrinterTest.testRandomExcel()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testRandomExcel()" "org.apache.commons.csv.CSVPrinterTest.doRandom(CSVFormat,int)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testRandomExcel()"
reference "org.apache.commons.csv.CSVPrinterTest.testRandomMongoDbCsv()" "org.apache.commons.csv.CSVFormat.MONGODB_CSV : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testRandomMongoDbCsv()" "org.apache.commons.csv.CSVPrinterTest.doRandom(CSVFormat,int)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testRandomMongoDbCsv()"
reference "org.apache.commons.csv.CSVPrinterTest.testRandomMySql()" "org.apache.commons.csv.CSVFormat.MYSQL : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testRandomMySql()" "org.apache.commons.csv.CSVPrinterTest.doRandom(CSVFormat,int)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testRandomMySql()"
reference "org.apache.commons.csv.CSVPrinterTest.testRandomOracle()" "org.apache.commons.csv.CSVFormat.ORACLE : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testRandomOracle()" "org.apache.commons.csv.CSVPrinterTest.doRandom(CSVFormat,int)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testRandomOracle()"
reference "org.apache.commons.csv.CSVPrinterTest.testRandomPostgreSqlCsv()" "org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testRandomPostgreSqlCsv()" "org.apache.commons.csv.CSVPrinterTest.doRandom(CSVFormat,int)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testRandomPostgreSqlCsv()"
reference "org.apache.commons.csv.CSVPrinterTest.testRandomPostgreSqlText()" "org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testRandomPostgreSqlText()" "org.apache.commons.csv.CSVPrinterTest.doRandom(CSVFormat,int)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testRandomPostgreSqlText()"
reference "org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()" "org.apache.commons.csv.CSVFormat.RFC4180 : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()" "org.apache.commons.csv.CSVPrinterTest.doRandom(CSVFormat,int)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()"
reference "org.apache.commons.csv.CSVPrinterTest.testRandomTdf()" "org.apache.commons.csv.CSVFormat.TDF : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testRandomTdf()" "org.apache.commons.csv.CSVPrinterTest.doRandom(CSVFormat,int)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testRandomTdf()"
reference "org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()" "org.apache.commons.csv.CSVFormat.withCommentMarker(char)"
call "org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()" "org.apache.commons.csv.CSVPrinter.printComment(String)"
reference "org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
call "org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()"
reference "org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
call "org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()"
reference "org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()" "org.apache.commons.csv.CSVFormat.withQuote(Character)"
call "org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()" "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)"
call "org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
call "org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()"
reference "org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()" "org.apache.commons.csv.CSVFormat.withQuote(Character)"
call "org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()" "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)"
call "org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
call "org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()"
reference "org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()" "org.apache.commons.csv.CSVFormat.withTrailingDelimiter()"
call "org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
call "org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()"
reference "org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()" "org.apache.commons.csv.CSVFormat.withTrim(boolean)"
call "org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()"
reference "org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()" "org.apache.commons.csv.CSVFormat.withTrim()"
call "org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()"
reference "org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()" "org.apache.commons.csv.CSVFormat.withTrim()"
call "org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()" "org.apache.commons.csv.CSVPrinter.print(Object)"
call "org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()"
call "org.apache.commons.csv.CSVPrinterTest.toFirstRecordValues(String,CSVFormat)" "org.apache.commons.csv.CSVParser.parse(String,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.toFirstRecordValues(String,CSVFormat)" "org.apache.commons.csv.CSVParser.getRecords()"
call "org.apache.commons.csv.CSVPrinterTest.toFirstRecordValues(String,CSVFormat)" "org.apache.commons.csv.CSVRecord.values()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.toFirstRecordValues(String,CSVFormat)"
reference "org.apache.commons.csv.CSVPrinterTest.tryFormat(List,Character,Character,String)" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.CSVPrinterTest.tryFormat(List,Character,Character,String)" "org.apache.commons.csv.CSVFormat.withQuote(Character)"
call "org.apache.commons.csv.CSVPrinterTest.tryFormat(List,Character,Character,String)" "org.apache.commons.csv.CSVFormat.withEscape(Character)"
call "org.apache.commons.csv.CSVPrinterTest.tryFormat(List,Character,Character,String)" "org.apache.commons.csv.CSVFormat.withRecordSeparator(String)"
call "org.apache.commons.csv.CSVPrinterTest.tryFormat(List,Character,Character,String)" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.CSVPrinterTest.tryFormat(List,Character,Character,String)" "org.apache.commons.csv.CSVPrinter.printRecord(Iterable)"
call "org.apache.commons.csv.CSVPrinterTest.tryFormat(List,Character,Character,String)" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.tryFormat(List,Character,Character,String)"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.lambda$testNewCsvPrinterNullAppendableFormat$2()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.lambda$testNewCsvPrinterAppendableNullFormat$1()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.lambda$testInvalidFormat$0()"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.EURO_CH : char"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.DQUOTE_CHAR : char"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.BACKSLASH_CH : char"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.QUOTE_CH : char"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.ITERATIONS_FOR_RANDOM_TEST : int"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.recordSeparator : String"
contain "org.apache.commons.csv.CSVPrinterTest" "org.apache.commons.csv.CSVPrinterTest.longText2 : String"
reference "org.apache.commons.csv.Utils" "org.apache.commons.csv.CSVRecord"
contain "org.apache.commons.csv.Utils" "org.apache.commons.csv.Utils.Utils()"
call "org.apache.commons.csv.Utils.compare(String,String[][],List)" "org.apache.commons.csv.CSVRecord.values()"
contain "org.apache.commons.csv.Utils" "org.apache.commons.csv.Utils.compare(String,String[][],List)"
reference "org.apache.commons.csv.issues.JiraCsv167Test" "org.apache.commons.csv.CSVFormat"
reference "org.apache.commons.csv.issues.JiraCsv167Test" "org.apache.commons.csv.QuoteMode"
reference "org.apache.commons.csv.issues.JiraCsv167Test" "org.apache.commons.csv.CSVParser"
reference "org.apache.commons.csv.issues.JiraCsv167Test" "org.apache.commons.csv.CSVRecord"
contain "org.apache.commons.csv.issues.JiraCsv167Test" "org.apache.commons.csv.issues.JiraCsv167Test.JiraCsv167Test()"
call "org.apache.commons.csv.issues.JiraCsv167Test.parse()" "org.apache.commons.csv.issues.JiraCsv167Test.getTestInput()"
reference "org.apache.commons.csv.issues.JiraCsv167Test.parse()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.issues.JiraCsv167Test.parse()" "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)"
call "org.apache.commons.csv.issues.JiraCsv167Test.parse()" "org.apache.commons.csv.CSVFormat.withCommentMarker(char)"
call "org.apache.commons.csv.issues.JiraCsv167Test.parse()" "org.apache.commons.csv.CSVFormat.withDelimiter(char)"
call "org.apache.commons.csv.issues.JiraCsv167Test.parse()" "org.apache.commons.csv.CSVFormat.withEscape(char)"
call "org.apache.commons.csv.issues.JiraCsv167Test.parse()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.issues.JiraCsv167Test.parse()" "org.apache.commons.csv.CSVFormat.withHeaderComments(Object[])"
call "org.apache.commons.csv.issues.JiraCsv167Test.parse()" "org.apache.commons.csv.CSVFormat.withNullString(String)"
call "org.apache.commons.csv.issues.JiraCsv167Test.parse()" "org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean)"
call "org.apache.commons.csv.issues.JiraCsv167Test.parse()" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)"
call "org.apache.commons.csv.issues.JiraCsv167Test.parse()" "org.apache.commons.csv.CSVFormat.withQuote(char)"
reference "org.apache.commons.csv.issues.JiraCsv167Test.parse()" "org.apache.commons.csv.QuoteMode.ALL : QuoteMode"
call "org.apache.commons.csv.issues.JiraCsv167Test.parse()" "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)"
call "org.apache.commons.csv.issues.JiraCsv167Test.parse()" "org.apache.commons.csv.CSVFormat.withRecordSeparator(char)"
call "org.apache.commons.csv.issues.JiraCsv167Test.parse()" "org.apache.commons.csv.CSVFormat.withSkipHeaderRecord(boolean)"
call "org.apache.commons.csv.issues.JiraCsv167Test.parse()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.issues.JiraCsv167Test.parse()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.issues.JiraCsv167Test.parse()" "org.apache.commons.csv.CSVRecord.hasComment()"
call "org.apache.commons.csv.issues.JiraCsv167Test.parse()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.issues.JiraCsv167Test" "org.apache.commons.csv.issues.JiraCsv167Test.parse()"
contain "org.apache.commons.csv.issues.JiraCsv167Test" "org.apache.commons.csv.issues.JiraCsv167Test.getTestInput()"
reference "org.apache.commons.csv.CSVFormatTest.EmptyEnum" "org.apache.commons.csv.CSVFormatTest.EmptyEnum[]"
reference "org.apache.commons.csv.CSVFormatTest.EmptyEnum" "org.apache.commons.csv.CSVFormatTest"
reference "org.apache.commons.csv.CSVFormatTest.EmptyEnum.values()" "org.apache.commons.csv.CSVFormatTest.EmptyEnum.$VALUES : EmptyEnum[]"
call "org.apache.commons.csv.CSVFormatTest.EmptyEnum.values()" "org.apache.commons.csv.CSVFormatTest.EmptyEnum[].clone()"
contain "org.apache.commons.csv.CSVFormatTest.EmptyEnum" "org.apache.commons.csv.CSVFormatTest.EmptyEnum.values()"
contain "org.apache.commons.csv.CSVFormatTest.EmptyEnum" "org.apache.commons.csv.CSVFormatTest.EmptyEnum.valueOf(String)"
contain "org.apache.commons.csv.CSVFormatTest.EmptyEnum" "org.apache.commons.csv.CSVFormatTest.EmptyEnum.EmptyEnum(String,int)"
reference "org.apache.commons.csv.CSVFormatTest.EmptyEnum.static {...}" "org.apache.commons.csv.CSVFormatTest.EmptyEnum.$VALUES : EmptyEnum[]"
contain "org.apache.commons.csv.CSVFormatTest.EmptyEnum" "org.apache.commons.csv.CSVFormatTest.EmptyEnum.static {...}"
reference "org.apache.commons.csv.CSVFormatTest.EmptyEnum.$VALUES : EmptyEnum[]" "org.apache.commons.csv.CSVFormatTest.EmptyEnum[]"
contain "org.apache.commons.csv.CSVFormatTest.EmptyEnum" "org.apache.commons.csv.CSVFormatTest.EmptyEnum.$VALUES : EmptyEnum[]"
reference "org.apache.commons.csv.QuoteMode" "org.apache.commons.csv.QuoteMode[]"
reference "org.apache.commons.csv.QuoteMode.values()" "org.apache.commons.csv.QuoteMode.$VALUES : QuoteMode[]"
call "org.apache.commons.csv.QuoteMode.values()" "org.apache.commons.csv.QuoteMode[].clone()"
contain "org.apache.commons.csv.QuoteMode" "org.apache.commons.csv.QuoteMode.values()"
contain "org.apache.commons.csv.QuoteMode" "org.apache.commons.csv.QuoteMode.valueOf(String)"
contain "org.apache.commons.csv.QuoteMode" "org.apache.commons.csv.QuoteMode.QuoteMode(String,int)"
call "org.apache.commons.csv.QuoteMode.static {...}" "org.apache.commons.csv.QuoteMode.QuoteMode(String,int)"
reference "org.apache.commons.csv.QuoteMode.static {...}" "org.apache.commons.csv.QuoteMode.ALL : QuoteMode"
reference "org.apache.commons.csv.QuoteMode.static {...}" "org.apache.commons.csv.QuoteMode.ALL_NON_NULL : QuoteMode"
reference "org.apache.commons.csv.QuoteMode.static {...}" "org.apache.commons.csv.QuoteMode.MINIMAL : QuoteMode"
reference "org.apache.commons.csv.QuoteMode.static {...}" "org.apache.commons.csv.QuoteMode.NON_NUMERIC : QuoteMode"
reference "org.apache.commons.csv.QuoteMode.static {...}" "org.apache.commons.csv.QuoteMode.NONE : QuoteMode"
reference "org.apache.commons.csv.QuoteMode.static {...}" "org.apache.commons.csv.QuoteMode.$VALUES : QuoteMode[]"
contain "org.apache.commons.csv.QuoteMode" "org.apache.commons.csv.QuoteMode.static {...}"
reference "org.apache.commons.csv.QuoteMode.ALL : QuoteMode" "org.apache.commons.csv.QuoteMode"
contain "org.apache.commons.csv.QuoteMode" "org.apache.commons.csv.QuoteMode.ALL : QuoteMode"
reference "org.apache.commons.csv.QuoteMode.ALL_NON_NULL : QuoteMode" "org.apache.commons.csv.QuoteMode"
contain "org.apache.commons.csv.QuoteMode" "org.apache.commons.csv.QuoteMode.ALL_NON_NULL : QuoteMode"
reference "org.apache.commons.csv.QuoteMode.MINIMAL : QuoteMode" "org.apache.commons.csv.QuoteMode"
contain "org.apache.commons.csv.QuoteMode" "org.apache.commons.csv.QuoteMode.MINIMAL : QuoteMode"
reference "org.apache.commons.csv.QuoteMode.NON_NUMERIC : QuoteMode" "org.apache.commons.csv.QuoteMode"
contain "org.apache.commons.csv.QuoteMode" "org.apache.commons.csv.QuoteMode.NON_NUMERIC : QuoteMode"
reference "org.apache.commons.csv.QuoteMode.NONE : QuoteMode" "org.apache.commons.csv.QuoteMode"
contain "org.apache.commons.csv.QuoteMode" "org.apache.commons.csv.QuoteMode.NONE : QuoteMode"
reference "org.apache.commons.csv.QuoteMode.$VALUES : QuoteMode[]" "org.apache.commons.csv.QuoteMode[]"
contain "org.apache.commons.csv.QuoteMode" "org.apache.commons.csv.QuoteMode.$VALUES : QuoteMode[]"
reference "org.apache.commons.csv.issues.JiraCsv247Test" "org.apache.commons.csv.CSVFormat"
reference "org.apache.commons.csv.issues.JiraCsv247Test" "org.apache.commons.csv.CSVParser"
reference "org.apache.commons.csv.issues.JiraCsv247Test" "org.apache.commons.csv.CSVRecord"
contain "org.apache.commons.csv.issues.JiraCsv247Test" "org.apache.commons.csv.issues.JiraCsv247Test.JiraCsv247Test()"
reference "org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()" "org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean)"
call "org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()" "org.apache.commons.csv.CSVFormat.getAllowMissingColumnNames()"
call "org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()" "org.apache.commons.csv.CSVFormat.parse(Reader)"
call "org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()" "org.apache.commons.csv.CSVParser.getHeaderNames()"
call "org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()" "org.apache.commons.csv.CSVParser.iterator()"
call "org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()" "org.apache.commons.csv.CSVRecord.get(int)"
call "org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()" "org.apache.commons.csv.CSVParser.close()"
contain "org.apache.commons.csv.issues.JiraCsv247Test" "org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()"
reference "org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()" "org.apache.commons.csv.CSVFormat.DEFAULT : CSVFormat"
call "org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()" "org.apache.commons.csv.CSVFormat.withHeader(String[])"
call "org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()" "org.apache.commons.csv.CSVFormat.getAllowMissingColumnNames()"
contain "org.apache.commons.csv.issues.JiraCsv247Test" "org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()"
contain "org.apache.commons.csv.issues.JiraCsv247Test" "org.apache.commons.csv.issues.JiraCsv247Test.lambda$testHeadersMissingThrowsWhenNotAllowingMissingColumnNames$1(CSVFormat)"
contain "org.apache.commons.csv.issues.JiraCsv247Test" "org.apache.commons.csv.issues.JiraCsv247Test.lambda$testHeadersMissingThrowsWhenNotAllowingMissingColumnNames$0(CSVFormat)"
reference "org.apache.commons.csv.PerformanceTest.Stats" "org.apache.commons.csv.PerformanceTest"
reference "org.apache.commons.csv.PerformanceTest.Stats.Stats(int,int)" "org.apache.commons.csv.PerformanceTest.Stats.count : int"
reference "org.apache.commons.csv.PerformanceTest.Stats.Stats(int,int)" "org.apache.commons.csv.PerformanceTest.Stats.fields : int"
contain "org.apache.commons.csv.PerformanceTest.Stats" "org.apache.commons.csv.PerformanceTest.Stats.Stats(int,int)"
contain "org.apache.commons.csv.PerformanceTest.Stats" "org.apache.commons.csv.PerformanceTest.Stats.count : int"
contain "org.apache.commons.csv.PerformanceTest.Stats" "org.apache.commons.csv.PerformanceTest.Stats.fields : int"
reference "org.apache.commons.csv.issues.JiraCsv203Test" "org.apache.commons.csv.CSVFormat"
reference "org.apache.commons.csv.issues.JiraCsv203Test" "org.apache.commons.csv.QuoteMode"
reference "org.apache.commons.csv.issues.JiraCsv203Test" "org.apache.commons.csv.CSVPrinter"
contain "org.apache.commons.csv.issues.JiraCsv203Test" "org.apache.commons.csv.issues.JiraCsv203Test.JiraCsv203Test()"
reference "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()" "org.apache.commons.csv.CSVFormat.withNullString(String)"
call "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)"
reference "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()" "org.apache.commons.csv.QuoteMode.ALL : QuoteMode"
call "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()" "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)"
call "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
call "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.issues.JiraCsv203Test" "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()"
reference "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()" "org.apache.commons.csv.CSVFormat.withNullString(String)"
call "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)"
reference "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()" "org.apache.commons.csv.QuoteMode.ALL_NON_NULL : QuoteMode"
call "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()" "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)"
call "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
call "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.issues.JiraCsv203Test" "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()"
reference "org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()" "org.apache.commons.csv.CSVFormat.withNullString(String)"
call "org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)"
call "org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
call "org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.issues.JiraCsv203Test" "org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()"
reference "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()" "org.apache.commons.csv.CSVFormat.withNullString(String)"
call "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)"
reference "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()" "org.apache.commons.csv.QuoteMode.MINIMAL : QuoteMode"
call "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()" "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)"
call "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
call "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.issues.JiraCsv203Test" "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()"
reference "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()" "org.apache.commons.csv.CSVFormat.withNullString(String)"
call "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)"
reference "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()" "org.apache.commons.csv.QuoteMode.NON_NUMERIC : QuoteMode"
call "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()" "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)"
call "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
call "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.issues.JiraCsv203Test" "org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()"
reference "org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)"
reference "org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()" "org.apache.commons.csv.QuoteMode.ALL : QuoteMode"
call "org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()" "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)"
call "org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
call "org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.issues.JiraCsv203Test" "org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()"
reference "org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()" "org.apache.commons.csv.CSVFormat.EXCEL : CSVFormat"
call "org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()" "org.apache.commons.csv.CSVFormat.withNullString(String)"
call "org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()" "org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)"
reference "org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()" "org.apache.commons.csv.QuoteMode.ALL : QuoteMode"
call "org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()" "org.apache.commons.csv.CSVFormat.withQuoteMode(QuoteMode)"
call "org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()" "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
call "org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()" "org.apache.commons.csv.CSVPrinter.printRecord(Object[])"
call "org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()" "org.apache.commons.csv.CSVPrinter.close()"
contain "org.apache.commons.csv.issues.JiraCsv203Test" "org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()"
reference "org.apache.commons.csv.CSVFormatTest.Header" "org.apache.commons.csv.CSVFormatTest.Header[]"
reference "org.apache.commons.csv.CSVFormatTest.Header" "org.apache.commons.csv.CSVFormatTest"
reference "org.apache.commons.csv.CSVFormatTest.Header.values()" "org.apache.commons.csv.CSVFormatTest.Header.$VALUES : Header[]"
call "org.apache.commons.csv.CSVFormatTest.Header.values()" "org.apache.commons.csv.CSVFormatTest.Header[].clone()"
contain "org.apache.commons.csv.CSVFormatTest.Header" "org.apache.commons.csv.CSVFormatTest.Header.values()"
contain "org.apache.commons.csv.CSVFormatTest.Header" "org.apache.commons.csv.CSVFormatTest.Header.valueOf(String)"
contain "org.apache.commons.csv.CSVFormatTest.Header" "org.apache.commons.csv.CSVFormatTest.Header.Header(String,int)"
call "org.apache.commons.csv.CSVFormatTest.Header.static {...}" "org.apache.commons.csv.CSVFormatTest.Header.Header(String,int)"
reference "org.apache.commons.csv.CSVFormatTest.Header.static {...}" "org.apache.commons.csv.CSVFormatTest.Header.Name : Header"
reference "org.apache.commons.csv.CSVFormatTest.Header.static {...}" "org.apache.commons.csv.CSVFormatTest.Header.Email : Header"
reference "org.apache.commons.csv.CSVFormatTest.Header.static {...}" "org.apache.commons.csv.CSVFormatTest.Header.Phone : Header"
reference "org.apache.commons.csv.CSVFormatTest.Header.static {...}" "org.apache.commons.csv.CSVFormatTest.Header.$VALUES : Header[]"
contain "org.apache.commons.csv.CSVFormatTest.Header" "org.apache.commons.csv.CSVFormatTest.Header.static {...}"
reference "org.apache.commons.csv.CSVFormatTest.Header.Name : Header" "org.apache.commons.csv.CSVFormatTest.Header"
contain "org.apache.commons.csv.CSVFormatTest.Header" "org.apache.commons.csv.CSVFormatTest.Header.Name : Header"
reference "org.apache.commons.csv.CSVFormatTest.Header.Email : Header" "org.apache.commons.csv.CSVFormatTest.Header"
contain "org.apache.commons.csv.CSVFormatTest.Header" "org.apache.commons.csv.CSVFormatTest.Header.Email : Header"
reference "org.apache.commons.csv.CSVFormatTest.Header.Phone : Header" "org.apache.commons.csv.CSVFormatTest.Header"
contain "org.apache.commons.csv.CSVFormatTest.Header" "org.apache.commons.csv.CSVFormatTest.Header.Phone : Header"
reference "org.apache.commons.csv.CSVFormatTest.Header.$VALUES : Header[]" "org.apache.commons.csv.CSVFormatTest.Header[]"
contain "org.apache.commons.csv.CSVFormatTest.Header" "org.apache.commons.csv.CSVFormatTest.Header.$VALUES : Header[]"
